Search.setIndex({"alltitles": {"API Reference": [[5, null]], "Abstract Acquisition Function APIs": [[0, "module-botorch.acquisition.acquisition"]], "Abstract Box Decompositions": [[13, "module-botorch.utils.multi_objective.box_decompositions.box_decomposition"]], "Abstract Posterior API": [[9, "module-botorch.posteriors.posterior"]], "Abstract Test Function API": [[12, "module-botorch.test_functions.base"]], "Acquisition Function APIs": [[0, "acquisition-function-apis"]], "Acquisition Function Optimization": [[8, "module-botorch.optim.optimize"]], "Acquisition Function Optimization with Homotopy": [[8, "module-botorch.optim.optimize_homotopy"]], "Acquisition Functions": [[0, "acquisition-functions"]], "Acquisition Optimization Utilities": [[8, "module-botorch.optim.utils.acquisition_utils"]], "Active Learning Acquisition Functions": [[0, "module-botorch.acquisition.active_learning"]], "Analytic Acquisition Function API": [[0, "analytic-acquisition-function-api"]], "Analytic Acquisition Functions": [[0, "module-botorch.acquisition.analytic"]], "Base Model API": [[7, "module-botorch.models.model"]], "Base Samples": [[9, "module-botorch.posteriors.base_samples"]], "Bivariate Normal Probabilities and Statistics": [[13, "module-botorch.utils.probability.bvn"]], "BoTorch API Reference": [[5, null]], "Box Decomposition List": [[13, "module-botorch.utils.multi_objective.box_decompositions.box_decomposition_list"]], "Box Decomposition Utilities": [[13, "module-botorch.utils.multi_objective.box_decompositions.utils"]], "Cached Cholesky Acquisition Function API": [[0, "module-botorch.acquisition.cached_cholesky"]], "Candidate Generation Utilities for Acquisition Functions": [[4, "module-botorch.generation.gen"]], "Closures": [[8, "closures"]], "Constants": [[13, "module-botorch.utils.constants"]], "Constraints": [[13, "module-botorch.utils.constraints"]], "Constructors for Acquisition Function Input Arguments": [[0, "module-botorch.acquisition.input_constructors"]], "Containers": [[13, "module-botorch.utils.containers"]], "Context Managers": [[13, "module-botorch.utils.context_managers"]], "Contextual GP Models with Aggregate Rewards": [[7, "module-botorch.models.contextual"]], "Contextual GP Models with Context Rewards": [[7, "module-botorch.models.contextual_multioutput"]], "Core": [[8, "module-botorch.optim.core"], [8, "id2"]], "Cost Models (for cost-aware optimization)": [[7, "module-botorch.models.cost"]], "Cost-Aware Utility": [[0, "module-botorch.acquisition.cost_aware"]], "Datasets": [[13, "module-botorch.utils.datasets"]], "Decoupled Acquisition Function API": [[0, "module-botorch.acquisition.decoupled"]], "Deterministic Model API": [[7, "module-botorch.models.deterministic"]], "Dispatcher": [[13, "module-botorch.utils.dispatcher"]], "Dominated Partitionings": [[13, "module-botorch.utils.multi_objective.box_decompositions.dominated"]], "Elliptic Slice Sampler with Linear Constraints": [[13, "module-botorch.utils.probability.lin_ess"]], "Ensemble Model API": [[7, "module-botorch.models.ensemble"]], "Ensemble Posterior": [[9, "module-botorch.posteriors.ensemble"]], "Errors": [[2, "module-botorch.exceptions.errors"]], "Factory Functions for Acquisition Functions": [[0, "module-botorch.acquisition.factory"]], "Feasible Volume": [[13, "module-botorch.utils.feasible_volume"]], "Feature Map Generators": [[10, "module-botorch.sampling.pathwise.features.generators"]], "Feature Maps": [[10, "module-botorch.sampling.pathwise.features.maps"]], "Fixed Feature Acquisition Function": [[0, "module-botorch.acquisition.fixed_feature"]], "Fully Bayesian GP Models": [[7, "module-botorch.models.fully_bayesian"]], "Fully Bayesian Multitask GP Models": [[7, "module-botorch.models.fully_bayesian_multitask"]], "Fully Bayesian Posterior": [[9, "module-botorch.posteriors.fully_bayesian"]], "GP Regression Models": [[7, "module-botorch.models.gp_regression"]], "GP Regression Models for Mixed Parameter Spaces": [[7, "module-botorch.models.gp_regression_mixed"]], "GPyTorch Model API": [[7, "module-botorch.models.gpytorch"]], "GPyTorch Module Constructors": [[7, "module-botorch.models.utils.gpytorch_modules"]], "GPyTorch Posterior": [[9, "module-botorch.posteriors.gpytorch"]], "Gaussian Monte-Carlo Samplers": [[10, "module-botorch.sampling.normal"]], "General Optimization Utilities": [[8, "module-botorch.optim.utils.common"]], "General Utilities for Acquisition Functions": [[0, "module-botorch.acquisition.utils"]], "Get Sampler Helper": [[10, "module-botorch.sampling.get_sampler"]], "Higher Order GP Models": [[7, "module-botorch.models.higher_order_gp"]], "Higher Order GP Posterior": [[9, "module-botorch.posteriors.higher_order"]], "Homotopy Utilities": [[8, "module-botorch.optim.homotopy"]], "Hypervolume": [[13, "module-botorch.utils.multi_objective.hypervolume"]], "Index Sampler": [[10, "module-botorch.sampling.index_sampler"]], "Indices and Tables": [[5, "indices-and-tables"]], "Inducing Point Allocators": [[7, "module-botorch.models.utils.inducing_point_allocators"]], "Initialization Helpers": [[8, "module-botorch.optim.initializers"]], "Input Transforms": [[7, "module-botorch.models.transforms.input"]], "Joint Entropy Search Acquisition Functions": [[0, "module-botorch.acquisition.joint_entropy_search"]], "Kernels": [[7, "module-botorch.models.kernels.categorical"]], "Likelihoods": [[7, "module-botorch.models.likelihoods.pairwise"]], "Linear Algebra Helpers": [[13, "module-botorch.utils.probability.linalg"]], "List Sampler": [[10, "module-botorch.sampling.list_sampler"]], "Low-Rank Cholesky Update Utils": [[13, "module-botorch.utils.low_rank"]], "Max-value Entropy Search Acquisition Functions": [[0, "module-botorch.acquisition.max_value_entropy_search"]], "Model APIs": [[7, "model-apis"]], "Model Components": [[7, "model-components"]], "Model Conversion": [[7, "module-botorch.models.converter"]], "Model Fitting Closures": [[8, "module-botorch.optim.closures.model_closures"]], "Model Fitting Optimization": [[8, "module-botorch.optim.fit"]], "Model Fitting Utilities": [[8, "module-botorch.optim.utils.model_utils"]], "Model List GP Regression Models": [[7, "module-botorch.models.model_list_gp_regression"]], "Models": [[7, "models"]], "Monte-Carlo Acquisition Function API": [[0, "monte-carlo-acquisition-function-api"]], "Monte-Carlo Acquisition Functions": [[0, "module-botorch.acquisition.monte_carlo"]], "Monte-Carlo Sampler API": [[10, "module-botorch.sampling.base"]], "Multi-Fidelity GP Regression Models": [[7, "module-botorch.models.gp_regression_fidelity"]], "Multi-Fidelity Synthetic Test Functions": [[12, "module-botorch.test_functions.multi_fidelity"]], "Multi-Objective Analytic Acquisition Function API": [[0, "multi-objective-analytic-acquisition-function-api"]], "Multi-Objective Analytic Acquisition Functions": [[0, "module-botorch.acquisition.multi_objective.analytic"]], "Multi-Objective Hypervolume Knowledge Gradient Acquisition Functions": [[0, "module-botorch.acquisition.multi_objective.hypervolume_knowledge_gradient"]], "Multi-Objective Joint Entropy Search Acquisition Functions": [[0, "module-botorch.acquisition.multi_objective.joint_entropy_search"]], "Multi-Objective Max-value Entropy Search Acquisition Functions": [[0, "module-botorch.acquisition.multi_objective.max_value_entropy_search"]], "Multi-Objective Monte-Carlo Acquisition Function API": [[0, "multi-objective-monte-carlo-acquisition-function-api"]], "Multi-Objective Monte-Carlo Acquisition Functions": [[0, "module-botorch.acquisition.multi_objective.monte_carlo"]], "Multi-Objective Multi-Fidelity Acquisition Functions": [[0, "module-botorch.acquisition.multi_objective.multi_fidelity"]], "Multi-Objective Multi-Fidelity Synthetic Test Functions": [[12, "module-botorch.test_functions.multi_objective_multi_fidelity"]], "Multi-Objective Objectives": [[0, "module-botorch.acquisition.multi_objective.objective"]], "Multi-Objective Predictive Entropy Search Acquisition Functions": [[0, "module-botorch.acquisition.multi_objective.predictive_entropy_search"]], "Multi-Objective Synthetic Test Functions": [[12, "module-botorch.test_functions.multi_objective"]], "Multi-Objective Utilities": [[13, "multi-objective-utilities"]], "Multi-Objective Utilities for Acquisition Functions": [[0, "module-botorch.acquisition.multi_objective.utils"]], "Multi-Output Risk Measures": [[0, "module-botorch.acquisition.multi_objective.multi_output_risk_measures"]], "Multi-Step Lookahead Acquisition Functions": [[0, "module-botorch.acquisition.multi_step_lookahead"]], "Multi-Task Distribution Utils": [[13, "module-botorch.utils.multitask"]], "Multitask GP Models": [[7, "module-botorch.models.multitask"]], "Multitask GP Posterior": [[9, "module-botorch.posteriors.multitask"]], "Multivariate Gaussian Probabilities via Bivariate Conditioning": [[13, "module-botorch.utils.probability.mvnxpb"]], "Non-dominated Partitionings": [[13, "module-botorch.utils.multi_objective.box_decompositions.non_dominated"]], "Numpy - Torch Conversion Tools": [[8, "module-botorch.optim.utils.numpy_utils"]], "Objective": [[13, "module-botorch.utils.objective"]], "Objectives": [[0, "module-botorch.acquisition.objective"]], "Objectives and Cost-Aware Utilities": [[0, "objectives-and-cost-aware-utilities"]], "Optimization": [[8, "optimization"]], "Optimization with Timeouts": [[8, "module-botorch.optim.utils.timeout"]], "Other Utilties": [[7, "module-botorch.models.utils.assorted"]], "Outcome Transforms": [[7, "module-botorch.models.transforms.outcome"]], "Pairwise GP Models": [[7, "module-botorch.models.pairwise_gp"]], "Pairwise Monte-Carlo Samplers": [[10, "module-botorch.sampling.pairwise_samplers"]], "ParEGO: Multi-Objective Acquisition Function with Chebyshev Scalarization": [[0, "module-botorch.acquisition.multi_objective.parego"]], "Parameter Constraint Utilities": [[8, "module-botorch.optim.parameter_constraints"]], "Pareto": [[13, "module-botorch.utils.multi_objective.pareto"]], "Pathwise Posterior Samplers": [[10, "module-botorch.sampling.pathwise.posterior_samplers"]], "Pathwise Prior Samplers": [[10, "module-botorch.sampling.pathwise.prior_samplers"]], "Pathwise Sampling": [[10, "pathwise-sampling"]], "Pathwise Update Strategies": [[10, "module-botorch.sampling.pathwise.update_strategies"]], "Penalized Acquisition Function Wrapper": [[0, "module-botorch.acquisition.penalized"]], "Posterior APIs": [[9, "posterior-apis"]], "Posterior List API": [[9, "module-botorch.posteriors.posterior_list"]], "Posteriors": [[9, "posteriors"]], "Predictive Entropy Search Acquisition Functions": [[0, "module-botorch.acquisition.predictive_entropy_search"]], "Preference Acquisition Functions": [[0, "module-botorch.acquisition.preference"]], "Prior-Guided Acquisition Function Wrapper": [[0, "module-botorch.acquisition.prior_guided"]], "Probability Helpers": [[13, "module-botorch.utils.probability.utils"]], "Probability Utilities": [[13, "probability-utilities"]], "Proximal Acquisition Function Wrapper": [[0, "module-botorch.acquisition.proximal"]], "QMC Base Functionality": [[10, "module-botorch.sampling.qmc"]], "Risk Measures": [[0, "module-botorch.acquisition.risk_measures"]], "Rounding": [[13, "module-botorch.utils.rounding"]], "Safe Math": [[13, "module-botorch.utils.safe_math"]], "Sample Paths": [[10, "module-botorch.sampling.pathwise.paths"]], "Sampling": [[13, "module-botorch.utils.sampling"]], "Sampling Strategies": [[4, "module-botorch.generation.sampling"]], "Sampling from GP priors": [[13, "module-botorch.utils.gp_sampling"]], "Scalarization": [[13, "module-botorch.utils.multi_objective.scalarization"]], "Sensitivity Analysis Test Functions": [[12, "module-botorch.test_functions.sensitivity_analysis"]], "Stochastic Samplers": [[10, "module-botorch.sampling.stochastic_samplers"]], "Stopping Criteria": [[8, "module-botorch.optim.stopping"]], "Synthetic Test Functions": [[12, "module-botorch.test_functions.synthetic"]], "Test Helpers": [[13, "module-botorch.utils.test_helpers"]], "Testing": [[13, "module-botorch.utils.testing"]], "The One-Shot Knowledge Gradient": [[0, "module-botorch.acquisition.knowledge_gradient"]], "Torch": [[13, "module-botorch.utils.torch"]], "Torch Posterior": [[9, "module-botorch.posteriors.torch"]], "Transform Factory Methods": [[7, "module-botorch.models.transforms.factory"]], "Transform Utilities": [[7, "module-botorch.models.transforms.utils"]], "Transformations": [[13, "module-botorch.utils.transforms"]], "Transformed Posterior": [[9, "module-botorch.posteriors.transformed"]], "Transforms": [[7, "transforms"]], "Truncated Multivariate Normal Distribution": [[13, "module-botorch.utils.probability.truncated_multivariate_normal"]], "Types and Type Hints": [[13, "module-botorch.utils.types"]], "Unified Skew Normal Distribution": [[13, "module-botorch.utils.probability.unified_skew_normal"]], "Utilities": [[0, "utilities"], [4, "module-botorch.generation.utils"], [7, "utilities"], [8, "utilities"], [9, "utilities"], [10, "module-botorch.sampling.pathwise.utils"]], "Utilities For Test Functions": [[12, "module-botorch.test_functions.utils"]], "Variational GP Models": [[7, "module-botorch.models.approximate_gp"]], "Warnings": [[2, "module-botorch.exceptions.warnings"]], "botorch.acquisition": [[0, null]], "botorch.cross_validation": [[1, null]], "botorch.exceptions": [[2, null]], "botorch.fit": [[3, null]], "botorch.generation": [[4, null]], "botorch.logging": [[6, null]], "botorch.models": [[7, null]], "botorch.optim": [[8, null]], "botorch.posteriors": [[9, null]], "botorch.sampling": [[10, null]], "botorch.settings": [[11, null]], "botorch.test_functions": [[12, null]], "botorch.utils": [[13, null]]}, "docnames": ["acquisition", "cross_validation", "exceptions", "fit", "generation", "index", "logging", "models", "optim", "posteriors", "sampling", "settings", "test_functions", "utils"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1}, "filenames": ["acquisition.rst", "cross_validation.rst", "exceptions.rst", "fit.rst", "generation.rst", "index.rst", "logging.rst", "models.rst", "optim.rst", "posteriors.rst", "sampling.rst", "settings.rst", "test_functions.rst", "utils.rst"], "indexentries": {"_default_sample_shape (botorch.acquisition.multi_objective.max_value_entropy_search.qmultiobjectivemaxvalueentropy attribute)": [[0, "botorch.acquisition.multi_objective.max_value_entropy_search.qMultiObjectiveMaxValueEntropy._default_sample_shape", false]], "_has_transformed_inputs (botorch.models.model.model attribute)": [[7, "botorch.models.model.Model._has_transformed_inputs", false]], "_is_ensemble (botorch.models.model.model attribute)": [[7, "botorch.models.model.Model._is_ensemble", false]], "_is_fully_bayesian (botorch.models.model.model attribute)": [[7, "botorch.models.model.Model._is_fully_bayesian", false]], "_original_train_inputs (botorch.models.model.model attribute)": [[7, "botorch.models.model.Model._original_train_inputs", false]], "_pivoted_cholesky_init() (in module botorch.models.utils.inducing_point_allocators)": [[7, "botorch.models.utils.inducing_point_allocators._pivoted_cholesky_init", false]], "ackley (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Ackley", false]], "acq_function (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.acq_function", false]], "acqf_input_constructor() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.acqf_input_constructor", false]], "add() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.add", false]], "add_output_dim() (in module botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.add_output_dim", false]], "affinedeterministicmodel (class in botorch.models.deterministic)": [[7, "botorch.models.deterministic.AffineDeterministicModel", false]], "affinefidelitycostmodel (class in botorch.models.cost)": [[7, "botorch.models.cost.AffineFidelityCostModel", false]], "allocate_inducing_points() (botorch.models.utils.inducing_point_allocators.inducingpointallocator method)": [[7, "botorch.models.utils.inducing_point_allocators.InducingPointAllocator.allocate_inducing_points", false]], "allow_only_specific_variable_kwargs() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.allow_only_specific_variable_kwargs", false]], "alpha (botorch.test_functions.multi_objective.dh1 attribute)": [[12, "botorch.test_functions.multi_objective.DH1.alpha", false]], "alpha_1 (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.alpha_1", false]], "alpha_2 (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.alpha_2", false]], "alpha_3 (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.alpha_3", false]], "analyticacquisitionfunction (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.AnalyticAcquisitionFunction", false]], "analyticexpectedutilityofbestoption (class in botorch.acquisition.preference)": [[0, "botorch.acquisition.preference.AnalyticExpectedUtilityOfBestOption", false]], "append() (botorch.utils.multi_objective.hypervolume.multilist method)": [[13, "botorch.utils.multi_objective.hypervolume.MultiList.append", false]], "appendfeatures (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.AppendFeatures", false]], "apply_constraints() (in module botorch.utils.objective)": [[13, "botorch.utils.objective.apply_constraints", false]], "apply_constraints_nonnegative_soft() (in module botorch.utils.objective)": [[13, "botorch.utils.objective.apply_constraints_nonnegative_soft", false]], "approximate_round() (in module botorch.utils.rounding)": [[13, "botorch.utils.rounding.approximate_round", false]], "approximategpytorchmodel (class in botorch.models.approximate_gp)": [[7, "botorch.models.approximate_gp.ApproximateGPyTorchModel", false]], "arg_constraints (botorch.utils.probability.unified_skew_normal.unifiedskewnormal attribute)": [[13, "botorch.utils.probability.unified_skew_normal.UnifiedSkewNormal.arg_constraints", false]], "as_ndarray() (in module botorch.optim.utils.numpy_utils)": [[8, "botorch.optim.utils.numpy_utils.as_ndarray", false]], "asdict() (botorch.utils.probability.mvnxpb.mvnxpb method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.asdict", false]], "assertallclose() (botorch.utils.testing.botorchtestcase method)": [[13, "botorch.utils.testing.BotorchTestCase.assertAllClose", false]], "augment() (botorch.utils.probability.mvnxpb.mvnxpb method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.augment", false]], "augment_cholesky() (in module botorch.utils.probability.linalg)": [[13, "botorch.utils.probability.linalg.augment_cholesky", false]], "augmentedbranin (class in botorch.test_functions.multi_fidelity)": [[12, "botorch.test_functions.multi_fidelity.AugmentedBranin", false]], "augmentedhartmann (class in botorch.test_functions.multi_fidelity)": [[12, "botorch.test_functions.multi_fidelity.AugmentedHartmann", false]], "augmentedrosenbrock (class in botorch.test_functions.multi_fidelity)": [[12, "botorch.test_functions.multi_fidelity.AugmentedRosenbrock", false]], "backward() (botorch.utils.rounding.identitystefunction static method)": [[13, "botorch.utils.rounding.IdentitySTEFunction.backward", false]], "badinitialcandidateswarning": [[2, "botorch.exceptions.warnings.BadInitialCandidatesWarning", false]], "base_sample_shape (botorch.posteriors.gpytorch.gpytorchposterior property)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.base_sample_shape", false]], "base_sample_shape (botorch.posteriors.higher_order.higherordergpposterior property)": [[9, "botorch.posteriors.higher_order.HigherOrderGPPosterior.base_sample_shape", false]], "base_sample_shape (botorch.posteriors.multitask.multitaskgpposterior property)": [[9, "botorch.posteriors.multitask.MultitaskGPPosterior.base_sample_shape", false]], "base_sample_shape (botorch.posteriors.transformed.transformedposterior property)": [[9, "botorch.posteriors.transformed.TransformedPosterior.base_sample_shape", false]], "base_sample_shape (botorch.utils.testing.mockposterior property)": [[13, "botorch.utils.testing.MockPosterior.base_sample_shape", false]], "baseline_y (botorch.acquisition.multi_objective.multi_output_risk_measures.mars property)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MARS.baseline_Y", false]], "basetestproblem (class in botorch.test_functions.base)": [[12, "botorch.test_functions.base.BaseTestProblem", false]], "basetestproblemtestcasemixin (class in botorch.utils.testing)": [[13, "botorch.utils.testing.BaseTestProblemTestCaseMixIn", false]], "batch_cross_validation() (in module botorch.cross_validation)": [[1, "botorch.cross_validation.batch_cross_validation", false]], "batch_initial_conditions (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.batch_initial_conditions", false]], "batch_range (botorch.posteriors.fully_bayesian.gaussianmixtureposterior property)": [[9, "botorch.posteriors.fully_bayesian.GaussianMixturePosterior.batch_range", false]], "batch_range (botorch.posteriors.gpytorch.gpytorchposterior property)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.batch_range", false]], "batch_range (botorch.posteriors.higher_order.higherordergpposterior property)": [[9, "botorch.posteriors.higher_order.HigherOrderGPPosterior.batch_range", false]], "batch_range (botorch.posteriors.multitask.multitaskgpposterior property)": [[9, "botorch.posteriors.multitask.MultitaskGPPosterior.batch_range", false]], "batch_range (botorch.posteriors.transformed.transformedposterior property)": [[9, "botorch.posteriors.transformed.TransformedPosterior.batch_range", false]], "batch_range (botorch.utils.testing.mockposterior property)": [[13, "botorch.utils.testing.MockPosterior.batch_range", false]], "batch_shape (botorch.models.approximate_gp.singletaskvariationalgp property)": [[7, "botorch.models.approximate_gp.SingleTaskVariationalGP.batch_shape", false]], "batch_shape (botorch.models.fully_bayesian.saasfullybayesiansingletaskgp property)": [[7, "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP.batch_shape", false]], "batch_shape (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp property)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.batch_shape", false]], "batch_shape (botorch.models.model.model property)": [[7, "botorch.models.model.Model.batch_shape", false]], "batch_shape (botorch.models.model.modellist property)": [[7, "botorch.models.model.ModelList.batch_shape", false]], "batch_shape (botorch.models.pairwise_gp.pairwisegp property)": [[7, "botorch.models.pairwise_gp.PairwiseGP.batch_shape", false]], "batch_shape (botorch.models.transforms.input.inputperturbation property)": [[7, "botorch.models.transforms.input.InputPerturbation.batch_shape", false]], "batch_shape (botorch.sampling.pathwise.features.maps.featuremap attribute)": [[10, "botorch.sampling.pathwise.features.maps.FeatureMap.batch_shape", false]], "batch_shape (botorch.sampling.pathwise.features.maps.kernelevaluationmap property)": [[10, "botorch.sampling.pathwise.features.maps.KernelEvaluationMap.batch_shape", false]], "batch_shape (botorch.sampling.pathwise.features.maps.kernelfeaturemap property)": [[10, "botorch.sampling.pathwise.features.maps.KernelFeatureMap.batch_shape", false]], "batch_shape (botorch.utils.testing.mockmodel property)": [[13, "botorch.utils.testing.MockModel.batch_shape", false]], "batch_shape (botorch.utils.testing.mockposterior property)": [[13, "botorch.utils.testing.MockPosterior.batch_shape", false]], "batched_bisect() (in module botorch.posteriors.fully_bayesian)": [[9, "botorch.posteriors.fully_bayesian.batched_bisect", false]], "batched_multi_output_to_single_output() (in module botorch.models.converter)": [[7, "botorch.models.converter.batched_multi_output_to_single_output", false]], "batched_multinomial() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.batched_multinomial", false]], "batched_to_model_list() (in module botorch.models.converter)": [[7, "botorch.models.converter.batched_to_model_list", false]], "beale (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Beale", false]], "beta (botorch.test_functions.multi_objective.dh1 attribute)": [[12, "botorch.test_functions.multi_objective.DH1.beta", false]], "beta (botorch.test_functions.multi_objective.dh2 attribute)": [[12, "botorch.test_functions.multi_objective.DH2.beta", false]], "bilog (class in botorch.models.transforms.outcome)": [[7, "botorch.models.transforms.outcome.Bilog", false]], "block_matrix_concat() (in module botorch.utils.probability.linalg)": [[13, "botorch.utils.probability.linalg.block_matrix_concat", false]], "bnh (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.BNH", false]], "boltzmannsampling (class in botorch.generation.sampling)": [[4, "botorch.generation.sampling.BoltzmannSampling", false]], "botorch.acquisition": [[0, "module-botorch.acquisition", false]], "botorch.acquisition.acquisition": [[0, "module-botorch.acquisition.acquisition", false]], "botorch.acquisition.active_learning": [[0, "module-botorch.acquisition.active_learning", false]], "botorch.acquisition.analytic": [[0, "module-botorch.acquisition.analytic", false]], "botorch.acquisition.cached_cholesky": [[0, "module-botorch.acquisition.cached_cholesky", false]], "botorch.acquisition.cost_aware": [[0, "module-botorch.acquisition.cost_aware", false]], "botorch.acquisition.decoupled": [[0, "module-botorch.acquisition.decoupled", false]], "botorch.acquisition.factory": [[0, "module-botorch.acquisition.factory", false]], "botorch.acquisition.fixed_feature": [[0, "module-botorch.acquisition.fixed_feature", false]], "botorch.acquisition.input_constructors": [[0, "module-botorch.acquisition.input_constructors", false]], "botorch.acquisition.joint_entropy_search": [[0, "module-botorch.acquisition.joint_entropy_search", false]], "botorch.acquisition.knowledge_gradient": [[0, "module-botorch.acquisition.knowledge_gradient", false]], "botorch.acquisition.logei": [[0, "module-botorch.acquisition.logei", false]], "botorch.acquisition.max_value_entropy_search": [[0, "module-botorch.acquisition.max_value_entropy_search", false]], "botorch.acquisition.monte_carlo": [[0, "module-botorch.acquisition.monte_carlo", false]], "botorch.acquisition.multi_objective.analytic": [[0, "module-botorch.acquisition.multi_objective.analytic", false]], "botorch.acquisition.multi_objective.hypervolume_knowledge_gradient": [[0, "module-botorch.acquisition.multi_objective.hypervolume_knowledge_gradient", false]], "botorch.acquisition.multi_objective.joint_entropy_search": [[0, "module-botorch.acquisition.multi_objective.joint_entropy_search", false]], "botorch.acquisition.multi_objective.logei": [[0, "module-botorch.acquisition.multi_objective.logei", false]], "botorch.acquisition.multi_objective.max_value_entropy_search": [[0, "module-botorch.acquisition.multi_objective.max_value_entropy_search", false]], "botorch.acquisition.multi_objective.monte_carlo": [[0, "module-botorch.acquisition.multi_objective.monte_carlo", false]], "botorch.acquisition.multi_objective.multi_fidelity": [[0, "module-botorch.acquisition.multi_objective.multi_fidelity", false]], "botorch.acquisition.multi_objective.multi_output_risk_measures": [[0, "module-botorch.acquisition.multi_objective.multi_output_risk_measures", false]], "botorch.acquisition.multi_objective.objective": [[0, "module-botorch.acquisition.multi_objective.objective", false]], "botorch.acquisition.multi_objective.parego": [[0, "module-botorch.acquisition.multi_objective.parego", false]], "botorch.acquisition.multi_objective.predictive_entropy_search": [[0, "module-botorch.acquisition.multi_objective.predictive_entropy_search", false]], "botorch.acquisition.multi_objective.utils": [[0, "module-botorch.acquisition.multi_objective.utils", false]], "botorch.acquisition.multi_step_lookahead": [[0, "module-botorch.acquisition.multi_step_lookahead", false]], "botorch.acquisition.objective": [[0, "module-botorch.acquisition.objective", false]], "botorch.acquisition.penalized": [[0, "module-botorch.acquisition.penalized", false]], "botorch.acquisition.predictive_entropy_search": [[0, "module-botorch.acquisition.predictive_entropy_search", false]], "botorch.acquisition.preference": [[0, "module-botorch.acquisition.preference", false]], "botorch.acquisition.prior_guided": [[0, "module-botorch.acquisition.prior_guided", false]], "botorch.acquisition.proximal": [[0, "module-botorch.acquisition.proximal", false]], "botorch.acquisition.risk_measures": [[0, "module-botorch.acquisition.risk_measures", false]], "botorch.acquisition.utils": [[0, "module-botorch.acquisition.utils", false]], "botorch.cross_validation": [[1, "module-botorch.cross_validation", false]], "botorch.exceptions": [[2, "module-botorch.exceptions", false]], "botorch.exceptions.errors": [[2, "module-botorch.exceptions.errors", false]], "botorch.exceptions.warnings": [[2, "module-botorch.exceptions.warnings", false]], "botorch.fit": [[3, "module-botorch.fit", false]], "botorch.generation": [[4, "module-botorch.generation", false]], "botorch.generation.gen": [[4, "module-botorch.generation.gen", false]], "botorch.generation.sampling": [[4, "module-botorch.generation.sampling", false]], "botorch.generation.utils": [[4, "module-botorch.generation.utils", false]], "botorch.logging": [[6, "module-botorch.logging", false]], "botorch.models": [[7, "module-botorch.models", false]], "botorch.models.approximate_gp": [[7, "module-botorch.models.approximate_gp", false]], "botorch.models.contextual": [[7, "module-botorch.models.contextual", false]], "botorch.models.contextual_multioutput": [[7, "module-botorch.models.contextual_multioutput", false]], "botorch.models.converter": [[7, "module-botorch.models.converter", false]], "botorch.models.cost": [[7, "module-botorch.models.cost", false]], "botorch.models.deterministic": [[7, "module-botorch.models.deterministic", false]], "botorch.models.ensemble": [[7, "module-botorch.models.ensemble", false]], "botorch.models.fully_bayesian": [[7, "module-botorch.models.fully_bayesian", false]], "botorch.models.fully_bayesian_multitask": [[7, "module-botorch.models.fully_bayesian_multitask", false]], "botorch.models.gp_regression": [[7, "module-botorch.models.gp_regression", false]], "botorch.models.gp_regression_fidelity": [[7, "module-botorch.models.gp_regression_fidelity", false]], "botorch.models.gp_regression_mixed": [[7, "module-botorch.models.gp_regression_mixed", false]], "botorch.models.gpytorch": [[7, "module-botorch.models.gpytorch", false]], "botorch.models.higher_order_gp": [[7, "module-botorch.models.higher_order_gp", false]], "botorch.models.kernels.categorical": [[7, "module-botorch.models.kernels.categorical", false]], "botorch.models.kernels.contextual_lcea": [[7, "module-botorch.models.kernels.contextual_lcea", false]], "botorch.models.kernels.contextual_sac": [[7, "module-botorch.models.kernels.contextual_sac", false]], "botorch.models.kernels.downsampling": [[7, "module-botorch.models.kernels.downsampling", false]], "botorch.models.kernels.exponential_decay": [[7, "module-botorch.models.kernels.exponential_decay", false]], "botorch.models.kernels.infinite_width_bnn": [[7, "module-botorch.models.kernels.infinite_width_bnn", false]], "botorch.models.kernels.linear_truncated_fidelity": [[7, "module-botorch.models.kernels.linear_truncated_fidelity", false]], "botorch.models.kernels.orthogonal_additive_kernel": [[7, "module-botorch.models.kernels.orthogonal_additive_kernel", false]], "botorch.models.likelihoods.pairwise": [[7, "module-botorch.models.likelihoods.pairwise", false]], "botorch.models.model": [[7, "module-botorch.models.model", false]], "botorch.models.model_list_gp_regression": [[7, "module-botorch.models.model_list_gp_regression", false]], "botorch.models.multitask": [[7, "module-botorch.models.multitask", false]], "botorch.models.pairwise_gp": [[7, "module-botorch.models.pairwise_gp", false]], "botorch.models.transforms.factory": [[7, "module-botorch.models.transforms.factory", false]], "botorch.models.transforms.input": [[7, "module-botorch.models.transforms.input", false]], "botorch.models.transforms.outcome": [[7, "module-botorch.models.transforms.outcome", false]], "botorch.models.transforms.utils": [[7, "module-botorch.models.transforms.utils", false]], "botorch.models.utils.assorted": [[7, "module-botorch.models.utils.assorted", false]], "botorch.models.utils.gpytorch_modules": [[7, "module-botorch.models.utils.gpytorch_modules", false]], "botorch.models.utils.inducing_point_allocators": [[7, "module-botorch.models.utils.inducing_point_allocators", false]], "botorch.optim": [[8, "module-botorch.optim", false]], "botorch.optim.closures.core": [[8, "module-botorch.optim.closures.core", false]], "botorch.optim.closures.model_closures": [[8, "module-botorch.optim.closures.model_closures", false]], "botorch.optim.core": [[8, "module-botorch.optim.core", false]], "botorch.optim.fit": [[8, "module-botorch.optim.fit", false]], "botorch.optim.homotopy": [[8, "module-botorch.optim.homotopy", false]], "botorch.optim.initializers": [[8, "module-botorch.optim.initializers", false]], "botorch.optim.optimize": [[8, "module-botorch.optim.optimize", false]], "botorch.optim.optimize_homotopy": [[8, "module-botorch.optim.optimize_homotopy", false]], "botorch.optim.parameter_constraints": [[8, "module-botorch.optim.parameter_constraints", false]], "botorch.optim.stopping": [[8, "module-botorch.optim.stopping", false]], "botorch.optim.utils.acquisition_utils": [[8, "module-botorch.optim.utils.acquisition_utils", false]], "botorch.optim.utils.common": [[8, "module-botorch.optim.utils.common", false]], "botorch.optim.utils.model_utils": [[8, "module-botorch.optim.utils.model_utils", false]], "botorch.optim.utils.numpy_utils": [[8, "module-botorch.optim.utils.numpy_utils", false]], "botorch.optim.utils.timeout": [[8, "module-botorch.optim.utils.timeout", false]], "botorch.posteriors": [[9, "module-botorch.posteriors", false]], "botorch.posteriors.base_samples": [[9, "module-botorch.posteriors.base_samples", false]], "botorch.posteriors.ensemble": [[9, "module-botorch.posteriors.ensemble", false]], "botorch.posteriors.fully_bayesian": [[9, "module-botorch.posteriors.fully_bayesian", false]], "botorch.posteriors.gpytorch": [[9, "module-botorch.posteriors.gpytorch", false]], "botorch.posteriors.higher_order": [[9, "module-botorch.posteriors.higher_order", false]], "botorch.posteriors.multitask": [[9, "module-botorch.posteriors.multitask", false]], "botorch.posteriors.posterior": [[9, "module-botorch.posteriors.posterior", false]], "botorch.posteriors.posterior_list": [[9, "module-botorch.posteriors.posterior_list", false]], "botorch.posteriors.torch": [[9, "module-botorch.posteriors.torch", false]], "botorch.posteriors.transformed": [[9, "module-botorch.posteriors.transformed", false]], "botorch.sampling": [[10, "module-botorch.sampling", false]], "botorch.sampling.base": [[10, "module-botorch.sampling.base", false]], "botorch.sampling.get_sampler": [[10, "module-botorch.sampling.get_sampler", false]], "botorch.sampling.index_sampler": [[10, "module-botorch.sampling.index_sampler", false]], "botorch.sampling.list_sampler": [[10, "module-botorch.sampling.list_sampler", false]], "botorch.sampling.normal": [[10, "module-botorch.sampling.normal", false]], "botorch.sampling.pairwise_samplers": [[10, "module-botorch.sampling.pairwise_samplers", false]], "botorch.sampling.pathwise.features.generators": [[10, "module-botorch.sampling.pathwise.features.generators", false]], "botorch.sampling.pathwise.features.maps": [[10, "module-botorch.sampling.pathwise.features.maps", false]], "botorch.sampling.pathwise.paths": [[10, "module-botorch.sampling.pathwise.paths", false]], "botorch.sampling.pathwise.posterior_samplers": [[10, "module-botorch.sampling.pathwise.posterior_samplers", false]], "botorch.sampling.pathwise.prior_samplers": [[10, "module-botorch.sampling.pathwise.prior_samplers", false]], "botorch.sampling.pathwise.update_strategies": [[10, "module-botorch.sampling.pathwise.update_strategies", false]], "botorch.sampling.pathwise.utils": [[10, "module-botorch.sampling.pathwise.utils", false]], "botorch.sampling.qmc": [[10, "module-botorch.sampling.qmc", false]], "botorch.sampling.stochastic_samplers": [[10, "module-botorch.sampling.stochastic_samplers", false]], "botorch.settings": [[11, "module-botorch.settings", false]], "botorch.test_functions": [[12, "module-botorch.test_functions", false]], "botorch.test_functions.base": [[12, "module-botorch.test_functions.base", false]], "botorch.test_functions.multi_fidelity": [[12, "module-botorch.test_functions.multi_fidelity", false]], "botorch.test_functions.multi_objective": [[12, "module-botorch.test_functions.multi_objective", false]], "botorch.test_functions.multi_objective_multi_fidelity": [[12, "module-botorch.test_functions.multi_objective_multi_fidelity", false]], "botorch.test_functions.sensitivity_analysis": [[12, "module-botorch.test_functions.sensitivity_analysis", false]], "botorch.test_functions.synthetic": [[12, "module-botorch.test_functions.synthetic", false]], "botorch.test_functions.utils": [[12, "module-botorch.test_functions.utils", false]], "botorch.utils": [[13, "module-botorch.utils", false]], "botorch.utils.constants": [[13, "module-botorch.utils.constants", false]], "botorch.utils.constraints": [[13, "module-botorch.utils.constraints", false]], "botorch.utils.containers": [[13, "module-botorch.utils.containers", false]], "botorch.utils.context_managers": [[13, "module-botorch.utils.context_managers", false]], "botorch.utils.datasets": [[13, "module-botorch.utils.datasets", false]], "botorch.utils.dispatcher": [[13, "module-botorch.utils.dispatcher", false]], "botorch.utils.feasible_volume": [[13, "module-botorch.utils.feasible_volume", false]], "botorch.utils.gp_sampling": [[13, "module-botorch.utils.gp_sampling", false]], "botorch.utils.low_rank": [[13, "module-botorch.utils.low_rank", false]], "botorch.utils.multi_objective.box_decompositions.box_decomposition": [[13, "module-botorch.utils.multi_objective.box_decompositions.box_decomposition", false]], "botorch.utils.multi_objective.box_decompositions.box_decomposition_list": [[13, "module-botorch.utils.multi_objective.box_decompositions.box_decomposition_list", false]], "botorch.utils.multi_objective.box_decompositions.dominated": [[13, "module-botorch.utils.multi_objective.box_decompositions.dominated", false]], "botorch.utils.multi_objective.box_decompositions.non_dominated": [[13, "module-botorch.utils.multi_objective.box_decompositions.non_dominated", false]], "botorch.utils.multi_objective.box_decompositions.utils": [[13, "module-botorch.utils.multi_objective.box_decompositions.utils", false]], "botorch.utils.multi_objective.hypervolume": [[13, "module-botorch.utils.multi_objective.hypervolume", false]], "botorch.utils.multi_objective.pareto": [[13, "module-botorch.utils.multi_objective.pareto", false]], "botorch.utils.multi_objective.scalarization": [[13, "module-botorch.utils.multi_objective.scalarization", false]], "botorch.utils.multitask": [[13, "module-botorch.utils.multitask", false]], "botorch.utils.objective": [[13, "module-botorch.utils.objective", false]], "botorch.utils.probability.bvn": [[13, "module-botorch.utils.probability.bvn", false]], "botorch.utils.probability.lin_ess": [[13, "module-botorch.utils.probability.lin_ess", false]], "botorch.utils.probability.linalg": [[13, "module-botorch.utils.probability.linalg", false]], "botorch.utils.probability.mvnxpb": [[13, "module-botorch.utils.probability.mvnxpb", false]], "botorch.utils.probability.truncated_multivariate_normal": [[13, "module-botorch.utils.probability.truncated_multivariate_normal", false]], "botorch.utils.probability.unified_skew_normal": [[13, "module-botorch.utils.probability.unified_skew_normal", false]], "botorch.utils.probability.utils": [[13, "module-botorch.utils.probability.utils", false]], "botorch.utils.rounding": [[13, "module-botorch.utils.rounding", false]], "botorch.utils.safe_math": [[13, "module-botorch.utils.safe_math", false]], "botorch.utils.sampling": [[13, "module-botorch.utils.sampling", false]], "botorch.utils.test_helpers": [[13, "module-botorch.utils.test_helpers", false]], "botorch.utils.testing": [[13, "module-botorch.utils.testing", false]], "botorch.utils.torch": [[13, "module-botorch.utils.torch", false]], "botorch.utils.transforms": [[13, "module-botorch.utils.transforms", false]], "botorch.utils.types": [[13, "module-botorch.utils.types", false]], "botorcherror": [[2, "botorch.exceptions.errors.BotorchError", false]], "botorchtensordimensionerror": [[2, "botorch.exceptions.errors.BotorchTensorDimensionError", false]], "botorchtensordimensionwarning": [[2, "botorch.exceptions.warnings.BotorchTensorDimensionWarning", false]], "botorchtestcase (class in botorch.utils.testing)": [[13, "botorch.utils.testing.BotorchTestCase", false]], "botorchwarning": [[2, "botorch.exceptions.warnings.BotorchWarning", false]], "bounds (botorch.models.transforms.input.normalize property)": [[7, "botorch.models.transforms.input.Normalize.bounds", false]], "bounds (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.bounds", false]], "bounds (botorch.utils.probability.mvnxpb.mvnxpbstate attribute)": [[13, "botorch.utils.probability.mvnxpb.mvnxpbState.bounds", false]], "boxdecompositionlist (class in botorch.utils.multi_objective.box_decompositions.box_decomposition_list)": [[13, "botorch.utils.multi_objective.box_decompositions.box_decomposition_list.BoxDecompositionList", false]], "branin (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Branin", false]], "branincurrin (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.BraninCurrin", false]], "bufferdict (class in botorch.utils.torch)": [[13, "botorch.utils.torch.BufferDict", false]], "build() (botorch.utils.probability.mvnxpb.mvnxpb class method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.build", false]], "build_positional_indices() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.build_positional_indices", false]], "bukin (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Bukin", false]], "bvn() (in module botorch.utils.probability.bvn)": [[13, "botorch.utils.probability.bvn.bvn", false]], "bvnmom() (in module botorch.utils.probability.bvn)": [[13, "botorch.utils.probability.bvn.bvnmom", false]], "bvnu() (in module botorch.utils.probability.bvn)": [[13, "botorch.utils.probability.bvn.bvnu", false]], "c2dtlz2 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.C2DTLZ2", false]], "candidategenerationerror": [[2, "botorch.exceptions.errors.CandidateGenerationError", false]], "carsideimpact (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.CarSideImpact", false]], "case_dispatcher() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.case_dispatcher", false]], "categoricalkernel (class in botorch.models.kernels.categorical)": [[7, "botorch.models.kernels.categorical.CategoricalKernel", false]], "cauchy() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.cauchy", false]], "chainedinputtransform (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.ChainedInputTransform", false]], "chainedoutcometransform (class in botorch.models.transforms.outcome)": [[7, "botorch.models.transforms.outcome.ChainedOutcomeTransform", false]], "chainedtransform (class in botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.ChainedTransform", false]], "chebyshev_objective (botorch.acquisition.multi_objective.multi_output_risk_measures.mars property)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MARS.chebyshev_objective", false]], "chebyshev_weights (botorch.acquisition.multi_objective.multi_output_risk_measures.mars property)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MARS.chebyshev_weights", false]], "check_dtype_float32_or_float64() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.check_dtype_float32_or_float64", false]], "check_min_max_scaling() (in module botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.check_min_max_scaling", false]], "check_no_nans() (in module botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.check_no_nans", false]], "check_standardization() (in module botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.check_standardization", false]], "check_tau() (in module botorch.acquisition.logei)": [[0, "botorch.acquisition.logei.check_tau", false]], "clear() (botorch.utils.torch.bufferdict method)": [[13, "botorch.utils.torch.BufferDict.clear", false]], "clone() (botorch.utils.probability.linalg.pivotedcholesky method)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.clone", false]], "clone() (botorch.utils.probability.mvnxpb.mvnxpb method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.clone", false]], "columnwise_clamp() (in module botorch.optim.utils.acquisition_utils)": [[8, "botorch.optim.utils.acquisition_utils.columnwise_clamp", false]], "comparisons (botorch.models.pairwise_gp.pairwisegp property)": [[7, "botorch.models.pairwise_gp.PairwiseGP.comparisons", false]], "compute() (botorch.utils.multi_objective.hypervolume.hypervolume method)": [[13, "botorch.utils.multi_objective.hypervolume.Hypervolume.compute", false]], "compute_best_f() (botorch.acquisition.logei.qlognoisyexpectedimprovement method)": [[0, "botorch.acquisition.logei.qLogNoisyExpectedImprovement.compute_best_f", false]], "compute_best_f() (botorch.acquisition.monte_carlo.qnoisyexpectedimprovement method)": [[0, "botorch.acquisition.monte_carlo.qNoisyExpectedImprovement.compute_best_f", false]], "compute_best_feasible_objective() (in module botorch.acquisition.utils)": [[0, "botorch.acquisition.utils.compute_best_feasible_objective", false]], "compute_dgsm() (botorch.test_functions.sensitivity_analysis.ishigami method)": [[12, "botorch.test_functions.sensitivity_analysis.Ishigami.compute_dgsm", false]], "compute_dists() (in module botorch.models.fully_bayesian)": [[7, "botorch.models.fully_bayesian.compute_dists", false]], "compute_dominated_hypercell_bounds_2d() (in module botorch.utils.multi_objective.box_decompositions.utils)": [[13, "botorch.utils.multi_objective.box_decompositions.utils.compute_dominated_hypercell_bounds_2d", false]], "compute_feasibility_indicator() (in module botorch.utils.objective)": [[13, "botorch.utils.objective.compute_feasibility_indicator", false]], "compute_hypervolume() (botorch.utils.multi_objective.box_decompositions.box_decomposition_list.boxdecompositionlist method)": [[13, "botorch.utils.multi_objective.box_decompositions.box_decomposition_list.BoxDecompositionList.compute_hypervolume", false]], "compute_local_upper_bounds() (in module botorch.utils.multi_objective.box_decompositions.utils)": [[13, "botorch.utils.multi_objective.box_decompositions.utils.compute_local_upper_bounds", false]], "compute_non_dominated_hypercell_bounds_2d() (in module botorch.utils.multi_objective.box_decompositions.utils)": [[13, "botorch.utils.multi_objective.box_decompositions.utils.compute_non_dominated_hypercell_bounds_2d", false]], "compute_q_subset_indices() (botorch.utils.multi_objective.hypervolume.subsetindexcachingmixin method)": [[13, "botorch.utils.multi_objective.hypervolume.SubsetIndexCachingMixin.compute_q_subset_indices", false]], "compute_sample_box_decomposition() (in module botorch.acquisition.multi_objective.utils)": [[0, "botorch.acquisition.multi_objective.utils.compute_sample_box_decomposition", false]], "compute_smoothed_feasibility_indicator() (in module botorch.utils.objective)": [[13, "botorch.utils.objective.compute_smoothed_feasibility_indicator", false]], "compute_subset_indices() (in module botorch.utils.multi_objective.hypervolume)": [[13, "botorch.utils.multi_objective.hypervolume.compute_subset_indices", false]], "concat() (botorch.utils.probability.linalg.pivotedcholesky method)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.concat", false]], "concat() (botorch.utils.probability.mvnxpb.mvnxpb method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.concat", false]], "concatenate_pending_points() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.concatenate_pending_points", false]], "condition_on_observations() (botorch.models.fully_bayesian.saasfullybayesiansingletaskgp method)": [[7, "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP.condition_on_observations", false]], "condition_on_observations() (botorch.models.gp_regression.heteroskedasticsingletaskgp method)": [[7, "botorch.models.gp_regression.HeteroskedasticSingleTaskGP.condition_on_observations", false]], "condition_on_observations() (botorch.models.higher_order_gp.higherordergp method)": [[7, "botorch.models.higher_order_gp.HigherOrderGP.condition_on_observations", false]], "condition_on_observations() (botorch.models.model.fantasizemixin method)": [[7, "botorch.models.model.FantasizeMixin.condition_on_observations", false]], "condition_on_observations() (botorch.models.model.model method)": [[7, "botorch.models.model.Model.condition_on_observations", false]], "condition_on_observations() (botorch.models.model_list_gp_regression.modellistgp method)": [[7, "botorch.models.model_list_gp_regression.ModelListGP.condition_on_observations", false]], "condition_on_observations() (botorch.models.pairwise_gp.pairwisegp method)": [[7, "botorch.models.pairwise_gp.PairwiseGP.condition_on_observations", false]], "consolidate_duplicates() (in module botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.consolidate_duplicates", false]], "constr (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.CONSTR", false]], "constrainedbasetestproblem (class in botorch.test_functions.base)": [[12, "botorch.test_functions.base.ConstrainedBaseTestProblem", false]], "constrainedbranincurrin (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.ConstrainedBraninCurrin", false]], "constrainedexpectedimprovement (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.ConstrainedExpectedImprovement", false]], "constrainedgramacy (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.ConstrainedGramacy", false]], "constrainedhartmann (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.ConstrainedHartmann", false]], "constrainedhartmannsmooth (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.ConstrainedHartmannSmooth", false]], "constrainedmaxposteriorsampling (class in botorch.generation.sampling)": [[4, "botorch.generation.sampling.ConstrainedMaxPosteriorSampling", false]], "constrainedmcobjective (class in botorch.acquisition.objective)": [[0, "botorch.acquisition.objective.ConstrainedMCObjective", false]], "constrainedsynthetictestfunction (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.ConstrainedSyntheticTestFunction", false]], "constrainedtestproblemtestcasemixin (class in botorch.utils.testing)": [[13, "botorch.utils.testing.ConstrainedTestProblemTestCaseMixin", false]], "constraint_noise_std (botorch.test_functions.base.constrainedbasetestproblem attribute)": [[12, "botorch.test_functions.base.ConstrainedBaseTestProblem.constraint_noise_std", false]], "construct_evaluation_mask() (botorch.acquisition.decoupled.decoupledacquisitionfunction method)": [[0, "botorch.acquisition.decoupled.DecoupledAcquisitionFunction.construct_evaluation_mask", false]], "construct_inputs() (botorch.models.contextual.lceagp class method)": [[7, "botorch.models.contextual.LCEAGP.construct_inputs", false]], "construct_inputs() (botorch.models.contextual.sacgp class method)": [[7, "botorch.models.contextual.SACGP.construct_inputs", false]], "construct_inputs() (botorch.models.contextual_multioutput.lcemgp class method)": [[7, "botorch.models.contextual_multioutput.LCEMGP.construct_inputs", false]], "construct_inputs() (botorch.models.gp_regression.singletaskgp class method)": [[7, "botorch.models.gp_regression.SingleTaskGP.construct_inputs", false]], "construct_inputs() (botorch.models.gp_regression_fidelity.singletaskmultifidelitygp class method)": [[7, "botorch.models.gp_regression_fidelity.SingleTaskMultiFidelityGP.construct_inputs", false]], "construct_inputs() (botorch.models.gp_regression_mixed.mixedsingletaskgp class method)": [[7, "botorch.models.gp_regression_mixed.MixedSingleTaskGP.construct_inputs", false]], "construct_inputs() (botorch.models.model.model class method)": [[7, "botorch.models.model.Model.construct_inputs", false]], "construct_inputs() (botorch.models.multitask.multitaskgp class method)": [[7, "botorch.models.multitask.MultiTaskGP.construct_inputs", false]], "construct_inputs() (botorch.models.pairwise_gp.pairwisegp class method)": [[7, "botorch.models.pairwise_gp.PairwiseGP.construct_inputs", false]], "construct_inputs_analytic_eubo() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_analytic_eubo", false]], "construct_inputs_best_f() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_best_f", false]], "construct_inputs_ehvi() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_EHVI", false]], "construct_inputs_mf_base() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_mf_base", false]], "construct_inputs_noisy_ei() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_noisy_ei", false]], "construct_inputs_posterior_mean() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_posterior_mean", false]], "construct_inputs_qehvi() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qEHVI", false]], "construct_inputs_qei() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qEI", false]], "construct_inputs_qeubo() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qeubo", false]], "construct_inputs_qjes() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qJES", false]], "construct_inputs_qkg() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qKG", false]], "construct_inputs_qlogei() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qLogEI", false]], "construct_inputs_qlognehvi() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qLogNEHVI", false]], "construct_inputs_qlognei() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qLogNEI", false]], "construct_inputs_qlognparego() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qLogNParEGO", false]], "construct_inputs_qmes() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qMES", false]], "construct_inputs_qmfkg() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qMFKG", false]], "construct_inputs_qmfmes() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qMFMES", false]], "construct_inputs_qnehvi() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qNEHVI", false]], "construct_inputs_qnei() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qNEI", false]], "construct_inputs_qpi() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qPI", false]], "construct_inputs_qsimpleregret() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qSimpleRegret", false]], "construct_inputs_qucb() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qUCB", false]], "construct_inputs_ucb() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_ucb", false]], "contextualdataset (class in botorch.utils.datasets)": [[13, "botorch.utils.datasets.ContextualDataset", false]], "convert_to_target_pre_hook() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.convert_to_target_pre_hook", false]], "cosine8 (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Cosine8", false]], "cost_sampler (botorch.acquisition.knowledge_gradient.qmultifidelityknowledgegradient property)": [[0, "botorch.acquisition.knowledge_gradient.qMultiFidelityKnowledgeGradient.cost_sampler", false]], "cost_sampler (botorch.acquisition.max_value_entropy_search.qmultifidelitymaxvalueentropy property)": [[0, "botorch.acquisition.max_value_entropy_search.qMultiFidelityMaxValueEntropy.cost_sampler", false]], "cost_sampler (botorch.acquisition.multi_objective.hypervolume_knowledge_gradient.qhypervolumeknowledgegradient property)": [[0, "botorch.acquisition.multi_objective.hypervolume_knowledge_gradient.qHypervolumeKnowledgeGradient.cost_sampler", false]], "costawarewarning": [[2, "botorch.exceptions.warnings.CostAwareWarning", false]], "covariance_matrix (botorch.utils.probability.unified_skew_normal.unifiedskewnormal property)": [[13, "botorch.utils.probability.unified_skew_normal.UnifiedSkewNormal.covariance_matrix", false]], "cvar (class in botorch.acquisition.risk_measures)": [[0, "botorch.acquisition.risk_measures.CVaR", false]], "cvfolds (class in botorch.cross_validation)": [[1, "botorch.cross_validation.CVFolds", false]], "cvresults (class in botorch.cross_validation)": [[1, "botorch.cross_validation.CVResults", false]], "datapoints (botorch.models.pairwise_gp.pairwisegp property)": [[7, "botorch.models.pairwise_gp.PairwiseGP.datapoints", false]], "debug (class in botorch.settings)": [[11, "botorch.settings.debug", false]], "decoupledacquisitionfunction (class in botorch.acquisition.decoupled)": [[0, "botorch.acquisition.decoupled.DecoupledAcquisitionFunction", false]], "default (class in botorch.utils.types)": [[13, "botorch.utils.types.DEFAULT", false]], "delattr_ctx() (in module botorch.utils.context_managers)": [[13, "botorch.utils.context_managers.delattr_ctx", false]], "delaunaypolytopesampler (class in botorch.utils.sampling)": [[13, "botorch.utils.sampling.DelaunayPolytopeSampler", false]], "densecontainer (class in botorch.utils.containers)": [[13, "botorch.utils.containers.DenseContainer", false]], "density() (botorch.posteriors.gpytorch.gpytorchposterior method)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.density", false]], "density() (botorch.posteriors.torch.torchposterior method)": [[9, "botorch.posteriors.torch.TorchPosterior.density", false]], "deprecationerror": [[2, "botorch.exceptions.errors.DeprecationError", false]], "detach() (botorch.utils.probability.linalg.pivotedcholesky method)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.detach", false]], "detach() (botorch.utils.probability.mvnxpb.mvnxpb method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.detach", false]], "detect_duplicates() (in module botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.detect_duplicates", false]], "device (botorch.optim.utils.model_utils.torchattr attribute)": [[8, "botorch.optim.utils.model_utils.TorchAttr.device", false]], "device (botorch.posteriors.ensemble.ensembleposterior property)": [[9, "botorch.posteriors.ensemble.EnsemblePosterior.device", false]], "device (botorch.posteriors.posterior_list.posteriorlist property)": [[9, "botorch.posteriors.posterior_list.PosteriorList.device", false]], "device (botorch.posteriors.torch.torchposterior property)": [[9, "botorch.posteriors.torch.TorchPosterior.device", false]], "device (botorch.posteriors.transformed.transformedposterior property)": [[9, "botorch.posteriors.transformed.TransformedPosterior.device", false]], "device (botorch.utils.containers.densecontainer property)": [[13, "botorch.utils.containers.DenseContainer.device", false]], "device (botorch.utils.containers.slicecontainer property)": [[13, "botorch.utils.containers.SliceContainer.device", false]], "device (botorch.utils.context_managers.tensorcheckpoint attribute)": [[13, "botorch.utils.context_managers.TensorCheckpoint.device", false]], "device (botorch.utils.testing.botorchtestcase attribute)": [[13, "botorch.utils.testing.BotorchTestCase.device", false]], "device (botorch.utils.testing.mockposterior property)": [[13, "botorch.utils.testing.MockPosterior.device", false]], "dh (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DH", false]], "dh1 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DH1", false]], "dh2 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DH2", false]], "dh3 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DH3", false]], "dh4 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DH4", false]], "diag (botorch.utils.probability.linalg.pivotedcholesky attribute)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.diag", false]], "dim (botorch.test_functions.base.basetestproblem attribute)": [[12, "botorch.test_functions.base.BaseTestProblem.dim", false]], "dim (botorch.test_functions.multi_fidelity.augmentedbranin attribute)": [[12, "botorch.test_functions.multi_fidelity.AugmentedBranin.dim", false]], "dim (botorch.test_functions.multi_fidelity.augmentedhartmann attribute)": [[12, "botorch.test_functions.multi_fidelity.AugmentedHartmann.dim", false]], "dim (botorch.test_functions.multi_objective.bnh attribute)": [[12, "botorch.test_functions.multi_objective.BNH.dim", false]], "dim (botorch.test_functions.multi_objective.branincurrin attribute)": [[12, "botorch.test_functions.multi_objective.BraninCurrin.dim", false]], "dim (botorch.test_functions.multi_objective.carsideimpact attribute)": [[12, "botorch.test_functions.multi_objective.CarSideImpact.dim", false]], "dim (botorch.test_functions.multi_objective.constr attribute)": [[12, "botorch.test_functions.multi_objective.CONSTR.dim", false]], "dim (botorch.test_functions.multi_objective.constrainedbranincurrin attribute)": [[12, "botorch.test_functions.multi_objective.ConstrainedBraninCurrin.dim", false]], "dim (botorch.test_functions.multi_objective.discbrake attribute)": [[12, "botorch.test_functions.multi_objective.DiscBrake.dim", false]], "dim (botorch.test_functions.multi_objective.gmm attribute)": [[12, "botorch.test_functions.multi_objective.GMM.dim", false]], "dim (botorch.test_functions.multi_objective.osy attribute)": [[12, "botorch.test_functions.multi_objective.OSY.dim", false]], "dim (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.dim", false]], "dim (botorch.test_functions.multi_objective.srn attribute)": [[12, "botorch.test_functions.multi_objective.SRN.dim", false]], "dim (botorch.test_functions.multi_objective.toyrobust attribute)": [[12, "botorch.test_functions.multi_objective.ToyRobust.dim", false]], "dim (botorch.test_functions.multi_objective.vehiclesafety attribute)": [[12, "botorch.test_functions.multi_objective.VehicleSafety.dim", false]], "dim (botorch.test_functions.multi_objective.weldedbeam attribute)": [[12, "botorch.test_functions.multi_objective.WeldedBeam.dim", false]], "dim (botorch.test_functions.multi_objective_multi_fidelity.momfbranincurrin attribute)": [[12, "botorch.test_functions.multi_objective_multi_fidelity.MOMFBraninCurrin.dim", false]], "dim (botorch.test_functions.multi_objective_multi_fidelity.momfpark attribute)": [[12, "botorch.test_functions.multi_objective_multi_fidelity.MOMFPark.dim", false]], "dim (botorch.test_functions.synthetic.beale attribute)": [[12, "botorch.test_functions.synthetic.Beale.dim", false]], "dim (botorch.test_functions.synthetic.branin attribute)": [[12, "botorch.test_functions.synthetic.Branin.dim", false]], "dim (botorch.test_functions.synthetic.bukin attribute)": [[12, "botorch.test_functions.synthetic.Bukin.dim", false]], "dim (botorch.test_functions.synthetic.constrainedgramacy attribute)": [[12, "botorch.test_functions.synthetic.ConstrainedGramacy.dim", false]], "dim (botorch.test_functions.synthetic.cosine8 attribute)": [[12, "botorch.test_functions.synthetic.Cosine8.dim", false]], "dim (botorch.test_functions.synthetic.dropwave attribute)": [[12, "botorch.test_functions.synthetic.DropWave.dim", false]], "dim (botorch.test_functions.synthetic.eggholder attribute)": [[12, "botorch.test_functions.synthetic.EggHolder.dim", false]], "dim (botorch.test_functions.synthetic.holdertable attribute)": [[12, "botorch.test_functions.synthetic.HolderTable.dim", false]], "dim (botorch.test_functions.synthetic.pressurevessel attribute)": [[12, "botorch.test_functions.synthetic.PressureVessel.dim", false]], "dim (botorch.test_functions.synthetic.shekel attribute)": [[12, "botorch.test_functions.synthetic.Shekel.dim", false]], "dim (botorch.test_functions.synthetic.sixhumpcamel attribute)": [[12, "botorch.test_functions.synthetic.SixHumpCamel.dim", false]], "dim (botorch.test_functions.synthetic.speedreducer attribute)": [[12, "botorch.test_functions.synthetic.SpeedReducer.dim", false]], "dim (botorch.test_functions.synthetic.tensioncompressionstring attribute)": [[12, "botorch.test_functions.synthetic.TensionCompressionString.dim", false]], "dim (botorch.test_functions.synthetic.threehumpcamel attribute)": [[12, "botorch.test_functions.synthetic.ThreeHumpCamel.dim", false]], "dim (botorch.test_functions.synthetic.weldedbeamso attribute)": [[12, "botorch.test_functions.synthetic.WeldedBeamSO.dim", false]], "discbrake (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DiscBrake", false]], "discretemaxvaluebase (class in botorch.acquisition.max_value_entropy_search)": [[0, "botorch.acquisition.max_value_entropy_search.DiscreteMaxValueBase", false]], "dispatch() (botorch.utils.dispatcher.dispatcher method)": [[13, "botorch.utils.dispatcher.Dispatcher.dispatch", false]], "dispatcher (class in botorch.utils.dispatcher)": [[13, "botorch.utils.dispatcher.Dispatcher", false]], "distribution (botorch.posteriors.gpytorch.gpytorchposterior attribute)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.distribution", false]], "div() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.div", false]], "dixonprice (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.DixonPrice", false]], "doc (botorch.utils.dispatcher.dispatcher attribute)": [[13, "botorch.utils.dispatcher.Dispatcher.doc", false]], "dominatedpartitioning (class in botorch.utils.multi_objective.box_decompositions.dominated)": [[13, "botorch.utils.multi_objective.box_decompositions.dominated.DominatedPartitioning", false]], "downsamplingkernel (class in botorch.models.kernels.downsampling)": [[7, "botorch.models.kernels.downsampling.DownsamplingKernel", false]], "draw() (botorch.sampling.qmc.multivariatenormalqmcengine method)": [[10, "botorch.sampling.qmc.MultivariateNormalQMCEngine.draw", false]], "draw() (botorch.sampling.qmc.normalqmcengine method)": [[10, "botorch.sampling.qmc.NormalQMCEngine.draw", false]], "draw() (botorch.utils.probability.lin_ess.linearellipticalslicesampler method)": [[13, "botorch.utils.probability.lin_ess.LinearEllipticalSliceSampler.draw", false]], "draw() (botorch.utils.sampling.delaunaypolytopesampler method)": [[13, "botorch.utils.sampling.DelaunayPolytopeSampler.draw", false]], "draw() (botorch.utils.sampling.hitandrunpolytopesampler method)": [[13, "botorch.utils.sampling.HitAndRunPolytopeSampler.draw", false]], "draw_kernel_feature_paths() (in module botorch.sampling.pathwise.prior_samplers)": [[10, "botorch.sampling.pathwise.prior_samplers.draw_kernel_feature_paths", false]], "draw_matheron_paths() (in module botorch.sampling.pathwise.posterior_samplers)": [[10, "botorch.sampling.pathwise.posterior_samplers.draw_matheron_paths", false]], "draw_sobol_normal_samples() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.draw_sobol_normal_samples", false]], "draw_sobol_samples() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.draw_sobol_samples", false]], "dropwave (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.DropWave", false]], "dtlz (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DTLZ", false]], "dtlz1 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DTLZ1", false]], "dtlz2 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DTLZ2", false]], "dtlz3 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DTLZ3", false]], "dtlz4 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DTLZ4", false]], "dtlz5 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DTLZ5", false]], "dtlz7 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DTLZ7", false]], "dtype (botorch.optim.utils.model_utils.torchattr attribute)": [[8, "botorch.optim.utils.model_utils.TorchAttr.dtype", false]], "dtype (botorch.posteriors.ensemble.ensembleposterior property)": [[9, "botorch.posteriors.ensemble.EnsemblePosterior.dtype", false]], "dtype (botorch.posteriors.posterior_list.posteriorlist property)": [[9, "botorch.posteriors.posterior_list.PosteriorList.dtype", false]], "dtype (botorch.posteriors.torch.torchposterior property)": [[9, "botorch.posteriors.torch.TorchPosterior.dtype", false]], "dtype (botorch.posteriors.transformed.transformedposterior property)": [[9, "botorch.posteriors.transformed.TransformedPosterior.dtype", false]], "dtype (botorch.utils.containers.densecontainer property)": [[13, "botorch.utils.containers.DenseContainer.dtype", false]], "dtype (botorch.utils.containers.slicecontainer property)": [[13, "botorch.utils.containers.SliceContainer.dtype", false]], "dtype (botorch.utils.context_managers.tensorcheckpoint attribute)": [[13, "botorch.utils.context_managers.TensorCheckpoint.dtype", false]], "dtype (botorch.utils.testing.mockposterior property)": [[13, "botorch.utils.testing.MockPosterior.dtype", false]], "dtypes_of_buffers (botorch.models.model.model property)": [[7, "botorch.models.model.Model.dtypes_of_buffers", false]], "e_d (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.E_d", false]], "e_g (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.E_g", false]], "eggholder (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.EggHolder", false]], "encode_args() (botorch.utils.dispatcher.dispatcher method)": [[13, "botorch.utils.dispatcher.Dispatcher.encode_args", false]], "encoder (botorch.utils.dispatcher.dispatcher property)": [[13, "botorch.utils.dispatcher.Dispatcher.encoder", false]], "ensemble_size (botorch.posteriors.ensemble.ensembleposterior property)": [[9, "botorch.posteriors.ensemble.EnsemblePosterior.ensemble_size", false]], "ensembleposterior (class in botorch.posteriors.ensemble)": [[9, "botorch.posteriors.ensemble.EnsemblePosterior", false]], "equality_constraints (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.equality_constraints", false]], "equals() (botorch.models.transforms.input.chainedinputtransform method)": [[7, "botorch.models.transforms.input.ChainedInputTransform.equals", false]], "equals() (botorch.models.transforms.input.filterfeatures method)": [[7, "botorch.models.transforms.input.FilterFeatures.equals", false]], "equals() (botorch.models.transforms.input.onehottonumeric method)": [[7, "botorch.models.transforms.input.OneHotToNumeric.equals", false]], "equals() (botorch.models.transforms.input.round method)": [[7, "botorch.models.transforms.input.Round.equals", false]], "estimate_feasible_volume() (in module botorch.utils.feasible_volume)": [[13, "botorch.utils.feasible_volume.estimate_feasible_volume", false]], "eval() (botorch.models.approximate_gp.approximategpytorchmodel method)": [[7, "botorch.models.approximate_gp.ApproximateGPyTorchModel.eval", false]], "eval() (botorch.models.model.model method)": [[7, "botorch.models.model.Model.eval", false]], "eval_lin_constraint() (in module botorch.optim.parameter_constraints)": [[8, "botorch.optim.parameter_constraints.eval_lin_constraint", false]], "evaluate() (botorch.acquisition.knowledge_gradient.qknowledgegradient method)": [[0, "botorch.acquisition.knowledge_gradient.qKnowledgeGradient.evaluate", false]], "evaluate() (botorch.acquisition.objective.expectationposteriortransform method)": [[0, "botorch.acquisition.objective.ExpectationPosteriorTransform.evaluate", false]], "evaluate() (botorch.acquisition.objective.scalarizedposteriortransform method)": [[0, "botorch.acquisition.objective.ScalarizedPosteriorTransform.evaluate", false]], "evaluate() (botorch.optim.stopping.expmastoppingcriterion method)": [[8, "botorch.optim.stopping.ExpMAStoppingCriterion.evaluate", false]], "evaluate_slack() (botorch.test_functions.base.constrainedbasetestproblem method)": [[12, "botorch.test_functions.base.ConstrainedBaseTestProblem.evaluate_slack", false]], "evaluate_slack_true() (botorch.test_functions.base.constrainedbasetestproblem method)": [[12, "botorch.test_functions.base.ConstrainedBaseTestProblem.evaluate_slack_true", false]], "evaluate_slack_true() (botorch.test_functions.multi_objective.bnh method)": [[12, "botorch.test_functions.multi_objective.BNH.evaluate_slack_true", false]], "evaluate_slack_true() (botorch.test_functions.multi_objective.c2dtlz2 method)": [[12, "botorch.test_functions.multi_objective.C2DTLZ2.evaluate_slack_true", false]], "evaluate_slack_true() (botorch.test_functions.multi_objective.constr method)": [[12, "botorch.test_functions.multi_objective.CONSTR.evaluate_slack_true", false]], "evaluate_slack_true() (botorch.test_functions.multi_objective.constrainedbranincurrin method)": [[12, "botorch.test_functions.multi_objective.ConstrainedBraninCurrin.evaluate_slack_true", false]], "evaluate_slack_true() (botorch.test_functions.multi_objective.discbrake method)": [[12, "botorch.test_functions.multi_objective.DiscBrake.evaluate_slack_true", false]], "evaluate_slack_true() (botorch.test_functions.multi_objective.mw7 method)": [[12, "botorch.test_functions.multi_objective.MW7.evaluate_slack_true", false]], "evaluate_slack_true() (botorch.test_functions.multi_objective.osy method)": [[12, "botorch.test_functions.multi_objective.OSY.evaluate_slack_true", false]], "evaluate_slack_true() (botorch.test_functions.multi_objective.srn method)": [[12, "botorch.test_functions.multi_objective.SRN.evaluate_slack_true", false]], "evaluate_slack_true() (botorch.test_functions.multi_objective.weldedbeam method)": [[12, "botorch.test_functions.multi_objective.WeldedBeam.evaluate_slack_true", false]], "evaluate_slack_true() (botorch.test_functions.synthetic.constrainedgramacy method)": [[12, "botorch.test_functions.synthetic.ConstrainedGramacy.evaluate_slack_true", false]], "evaluate_slack_true() (botorch.test_functions.synthetic.constrainedhartmann method)": [[12, "botorch.test_functions.synthetic.ConstrainedHartmann.evaluate_slack_true", false]], "evaluate_slack_true() (botorch.test_functions.synthetic.constrainedhartmannsmooth method)": [[12, "botorch.test_functions.synthetic.ConstrainedHartmannSmooth.evaluate_slack_true", false]], "evaluate_slack_true() (botorch.test_functions.synthetic.pressurevessel method)": [[12, "botorch.test_functions.synthetic.PressureVessel.evaluate_slack_true", false]], "evaluate_slack_true() (botorch.test_functions.synthetic.speedreducer method)": [[12, "botorch.test_functions.synthetic.SpeedReducer.evaluate_slack_true", false]], "evaluate_slack_true() (botorch.test_functions.synthetic.tensioncompressionstring method)": [[12, "botorch.test_functions.synthetic.TensionCompressionString.evaluate_slack_true", false]], "evaluate_slack_true() (botorch.test_functions.synthetic.weldedbeamso method)": [[12, "botorch.test_functions.synthetic.WeldedBeamSO.evaluate_slack_true", false]], "evaluate_true() (botorch.test_functions.base.basetestproblem method)": [[12, "botorch.test_functions.base.BaseTestProblem.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_fidelity.augmentedbranin method)": [[12, "botorch.test_functions.multi_fidelity.AugmentedBranin.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_fidelity.augmentedhartmann method)": [[12, "botorch.test_functions.multi_fidelity.AugmentedHartmann.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_fidelity.augmentedrosenbrock method)": [[12, "botorch.test_functions.multi_fidelity.AugmentedRosenbrock.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.bnh method)": [[12, "botorch.test_functions.multi_objective.BNH.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.branincurrin method)": [[12, "botorch.test_functions.multi_objective.BraninCurrin.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.carsideimpact method)": [[12, "botorch.test_functions.multi_objective.CarSideImpact.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.constr method)": [[12, "botorch.test_functions.multi_objective.CONSTR.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.dh1 method)": [[12, "botorch.test_functions.multi_objective.DH1.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.dh3 method)": [[12, "botorch.test_functions.multi_objective.DH3.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.discbrake method)": [[12, "botorch.test_functions.multi_objective.DiscBrake.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.dtlz1 method)": [[12, "botorch.test_functions.multi_objective.DTLZ1.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.dtlz2 method)": [[12, "botorch.test_functions.multi_objective.DTLZ2.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.dtlz3 method)": [[12, "botorch.test_functions.multi_objective.DTLZ3.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.dtlz5 method)": [[12, "botorch.test_functions.multi_objective.DTLZ5.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.dtlz7 method)": [[12, "botorch.test_functions.multi_objective.DTLZ7.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.gmm method)": [[12, "botorch.test_functions.multi_objective.GMM.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.mw7 method)": [[12, "botorch.test_functions.multi_objective.MW7.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.osy method)": [[12, "botorch.test_functions.multi_objective.OSY.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.penicillin method)": [[12, "botorch.test_functions.multi_objective.Penicillin.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.srn method)": [[12, "botorch.test_functions.multi_objective.SRN.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.toyrobust method)": [[12, "botorch.test_functions.multi_objective.ToyRobust.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.vehiclesafety method)": [[12, "botorch.test_functions.multi_objective.VehicleSafety.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.weldedbeam method)": [[12, "botorch.test_functions.multi_objective.WeldedBeam.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.zdt1 method)": [[12, "botorch.test_functions.multi_objective.ZDT1.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.zdt2 method)": [[12, "botorch.test_functions.multi_objective.ZDT2.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective.zdt3 method)": [[12, "botorch.test_functions.multi_objective.ZDT3.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective_multi_fidelity.momfbranincurrin method)": [[12, "botorch.test_functions.multi_objective_multi_fidelity.MOMFBraninCurrin.evaluate_true", false]], "evaluate_true() (botorch.test_functions.multi_objective_multi_fidelity.momfpark method)": [[12, "botorch.test_functions.multi_objective_multi_fidelity.MOMFPark.evaluate_true", false]], "evaluate_true() (botorch.test_functions.sensitivity_analysis.gsobol method)": [[12, "botorch.test_functions.sensitivity_analysis.Gsobol.evaluate_true", false]], "evaluate_true() (botorch.test_functions.sensitivity_analysis.ishigami method)": [[12, "botorch.test_functions.sensitivity_analysis.Ishigami.evaluate_true", false]], "evaluate_true() (botorch.test_functions.sensitivity_analysis.morris method)": [[12, "botorch.test_functions.sensitivity_analysis.Morris.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.ackley method)": [[12, "botorch.test_functions.synthetic.Ackley.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.beale method)": [[12, "botorch.test_functions.synthetic.Beale.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.branin method)": [[12, "botorch.test_functions.synthetic.Branin.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.bukin method)": [[12, "botorch.test_functions.synthetic.Bukin.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.constrainedgramacy method)": [[12, "botorch.test_functions.synthetic.ConstrainedGramacy.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.cosine8 method)": [[12, "botorch.test_functions.synthetic.Cosine8.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.dixonprice method)": [[12, "botorch.test_functions.synthetic.DixonPrice.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.dropwave method)": [[12, "botorch.test_functions.synthetic.DropWave.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.eggholder method)": [[12, "botorch.test_functions.synthetic.EggHolder.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.griewank method)": [[12, "botorch.test_functions.synthetic.Griewank.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.hartmann method)": [[12, "botorch.test_functions.synthetic.Hartmann.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.holdertable method)": [[12, "botorch.test_functions.synthetic.HolderTable.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.levy method)": [[12, "botorch.test_functions.synthetic.Levy.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.michalewicz method)": [[12, "botorch.test_functions.synthetic.Michalewicz.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.powell method)": [[12, "botorch.test_functions.synthetic.Powell.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.pressurevessel method)": [[12, "botorch.test_functions.synthetic.PressureVessel.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.rastrigin method)": [[12, "botorch.test_functions.synthetic.Rastrigin.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.rosenbrock method)": [[12, "botorch.test_functions.synthetic.Rosenbrock.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.shekel method)": [[12, "botorch.test_functions.synthetic.Shekel.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.sixhumpcamel method)": [[12, "botorch.test_functions.synthetic.SixHumpCamel.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.speedreducer method)": [[12, "botorch.test_functions.synthetic.SpeedReducer.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.styblinskitang method)": [[12, "botorch.test_functions.synthetic.StyblinskiTang.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.tensioncompressionstring method)": [[12, "botorch.test_functions.synthetic.TensionCompressionString.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.threehumpcamel method)": [[12, "botorch.test_functions.synthetic.ThreeHumpCamel.evaluate_true", false]], "evaluate_true() (botorch.test_functions.synthetic.weldedbeamso method)": [[12, "botorch.test_functions.synthetic.WeldedBeamSO.evaluate_true", false]], "event_shape (botorch.utils.containers.densecontainer attribute)": [[13, "botorch.utils.containers.DenseContainer.event_shape", false]], "event_shape (botorch.utils.containers.slicecontainer attribute)": [[13, "botorch.utils.containers.SliceContainer.event_shape", false]], "exp() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.exp", false]], "expand() (botorch.utils.probability.linalg.pivotedcholesky method)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.expand", false]], "expand() (botorch.utils.probability.mvnxpb.mvnxpb method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.expand", false]], "expand() (botorch.utils.probability.truncated_multivariate_normal.truncatedmultivariatenormal method)": [[13, "botorch.utils.probability.truncated_multivariate_normal.TruncatedMultivariateNormal.expand", false]], "expand() (botorch.utils.probability.unified_skew_normal.unifiedskewnormal method)": [[13, "botorch.utils.probability.unified_skew_normal.UnifiedSkewNormal.expand", false]], "expand_and_copy_tensor() (in module botorch.models.transforms.utils)": [[7, "botorch.models.transforms.utils.expand_and_copy_tensor", false]], "expand_trace_observations() (in module botorch.acquisition.utils)": [[0, "botorch.acquisition.utils.expand_trace_observations", false]], "expectation (class in botorch.acquisition.risk_measures)": [[0, "botorch.acquisition.risk_measures.Expectation", false]], "expectationposteriortransform (class in botorch.acquisition.objective)": [[0, "botorch.acquisition.objective.ExpectationPosteriorTransform", false]], "expectedhypervolumeimprovement (class in botorch.acquisition.multi_objective.analytic)": [[0, "botorch.acquisition.multi_objective.analytic.ExpectedHypervolumeImprovement", false]], "expectedimprovement (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.ExpectedImprovement", false]], "expectedimprovementqualityfunction (class in botorch.models.utils.inducing_point_allocators)": [[7, "botorch.models.utils.inducing_point_allocators.ExpectedImprovementQualityFunction", false]], "expmastoppingcriterion (class in botorch.optim.stopping)": [[8, "botorch.optim.stopping.ExpMAStoppingCriterion", false]], "exponentialdecaykernel (class in botorch.models.kernels.exponential_decay)": [[7, "botorch.models.kernels.exponential_decay.ExponentialDecayKernel", false]], "extend() (botorch.utils.multi_objective.hypervolume.multilist method)": [[13, "botorch.utils.multi_objective.hypervolume.MultiList.extend", false]], "extra_repr() (botorch.utils.torch.bufferdict method)": [[13, "botorch.utils.torch.BufferDict.extra_repr", false]], "extract_batch_covar() (in module botorch.utils.low_rank)": [[13, "botorch.utils.low_rank.extract_batch_covar", false]], "extract_candidates() (botorch.acquisition.knowledge_gradient.qknowledgegradient method)": [[0, "botorch.acquisition.knowledge_gradient.qKnowledgeGradient.extract_candidates", false]], "extract_candidates() (botorch.acquisition.multi_objective.hypervolume_knowledge_gradient.qhypervolumeknowledgegradient method)": [[0, "botorch.acquisition.multi_objective.hypervolume_knowledge_gradient.qHypervolumeKnowledgeGradient.extract_candidates", false]], "extract_candidates() (botorch.acquisition.multi_step_lookahead.qmultisteplookahead method)": [[0, "botorch.acquisition.multi_step_lookahead.qMultiStepLookahead.extract_candidates", false]], "f_1() (botorch.test_functions.multi_objective.toyrobust method)": [[12, "botorch.test_functions.multi_objective.ToyRobust.f_1", false]], "f_2() (botorch.test_functions.multi_objective.toyrobust method)": [[12, "botorch.test_functions.multi_objective.ToyRobust.f_2", false]], "failure (botorch.optim.core.optimizationstatus attribute)": [[8, "botorch.optim.core.OptimizationStatus.FAILURE", false]], "fantasize (class in botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.fantasize", false]], "fantasize() (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp method)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.fantasize", false]], "fantasize() (botorch.models.model.fantasizemixin method)": [[7, "botorch.models.model.FantasizeMixin.fantasize", false]], "fantasize() (botorch.models.model.modellist method)": [[7, "botorch.models.model.ModelList.fantasize", false]], "fantasizemixin (class in botorch.models.model)": [[7, "botorch.models.model.FantasizeMixin", false]], "fastnondominatedpartitioning (class in botorch.utils.multi_objective.box_decompositions.non_dominated)": [[13, "botorch.utils.multi_objective.box_decompositions.non_dominated.FastNondominatedPartitioning", false]], "fatmax() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.fatmax", false]], "fatmaximum() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.fatmaximum", false]], "fatmin() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.fatmin", false]], "fatminimum() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.fatminimum", false]], "fatmoid() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.fatmoid", false]], "fatplus() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.fatplus", false]], "feasibilityweightedmcmultioutputobjective (class in botorch.acquisition.multi_objective.objective)": [[0, "botorch.acquisition.multi_objective.objective.FeasibilityWeightedMCMultiOutputObjective", false]], "featuremap (class in botorch.sampling.pathwise.features.maps)": [[10, "botorch.sampling.pathwise.features.maps.FeatureMap", false]], "featureselector (class in botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.FeatureSelector", false]], "filterfeatures (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.FilterFeatures", false]], "find_interior_point() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.find_interior_point", false]], "fit_fully_bayesian_model_nuts() (in module botorch.fit)": [[3, "botorch.fit.fit_fully_bayesian_model_nuts", false]], "fit_gpytorch_mll() (in module botorch.fit)": [[3, "botorch.fit.fit_gpytorch_mll", false]], "fit_gpytorch_mll_scipy() (in module botorch.optim.fit)": [[8, "botorch.optim.fit.fit_gpytorch_mll_scipy", false]], "fit_gpytorch_mll_torch() (in module botorch.optim.fit)": [[8, "botorch.optim.fit.fit_gpytorch_mll_torch", false]], "fix_features() (in module botorch.optim.utils.acquisition_utils)": [[8, "botorch.optim.utils.acquisition_utils.fix_features", false]], "fixed_features (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.fixed_features", false]], "fixedcostmodel (class in botorch.models.cost)": [[7, "botorch.models.cost.FixedCostModel", false]], "fixedfeatureacquisitionfunction (class in botorch.acquisition.fixed_feature)": [[0, "botorch.acquisition.fixed_feature.FixedFeatureAcquisitionFunction", false]], "fixedhomotopyschedule (class in botorch.optim.homotopy)": [[8, "botorch.optim.homotopy.FixedHomotopySchedule", false]], "fixednoisedataset (class in botorch.utils.datasets)": [[13, "botorch.utils.datasets.FixedNoiseDataset", false]], "fixednoisegp (class in botorch.models.gp_regression)": [[7, "botorch.models.gp_regression.FixedNoiseGP", false]], "fixednoiselcemgp (class in botorch.models.contextual_multioutput)": [[7, "botorch.models.contextual_multioutput.FixedNoiseLCEMGP", false]], "fixednoisemultifidelitygp (class in botorch.models.gp_regression_fidelity)": [[7, "botorch.models.gp_regression_fidelity.FixedNoiseMultiFidelityGP", false]], "fixedsinglesamplemodel (class in botorch.models.deterministic)": [[7, "botorch.models.deterministic.FixedSingleSampleModel", false]], "flattenedstandardize (class in botorch.models.higher_order_gp)": [[7, "botorch.models.higher_order_gp.FlattenedStandardize", false]], "forkedrngsampler (class in botorch.sampling.stochastic_samplers)": [[10, "botorch.sampling.stochastic_samplers.ForkedRNGSampler", false]], "forward() (botorch.acquisition.active_learning.pairwisemcposteriorvariance method)": [[0, "botorch.acquisition.active_learning.PairwiseMCPosteriorVariance.forward", false]], "forward() (botorch.acquisition.active_learning.qnegintegratedposteriorvariance method)": [[0, "botorch.acquisition.active_learning.qNegIntegratedPosteriorVariance.forward", false]], "forward() (botorch.acquisition.analytic.constrainedexpectedimprovement method)": [[0, "botorch.acquisition.analytic.ConstrainedExpectedImprovement.forward", false]], "forward() (botorch.acquisition.analytic.expectedimprovement method)": [[0, "botorch.acquisition.analytic.ExpectedImprovement.forward", false]], "forward() (botorch.acquisition.analytic.logconstrainedexpectedimprovement method)": [[0, "botorch.acquisition.analytic.LogConstrainedExpectedImprovement.forward", false]], "forward() (botorch.acquisition.analytic.logexpectedimprovement method)": [[0, "botorch.acquisition.analytic.LogExpectedImprovement.forward", false]], "forward() (botorch.acquisition.analytic.lognoisyexpectedimprovement method)": [[0, "botorch.acquisition.analytic.LogNoisyExpectedImprovement.forward", false]], "forward() (botorch.acquisition.analytic.logprobabilityofimprovement method)": [[0, "botorch.acquisition.analytic.LogProbabilityOfImprovement.forward", false]], "forward() (botorch.acquisition.analytic.noisyexpectedimprovement method)": [[0, "botorch.acquisition.analytic.NoisyExpectedImprovement.forward", false]], "forward() (botorch.acquisition.analytic.posteriormean method)": [[0, "botorch.acquisition.analytic.PosteriorMean.forward", false]], "forward() (botorch.acquisition.analytic.posteriorstandarddeviation method)": [[0, "botorch.acquisition.analytic.PosteriorStandardDeviation.forward", false]], "forward() (botorch.acquisition.analytic.probabilityofimprovement method)": [[0, "botorch.acquisition.analytic.ProbabilityOfImprovement.forward", false]], "forward() (botorch.acquisition.analytic.qanalyticprobabilityofimprovement method)": [[0, "botorch.acquisition.analytic.qAnalyticProbabilityOfImprovement.forward", false]], "forward() (botorch.acquisition.analytic.scalarizedposteriormean method)": [[0, "botorch.acquisition.analytic.ScalarizedPosteriorMean.forward", false]], "forward() (botorch.acquisition.analytic.upperconfidencebound method)": [[0, "botorch.acquisition.analytic.UpperConfidenceBound.forward", false]], "forward() (botorch.acquisition.cost_aware.genericcostawareutility method)": [[0, "botorch.acquisition.cost_aware.GenericCostAwareUtility.forward", false]], "forward() (botorch.acquisition.cost_aware.inversecostweightedutility method)": [[0, "botorch.acquisition.cost_aware.InverseCostWeightedUtility.forward", false]], "forward() (botorch.acquisition.fixed_feature.fixedfeatureacquisitionfunction method)": [[0, "botorch.acquisition.fixed_feature.FixedFeatureAcquisitionFunction.forward", false]], "forward() (botorch.acquisition.joint_entropy_search.qjointentropysearch method)": [[0, "botorch.acquisition.joint_entropy_search.qJointEntropySearch.forward", false]], "forward() (botorch.acquisition.knowledge_gradient.projectedacquisitionfunction method)": [[0, "botorch.acquisition.knowledge_gradient.ProjectedAcquisitionFunction.forward", false]], "forward() (botorch.acquisition.knowledge_gradient.qknowledgegradient method)": [[0, "botorch.acquisition.knowledge_gradient.qKnowledgeGradient.forward", false]], "forward() (botorch.acquisition.knowledge_gradient.qmultifidelityknowledgegradient method)": [[0, "botorch.acquisition.knowledge_gradient.qMultiFidelityKnowledgeGradient.forward", false]], "forward() (botorch.acquisition.max_value_entropy_search.qmultifidelitymaxvalueentropy method)": [[0, "botorch.acquisition.max_value_entropy_search.qMultiFidelityMaxValueEntropy.forward", false]], "forward() (botorch.acquisition.monte_carlo.mcacquisitionfunction method)": [[0, "botorch.acquisition.monte_carlo.MCAcquisitionFunction.forward", false]], "forward() (botorch.acquisition.monte_carlo.samplereducingmcacquisitionfunction method)": [[0, "botorch.acquisition.monte_carlo.SampleReducingMCAcquisitionFunction.forward", false]], "forward() (botorch.acquisition.multi_objective.analytic.expectedhypervolumeimprovement method)": [[0, "botorch.acquisition.multi_objective.analytic.ExpectedHypervolumeImprovement.forward", false]], "forward() (botorch.acquisition.multi_objective.analytic.multiobjectiveanalyticacquisitionfunction method)": [[0, "botorch.acquisition.multi_objective.analytic.MultiObjectiveAnalyticAcquisitionFunction.forward", false]], "forward() (botorch.acquisition.multi_objective.hypervolume_knowledge_gradient.qhypervolumeknowledgegradient method)": [[0, "botorch.acquisition.multi_objective.hypervolume_knowledge_gradient.qHypervolumeKnowledgeGradient.forward", false]], "forward() (botorch.acquisition.multi_objective.hypervolume_knowledge_gradient.qmultifidelityhypervolumeknowledgegradient method)": [[0, "botorch.acquisition.multi_objective.hypervolume_knowledge_gradient.qMultiFidelityHypervolumeKnowledgeGradient.forward", false]], "forward() (botorch.acquisition.multi_objective.joint_entropy_search.lowerboundmultiobjectiveentropysearch method)": [[0, "botorch.acquisition.multi_objective.joint_entropy_search.LowerBoundMultiObjectiveEntropySearch.forward", false]], "forward() (botorch.acquisition.multi_objective.joint_entropy_search.qlowerboundmultiobjectivejointentropysearch method)": [[0, "botorch.acquisition.multi_objective.joint_entropy_search.qLowerBoundMultiObjectiveJointEntropySearch.forward", false]], "forward() (botorch.acquisition.multi_objective.logei.qlogexpectedhypervolumeimprovement method)": [[0, "botorch.acquisition.multi_objective.logei.qLogExpectedHypervolumeImprovement.forward", false]], "forward() (botorch.acquisition.multi_objective.max_value_entropy_search.qlowerboundmultiobjectivemaxvalueentropysearch method)": [[0, "botorch.acquisition.multi_objective.max_value_entropy_search.qLowerBoundMultiObjectiveMaxValueEntropySearch.forward", false]], "forward() (botorch.acquisition.multi_objective.max_value_entropy_search.qmultiobjectivemaxvalueentropy method)": [[0, "botorch.acquisition.multi_objective.max_value_entropy_search.qMultiObjectiveMaxValueEntropy.forward", false]], "forward() (botorch.acquisition.multi_objective.monte_carlo.multiobjectivemcacquisitionfunction method)": [[0, "botorch.acquisition.multi_objective.monte_carlo.MultiObjectiveMCAcquisitionFunction.forward", false]], "forward() (botorch.acquisition.multi_objective.monte_carlo.qexpectedhypervolumeimprovement method)": [[0, "botorch.acquisition.multi_objective.monte_carlo.qExpectedHypervolumeImprovement.forward", false]], "forward() (botorch.acquisition.multi_objective.multi_fidelity.momf method)": [[0, "botorch.acquisition.multi_objective.multi_fidelity.MOMF.forward", false]], "forward() (botorch.acquisition.multi_objective.multi_output_risk_measures.independentcvar method)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.IndependentCVaR.forward", false]], "forward() (botorch.acquisition.multi_objective.multi_output_risk_measures.independentvar method)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.IndependentVaR.forward", false]], "forward() (botorch.acquisition.multi_objective.multi_output_risk_measures.multioutputexpectation method)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MultiOutputExpectation.forward", false]], "forward() (botorch.acquisition.multi_objective.multi_output_risk_measures.multioutputworstcase method)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MultiOutputWorstCase.forward", false]], "forward() (botorch.acquisition.multi_objective.multi_output_risk_measures.mvar method)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MVaR.forward", false]], "forward() (botorch.acquisition.multi_objective.objective.feasibilityweightedmcmultioutputobjective method)": [[0, "botorch.acquisition.multi_objective.objective.FeasibilityWeightedMCMultiOutputObjective.forward", false]], "forward() (botorch.acquisition.multi_objective.objective.identitymcmultioutputobjective method)": [[0, "botorch.acquisition.multi_objective.objective.IdentityMCMultiOutputObjective.forward", false]], "forward() (botorch.acquisition.multi_objective.objective.mcmultioutputobjective method)": [[0, "botorch.acquisition.multi_objective.objective.MCMultiOutputObjective.forward", false]], "forward() (botorch.acquisition.multi_objective.objective.weightedmcmultioutputobjective method)": [[0, "botorch.acquisition.multi_objective.objective.WeightedMCMultiOutputObjective.forward", false]], "forward() (botorch.acquisition.multi_objective.predictive_entropy_search.qmultiobjectivepredictiveentropysearch method)": [[0, "botorch.acquisition.multi_objective.predictive_entropy_search.qMultiObjectivePredictiveEntropySearch.forward", false]], "forward() (botorch.acquisition.multi_step_lookahead.qmultisteplookahead method)": [[0, "botorch.acquisition.multi_step_lookahead.qMultiStepLookahead.forward", false]], "forward() (botorch.acquisition.objective.constrainedmcobjective method)": [[0, "botorch.acquisition.objective.ConstrainedMCObjective.forward", false]], "forward() (botorch.acquisition.objective.expectationposteriortransform method)": [[0, "botorch.acquisition.objective.ExpectationPosteriorTransform.forward", false]], "forward() (botorch.acquisition.objective.genericmcobjective method)": [[0, "botorch.acquisition.objective.GenericMCObjective.forward", false]], "forward() (botorch.acquisition.objective.identitymcobjective method)": [[0, "botorch.acquisition.objective.IdentityMCObjective.forward", false]], "forward() (botorch.acquisition.objective.learnedobjective method)": [[0, "botorch.acquisition.objective.LearnedObjective.forward", false]], "forward() (botorch.acquisition.objective.linearmcobjective method)": [[0, "botorch.acquisition.objective.LinearMCObjective.forward", false]], "forward() (botorch.acquisition.objective.scalarizedposteriortransform method)": [[0, "botorch.acquisition.objective.ScalarizedPosteriorTransform.forward", false]], "forward() (botorch.acquisition.penalized.gaussianpenalty method)": [[0, "botorch.acquisition.penalized.GaussianPenalty.forward", false]], "forward() (botorch.acquisition.penalized.grouplassopenalty method)": [[0, "botorch.acquisition.penalized.GroupLassoPenalty.forward", false]], "forward() (botorch.acquisition.penalized.l1penalty method)": [[0, "botorch.acquisition.penalized.L1Penalty.forward", false]], "forward() (botorch.acquisition.penalized.l1penaltyobjective method)": [[0, "botorch.acquisition.penalized.L1PenaltyObjective.forward", false]], "forward() (botorch.acquisition.penalized.l2penalty method)": [[0, "botorch.acquisition.penalized.L2Penalty.forward", false]], "forward() (botorch.acquisition.penalized.penalizedacquisitionfunction method)": [[0, "botorch.acquisition.penalized.PenalizedAcquisitionFunction.forward", false]], "forward() (botorch.acquisition.penalized.penalizedmcobjective method)": [[0, "botorch.acquisition.penalized.PenalizedMCObjective.forward", false]], "forward() (botorch.acquisition.predictive_entropy_search.qpredictiveentropysearch method)": [[0, "botorch.acquisition.predictive_entropy_search.qPredictiveEntropySearch.forward", false]], "forward() (botorch.acquisition.preference.analyticexpectedutilityofbestoption method)": [[0, "botorch.acquisition.preference.AnalyticExpectedUtilityOfBestOption.forward", false]], "forward() (botorch.acquisition.preference.pairwisebayesianactivelearningbydisagreement method)": [[0, "botorch.acquisition.preference.PairwiseBayesianActiveLearningByDisagreement.forward", false]], "forward() (botorch.acquisition.preference.qexpectedutilityofbestoption method)": [[0, "botorch.acquisition.preference.qExpectedUtilityOfBestOption.forward", false]], "forward() (botorch.acquisition.prior_guided.priorguidedacquisitionfunction method)": [[0, "botorch.acquisition.prior_guided.PriorGuidedAcquisitionFunction.forward", false]], "forward() (botorch.acquisition.proximal.proximalacquisitionfunction method)": [[0, "botorch.acquisition.proximal.ProximalAcquisitionFunction.forward", false]], "forward() (botorch.acquisition.risk_measures.cvar method)": [[0, "botorch.acquisition.risk_measures.CVaR.forward", false]], "forward() (botorch.acquisition.risk_measures.expectation method)": [[0, "botorch.acquisition.risk_measures.Expectation.forward", false]], "forward() (botorch.acquisition.risk_measures.var method)": [[0, "botorch.acquisition.risk_measures.VaR.forward", false]], "forward() (botorch.acquisition.risk_measures.worstcase method)": [[0, "botorch.acquisition.risk_measures.WorstCase.forward", false]], "forward() (botorch.generation.sampling.boltzmannsampling method)": [[4, "botorch.generation.sampling.BoltzmannSampling.forward", false]], "forward() (botorch.generation.sampling.constrainedmaxposteriorsampling method)": [[4, "botorch.generation.sampling.ConstrainedMaxPosteriorSampling.forward", false]], "forward() (botorch.generation.sampling.maxposteriorsampling method)": [[4, "botorch.generation.sampling.MaxPosteriorSampling.forward", false]], "forward() (botorch.models.approximate_gp.approximategpytorchmodel method)": [[7, "botorch.models.approximate_gp.ApproximateGPyTorchModel.forward", false]], "forward() (botorch.models.cost.affinefidelitycostmodel method)": [[7, "botorch.models.cost.AffineFidelityCostModel.forward", false]], "forward() (botorch.models.cost.fixedcostmodel method)": [[7, "botorch.models.cost.FixedCostModel.forward", false]], "forward() (botorch.models.deterministic.affinedeterministicmodel method)": [[7, "botorch.models.deterministic.AffineDeterministicModel.forward", false]], "forward() (botorch.models.deterministic.fixedsinglesamplemodel method)": [[7, "botorch.models.deterministic.FixedSingleSampleModel.forward", false]], "forward() (botorch.models.deterministic.genericdeterministicmodel method)": [[7, "botorch.models.deterministic.GenericDeterministicModel.forward", false]], "forward() (botorch.models.deterministic.posteriormeanmodel method)": [[7, "botorch.models.deterministic.PosteriorMeanModel.forward", false]], "forward() (botorch.models.fully_bayesian.saasfullybayesiansingletaskgp method)": [[7, "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP.forward", false]], "forward() (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp method)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.forward", false]], "forward() (botorch.models.gp_regression.heteroskedasticsingletaskgp method)": [[7, "botorch.models.gp_regression.HeteroskedasticSingleTaskGP.forward", false]], "forward() (botorch.models.gp_regression.singletaskgp method)": [[7, "botorch.models.gp_regression.SingleTaskGP.forward", false]], "forward() (botorch.models.higher_order_gp.flattenedstandardize method)": [[7, "botorch.models.higher_order_gp.FlattenedStandardize.forward", false]], "forward() (botorch.models.higher_order_gp.higherordergp method)": [[7, "botorch.models.higher_order_gp.HigherOrderGP.forward", false]], "forward() (botorch.models.multitask.kroneckermultitaskgp method)": [[7, "botorch.models.multitask.KroneckerMultiTaskGP.forward", false]], "forward() (botorch.models.multitask.multitaskgp method)": [[7, "botorch.models.multitask.MultiTaskGP.forward", false]], "forward() (botorch.models.pairwise_gp.pairwisegp method)": [[7, "botorch.models.pairwise_gp.PairwiseGP.forward", false]], "forward() (botorch.models.pairwise_gp.pairwiselaplacemarginalloglikelihood method)": [[7, "botorch.models.pairwise_gp.PairwiseLaplaceMarginalLogLikelihood.forward", false]], "forward() (botorch.models.transforms.outcome.bilog method)": [[7, "botorch.models.transforms.outcome.Bilog.forward", false]], "forward() (botorch.models.transforms.outcome.chainedoutcometransform method)": [[7, "botorch.models.transforms.outcome.ChainedOutcomeTransform.forward", false]], "forward() (botorch.models.transforms.outcome.log method)": [[7, "botorch.models.transforms.outcome.Log.forward", false]], "forward() (botorch.models.transforms.outcome.power method)": [[7, "botorch.models.transforms.outcome.Power.forward", false]], "forward() (botorch.models.transforms.outcome.standardize method)": [[7, "botorch.models.transforms.outcome.Standardize.forward", false]], "forward() (botorch.sampling.index_sampler.indexsampler method)": [[10, "botorch.sampling.index_sampler.IndexSampler.forward", false]], "forward() (botorch.sampling.normal.normalmcsampler method)": [[10, "botorch.sampling.normal.NormalMCSampler.forward", false]], "forward() (botorch.sampling.pairwise_samplers.pairwisemcsampler method)": [[10, "botorch.sampling.pairwise_samplers.PairwiseMCSampler.forward", false]], "forward() (botorch.sampling.pathwise.features.maps.kernelevaluationmap method)": [[10, "botorch.sampling.pathwise.features.maps.KernelEvaluationMap.forward", false]], "forward() (botorch.sampling.pathwise.features.maps.kernelfeaturemap method)": [[10, "botorch.sampling.pathwise.features.maps.KernelFeatureMap.forward", false]], "forward() (botorch.sampling.pathwise.paths.generalizedlinearpath method)": [[10, "botorch.sampling.pathwise.paths.GeneralizedLinearPath.forward", false]], "forward() (botorch.sampling.pathwise.paths.pathdict method)": [[10, "botorch.sampling.pathwise.paths.PathDict.forward", false]], "forward() (botorch.sampling.pathwise.paths.pathlist method)": [[10, "botorch.sampling.pathwise.paths.PathList.forward", false]], "forward() (botorch.sampling.pathwise.utils.chainedtransform method)": [[10, "botorch.sampling.pathwise.utils.ChainedTransform.forward", false]], "forward() (botorch.sampling.pathwise.utils.featureselector method)": [[10, "botorch.sampling.pathwise.utils.FeatureSelector.forward", false]], "forward() (botorch.sampling.pathwise.utils.inverselengthscaletransform method)": [[10, "botorch.sampling.pathwise.utils.InverseLengthscaleTransform.forward", false]], "forward() (botorch.sampling.pathwise.utils.outcomeuntransformer method)": [[10, "botorch.sampling.pathwise.utils.OutcomeUntransformer.forward", false]], "forward() (botorch.sampling.pathwise.utils.outputscaletransform method)": [[10, "botorch.sampling.pathwise.utils.OutputscaleTransform.forward", false]], "forward() (botorch.sampling.pathwise.utils.sinecosinetransform method)": [[10, "botorch.sampling.pathwise.utils.SineCosineTransform.forward", false]], "forward() (botorch.sampling.pathwise.utils.tensortransform method)": [[10, "botorch.sampling.pathwise.utils.TensorTransform.forward", false]], "forward() (botorch.sampling.stochastic_samplers.forkedrngsampler method)": [[10, "botorch.sampling.stochastic_samplers.ForkedRNGSampler.forward", false]], "forward() (botorch.sampling.stochastic_samplers.stochasticsampler method)": [[10, "botorch.sampling.stochastic_samplers.StochasticSampler.forward", false]], "forward() (botorch.test_functions.base.basetestproblem method)": [[12, "botorch.test_functions.base.BaseTestProblem.forward", false]], "forward() (botorch.utils.gp_sampling.gpdraw method)": [[13, "botorch.utils.gp_sampling.GPDraw.forward", false]], "forward() (botorch.utils.gp_sampling.randomfourierfeatures method)": [[13, "botorch.utils.gp_sampling.RandomFourierFeatures.forward", false]], "forward() (botorch.utils.rounding.onehotargmaxste static method)": [[13, "botorch.utils.rounding.OneHotArgmaxSTE.forward", false]], "forward() (botorch.utils.rounding.roundste static method)": [[13, "botorch.utils.rounding.RoundSTE.forward", false]], "forwardbackwardclosure (class in botorch.optim.closures.core)": [[8, "botorch.optim.closures.core.ForwardBackwardClosure", false]], "from_joint_dataset() (botorch.utils.datasets.multitaskdataset class method)": [[13, "botorch.utils.datasets.MultiTaskDataset.from_joint_dataset", false]], "full_tree (botorch.optim.optimize.optimizeacqfinputs property)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.full_tree", false]], "fullybayesianposterior (class in botorch.posteriors.fully_bayesian)": [[9, "botorch.posteriors.fully_bayesian.FullyBayesianPosterior", false]], "funcs (botorch.utils.dispatcher.dispatcher attribute)": [[13, "botorch.utils.dispatcher.Dispatcher.funcs", false]], "functions (botorch.utils.testing.basetestproblemtestcasemixin property)": [[13, "botorch.utils.testing.BaseTestProblemTestCaseMixIn.functions", false]], "fval (botorch.optim.core.optimizationresult attribute)": [[8, "botorch.optim.core.OptimizationResult.fval", false]], "gaussian_update() (in module botorch.sampling.pathwise.update_strategies)": [[10, "botorch.sampling.pathwise.update_strategies.gaussian_update", false]], "gaussianmixtureposterior (class in botorch.posteriors.fully_bayesian)": [[9, "botorch.posteriors.fully_bayesian.GaussianMixturePosterior", false]], "gaussianpenalty (class in botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.GaussianPenalty", false]], "gen_batch_initial_conditions() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.gen_batch_initial_conditions", false]], "gen_candidates (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.gen_candidates", false]], "gen_candidates_scipy() (in module botorch.generation.gen)": [[4, "botorch.generation.gen.gen_candidates_scipy", false]], "gen_candidates_torch() (in module botorch.generation.gen)": [[4, "botorch.generation.gen.gen_candidates_torch", false]], "gen_kernel_features() (in module botorch.sampling.pathwise.features.generators)": [[10, "botorch.sampling.pathwise.features.generators.gen_kernel_features", false]], "gen_loo_cv_folds() (in module botorch.cross_validation)": [[1, "botorch.cross_validation.gen_loo_cv_folds", false]], "gen_multi_task_dataset() (in module botorch.utils.test_helpers)": [[13, "botorch.utils.test_helpers.gen_multi_task_dataset", false]], "gen_one_shot_hvkg_initial_conditions() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.gen_one_shot_hvkg_initial_conditions", false]], "gen_one_shot_kg_initial_conditions() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.gen_one_shot_kg_initial_conditions", false]], "gen_pareto_front() (botorch.test_functions.base.multiobjectivetestproblem method)": [[12, "botorch.test_functions.base.MultiObjectiveTestProblem.gen_pareto_front", false]], "gen_pareto_front() (botorch.test_functions.multi_objective.dtlz1 method)": [[12, "botorch.test_functions.multi_objective.DTLZ1.gen_pareto_front", false]], "gen_pareto_front() (botorch.test_functions.multi_objective.dtlz2 method)": [[12, "botorch.test_functions.multi_objective.DTLZ2.gen_pareto_front", false]], "gen_pareto_front() (botorch.test_functions.multi_objective.zdt1 method)": [[12, "botorch.test_functions.multi_objective.ZDT1.gen_pareto_front", false]], "gen_pareto_front() (botorch.test_functions.multi_objective.zdt2 method)": [[12, "botorch.test_functions.multi_objective.ZDT2.gen_pareto_front", false]], "gen_pareto_front() (botorch.test_functions.multi_objective.zdt3 method)": [[12, "botorch.test_functions.multi_objective.ZDT3.gen_pareto_front", false]], "gen_positional_indices() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.gen_positional_indices", false]], "gen_value_function_initial_conditions() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.gen_value_function_initial_conditions", false]], "generalizedlinearpath (class in botorch.sampling.pathwise.paths)": [[10, "botorch.sampling.pathwise.paths.GeneralizedLinearPath", false]], "genericcostawareutility (class in botorch.acquisition.cost_aware)": [[0, "botorch.acquisition.cost_aware.GenericCostAwareUtility", false]], "genericdeterministicmodel (class in botorch.models.deterministic)": [[7, "botorch.models.deterministic.GenericDeterministicModel", false]], "genericmcmultioutputobjective (class in botorch.acquisition.multi_objective.objective)": [[0, "botorch.acquisition.multi_objective.objective.GenericMCMultiOutputObjective", false]], "genericmcobjective (class in botorch.acquisition.objective)": [[0, "botorch.acquisition.objective.GenericMCObjective", false]], "get_acqf_input_constructor() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.get_acqf_input_constructor", false]], "get_acquisition_function() (in module botorch.acquisition.factory)": [[0, "botorch.acquisition.factory.get_acquisition_function", false]], "get_acquisition_function() (in module botorch.acquisition.utils)": [[0, "botorch.acquisition.utils.get_acquisition_function", false]], "get_all_tasks() (botorch.models.multitask.multitaskgp class method)": [[7, "botorch.models.multitask.MultiTaskGP.get_all_tasks", false]], "get_attribute() (in module botorch.models.converter)": [[7, "botorch.models.converter.get_attribute", false]], "get_augmented_q_batch_size() (botorch.acquisition.knowledge_gradient.qknowledgegradient method)": [[0, "botorch.acquisition.knowledge_gradient.qKnowledgeGradient.get_augmented_q_batch_size", false]], "get_augmented_q_batch_size() (botorch.acquisition.multi_objective.hypervolume_knowledge_gradient.qhypervolumeknowledgegradient method)": [[0, "botorch.acquisition.multi_objective.hypervolume_knowledge_gradient.qHypervolumeKnowledgeGradient.get_augmented_q_batch_size", false]], "get_augmented_q_batch_size() (botorch.acquisition.multi_step_lookahead.qmultisteplookahead method)": [[0, "botorch.acquisition.multi_step_lookahead.qMultiStepLookahead.get_augmented_q_batch_size", false]], "get_best_candidates() (in module botorch.generation.gen)": [[4, "botorch.generation.gen.get_best_candidates", false]], "get_best_f_analytic() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.get_best_f_analytic", false]], "get_best_f_mc() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.get_best_f_mc", false]], "get_bounds_as_ndarray() (in module botorch.optim.utils.numpy_utils)": [[8, "botorch.optim.utils.numpy_utils.get_bounds_as_ndarray", false]], "get_chebyshev_scalarization() (in module botorch.utils.multi_objective.scalarization)": [[13, "botorch.utils.multi_objective.scalarization.get_chebyshev_scalarization", false]], "get_constants() (in module botorch.utils.constants)": [[13, "botorch.utils.constants.get_constants", false]], "get_constants() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.get_constants", false]], "get_constants_like() (in module botorch.utils.constants)": [[13, "botorch.utils.constants.get_constants_like", false]], "get_constants_like() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.get_constants_like", false]], "get_data_loader() (in module botorch.optim.utils.model_utils)": [[8, "botorch.optim.utils.model_utils.get_data_loader", false]], "get_dataset_without_task_feature() (botorch.utils.datasets.multitaskdataset method)": [[13, "botorch.utils.datasets.MultiTaskDataset.get_dataset_without_task_feature", false]], "get_default_partitioning_alpha() (in module botorch.acquisition.multi_objective.utils)": [[0, "botorch.acquisition.multi_objective.utils.get_default_partitioning_alpha", false]], "get_deterministic_model() (in module botorch.utils.gp_sampling)": [[13, "botorch.utils.gp_sampling.get_deterministic_model", false]], "get_deterministic_model_list() (in module botorch.utils.gp_sampling)": [[13, "botorch.utils.gp_sampling.get_deterministic_model_list", false]], "get_deterministic_model_multi_samples() (in module botorch.utils.gp_sampling)": [[13, "botorch.utils.gp_sampling.get_deterministic_model_multi_samples", false]], "get_device_of_sequence() (in module botorch.acquisition.fixed_feature)": [[0, "botorch.acquisition.fixed_feature.get_device_of_sequence", false]], "get_dtype_of_sequence() (in module botorch.acquisition.fixed_feature)": [[0, "botorch.acquisition.fixed_feature.get_dtype_of_sequence", false]], "get_eval_gp_sample_callable() (in module botorch.utils.gp_sampling)": [[13, "botorch.utils.gp_sampling.get_eval_gp_sample_callable", false]], "get_fantasy_model() (botorch.models.higher_order_gp.higherordergp method)": [[7, "botorch.models.higher_order_gp.HigherOrderGP.get_fantasy_model", false]], "get_feasible_samples() (in module botorch.utils.feasible_volume)": [[13, "botorch.utils.feasible_volume.get_feasible_samples", false]], "get_gaussian_likelihood_with_gamma_prior() (in module botorch.models.utils.gpytorch_modules)": [[7, "botorch.models.utils.gpytorch_modules.get_gaussian_likelihood_with_gamma_prior", false]], "get_gp_samples() (in module botorch.utils.gp_sampling)": [[13, "botorch.utils.gp_sampling.get_gp_samples", false]], "get_hypercell_bounds() (botorch.utils.multi_objective.box_decompositions.box_decomposition_list.boxdecompositionlist method)": [[13, "botorch.utils.multi_objective.box_decompositions.box_decomposition_list.BoxDecompositionList.get_hypercell_bounds", false]], "get_hypercell_bounds() (botorch.utils.multi_objective.box_decompositions.non_dominated.nondominatedpartitioning method)": [[13, "botorch.utils.multi_objective.box_decompositions.non_dominated.NondominatedPartitioning.get_hypercell_bounds", false]], "get_ic_generator() (botorch.optim.optimize.optimizeacqfinputs method)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.get_ic_generator", false]], "get_index_tensors() (in module botorch.utils.probability.lin_ess)": [[13, "botorch.utils.probability.lin_ess.get_index_tensors", false]], "get_induced_fantasy_model() (botorch.acquisition.multi_step_lookahead.qmultisteplookahead method)": [[0, "botorch.acquisition.multi_step_lookahead.qMultiStepLookahead.get_induced_fantasy_model", false]], "get_infeasible_cost() (in module botorch.acquisition.utils)": [[0, "botorch.acquisition.utils.get_infeasible_cost", false]], "get_init_args() (botorch.models.transforms.input.normalize method)": [[7, "botorch.models.transforms.input.Normalize.get_init_args", false]], "get_init_args() (botorch.models.transforms.input.round method)": [[7, "botorch.models.transforms.input.Round.get_init_args", false]], "get_input_transform() (in module botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.get_input_transform", false]], "get_loss_closure() (in module botorch.optim.closures.model_closures)": [[8, "botorch.optim.closures.model_closures.get_loss_closure", false]], "get_loss_closure_with_grads() (in module botorch.optim.closures.model_closures)": [[8, "botorch.optim.closures.model_closures.get_loss_closure_with_grads", false]], "get_matern_kernel_with_gamma_prior() (in module botorch.models.utils.gpytorch_modules)": [[7, "botorch.models.utils.gpytorch_modules.get_matern_kernel_with_gamma_prior", false]], "get_monotonicity_constraints() (in module botorch.utils.constraints)": [[13, "botorch.utils.constraints.get_monotonicity_constraints", false]], "get_multi_step_tree_input_representation() (botorch.acquisition.multi_step_lookahead.qmultisteplookahead method)": [[0, "botorch.acquisition.multi_step_lookahead.qMultiStepLookahead.get_multi_step_tree_input_representation", false]], "get_mvar_set_vectorized() (botorch.acquisition.multi_objective.multi_output_risk_measures.mvar method)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MVaR.get_mvar_set_vectorized", false]], "get_mvar_set_via_counting() (botorch.acquisition.multi_objective.multi_output_risk_measures.mvar method)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MVaR.get_mvar_set_via_counting", false]], "get_name_filter() (in module botorch.optim.utils.model_utils)": [[8, "botorch.optim.utils.model_utils.get_name_filter", false]], "get_objective_weights_transform() (in module botorch.utils.objective)": [[13, "botorch.utils.objective.get_objective_weights_transform", false]], "get_optimal_samples() (in module botorch.acquisition.utils)": [[0, "botorch.acquisition.utils.get_optimal_samples", false]], "get_outcome_constraint_transforms() (in module botorch.utils.constraints)": [[13, "botorch.utils.constraints.get_outcome_constraint_transforms", false]], "get_outcome_feasibility_probability() (in module botorch.utils.feasible_volume)": [[13, "botorch.utils.feasible_volume.get_outcome_feasibility_probability", false]], "get_output_transform() (in module botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.get_output_transform", false]], "get_parameters() (in module botorch.optim.utils.model_utils)": [[8, "botorch.optim.utils.model_utils.get_parameters", false]], "get_parameters_and_bounds() (in module botorch.optim.utils.model_utils)": [[8, "botorch.optim.utils.model_utils.get_parameters_and_bounds", false]], "get_partition_bounds() (in module botorch.utils.multi_objective.box_decompositions.utils)": [[13, "botorch.utils.multi_objective.box_decompositions.utils.get_partition_bounds", false]], "get_polytope_samples() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.get_polytope_samples", false]], "get_pvar_expected() (in module botorch.utils.test_helpers)": [[13, "botorch.utils.test_helpers.get_pvar_expected", false]], "get_rounding_input_transform() (in module botorch.models.transforms.factory)": [[7, "botorch.models.transforms.factory.get_rounding_input_transform", false]], "get_sample_moments() (in module botorch.utils.test_helpers)": [[13, "botorch.utils.test_helpers.get_sample_moments", false]], "get_sampler() (in module botorch.sampling.get_sampler)": [[10, "botorch.sampling.get_sampler.get_sampler", false]], "get_split_shapes() (botorch.acquisition.multi_step_lookahead.qmultisteplookahead method)": [[0, "botorch.acquisition.multi_step_lookahead.qMultiStepLookahead.get_split_shapes", false]], "get_task_value_remapping() (in module botorch.models.multitask)": [[7, "botorch.models.multitask.get_task_value_remapping", false]], "get_tensors_as_ndarray_1d() (in module botorch.optim.utils.numpy_utils)": [[8, "botorch.optim.utils.numpy_utils.get_tensors_as_ndarray_1d", false]], "get_train_inputs() (in module botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.get_train_inputs", false]], "get_train_targets() (in module botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.get_train_targets", false]], "get_weights_posterior() (in module botorch.utils.gp_sampling)": [[13, "botorch.utils.gp_sampling.get_weights_posterior", false]], "get_x_baseline() (in module botorch.optim.utils.acquisition_utils)": [[8, "botorch.optim.utils.acquisition_utils.get_X_baseline", false]], "gmm (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.GMM", false]], "gpdraw (class in botorch.utils.gp_sampling)": [[13, "botorch.utils.gp_sampling.GPDraw", false]], "gpt_posterior_settings() (in module botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.gpt_posterior_settings", false]], "gpytorchposterior (class in botorch.posteriors.gpytorch)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior", false]], "greedyimprovementreduction (class in botorch.models.utils.inducing_point_allocators)": [[7, "botorch.models.utils.inducing_point_allocators.GreedyImprovementReduction", false]], "greedyvariancereduction (class in botorch.models.utils.inducing_point_allocators)": [[7, "botorch.models.utils.inducing_point_allocators.GreedyVarianceReduction", false]], "griewank (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Griewank", false]], "group_lasso_regularizer() (in module botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.group_lasso_regularizer", false]], "grouplassopenalty (class in botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.GroupLassoPenalty", false]], "gsobol (class in botorch.test_functions.sensitivity_analysis)": [[12, "botorch.test_functions.sensitivity_analysis.Gsobol", false]], "hartmann (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Hartmann", false]], "help() (botorch.utils.dispatcher.dispatcher method)": [[13, "botorch.utils.dispatcher.Dispatcher.help", false]], "heteroskedasticsingletaskgp (class in botorch.models.gp_regression)": [[7, "botorch.models.gp_regression.HeteroskedasticSingleTaskGP", false]], "higherordergp (class in botorch.models.higher_order_gp)": [[7, "botorch.models.higher_order_gp.HigherOrderGP", false]], "higherordergpposterior (class in botorch.posteriors.higher_order)": [[9, "botorch.posteriors.higher_order.HigherOrderGPPosterior", false]], "hitandrunpolytopesampler (class in botorch.utils.sampling)": [[13, "botorch.utils.sampling.HitAndRunPolytopeSampler", false]], "holdertable (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.HolderTable", false]], "homotopy (class in botorch.optim.homotopy)": [[8, "botorch.optim.homotopy.Homotopy", false]], "homotopyparameter (class in botorch.optim.homotopy)": [[8, "botorch.optim.homotopy.HomotopyParameter", false]], "homotopyschedule (class in botorch.optim.homotopy)": [[8, "botorch.optim.homotopy.HomotopySchedule", false]], "hypervolume (class in botorch.utils.multi_objective.hypervolume)": [[13, "botorch.utils.multi_objective.hypervolume.Hypervolume", false]], "ic_gen_kwargs (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.ic_gen_kwargs", false]], "ic_generator (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.ic_generator", false]], "identitymcmultioutputobjective (class in botorch.acquisition.multi_objective.objective)": [[0, "botorch.acquisition.multi_objective.objective.IdentityMCMultiOutputObjective", false]], "identitymcobjective (class in botorch.acquisition.objective)": [[0, "botorch.acquisition.objective.IdentityMCObjective", false]], "identitystefunction (class in botorch.utils.rounding)": [[13, "botorch.utils.rounding.IdentitySTEFunction", false]], "iidnormalsampler (class in botorch.sampling.normal)": [[10, "botorch.sampling.normal.IIDNormalSampler", false]], "independentcvar (class in botorch.acquisition.multi_objective.multi_output_risk_measures)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.IndependentCVaR", false]], "independentvar (class in botorch.acquisition.multi_objective.multi_output_risk_measures)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.IndependentVaR", false]], "indexsampler (class in botorch.sampling.index_sampler)": [[10, "botorch.sampling.index_sampler.IndexSampler", false]], "indices (botorch.utils.containers.slicecontainer attribute)": [[13, "botorch.utils.containers.SliceContainer.indices", false]], "inducingpointallocator (class in botorch.models.utils.inducing_point_allocators)": [[7, "botorch.models.utils.inducing_point_allocators.InducingPointAllocator", false]], "inequality_constraints (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.inequality_constraints", false]], "infer_reference_point() (in module botorch.utils.multi_objective.hypervolume)": [[13, "botorch.utils.multi_objective.hypervolume.infer_reference_point", false]], "infinitewidthbnnkernel (class in botorch.models.kernels.infinite_width_bnn)": [[7, "botorch.models.kernels.infinite_width_bnn.InfiniteWidthBNNKernel", false]], "init_inducing_points() (botorch.models.approximate_gp.singletaskvariationalgp method)": [[7, "botorch.models.approximate_gp.SingleTaskVariationalGP.init_inducing_points", false]], "initialize_q_batch() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.initialize_q_batch", false]], "initialize_q_batch_nonneg() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.initialize_q_batch_nonneg", false]], "input_transform (botorch.sampling.pathwise.features.maps.featuremap attribute)": [[10, "botorch.sampling.pathwise.features.maps.FeatureMap.input_transform", false]], "input_transform (botorch.sampling.pathwise.utils.transformedmodulemixin attribute)": [[10, "botorch.sampling.pathwise.utils.TransformedModuleMixin.input_transform", false]], "inputdataerror": [[2, "botorch.exceptions.errors.InputDataError", false]], "inputdatawarning": [[2, "botorch.exceptions.warnings.InputDataWarning", false]], "inputperturbation (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.InputPerturbation", false]], "inputstandardize (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.InputStandardize", false]], "inversecostweightedutility (class in botorch.acquisition.cost_aware)": [[0, "botorch.acquisition.cost_aware.InverseCostWeightedUtility", false]], "inverselengthscaletransform (class in botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.InverseLengthscaleTransform", false]], "is_ensemble() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.is_ensemble", false]], "is_feasible() (botorch.test_functions.base.constrainedbasetestproblem method)": [[12, "botorch.test_functions.base.ConstrainedBaseTestProblem.is_feasible", false]], "is_fully_bayesian() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.is_fully_bayesian", false]], "is_non_dominated() (in module botorch.utils.multi_objective.pareto)": [[13, "botorch.utils.multi_objective.pareto.is_non_dominated", false]], "is_nonnegative() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.is_nonnegative", false]], "is_one_to_many (botorch.models.transforms.input.appendfeatures attribute)": [[7, "botorch.models.transforms.input.AppendFeatures.is_one_to_many", false]], "is_one_to_many (botorch.models.transforms.input.inputperturbation attribute)": [[7, "botorch.models.transforms.input.InputPerturbation.is_one_to_many", false]], "ishigami (class in botorch.test_functions.sensitivity_analysis)": [[12, "botorch.test_functions.sensitivity_analysis.Ishigami", false]], "items() (botorch.sampling.pathwise.paths.pathdict method)": [[10, "botorch.sampling.pathwise.paths.PathDict.items", false]], "items() (botorch.utils.torch.bufferdict method)": [[13, "botorch.utils.torch.BufferDict.items", false]], "k (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.K", false]], "k_1 (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.K_1", false]], "k_2 (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.K_2", false]], "k_d (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.k_d", false]], "k_g (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.k_g", false]], "k_i (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.K_I", false]], "k_p (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.K_p", false]], "k_x (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.K_X", false]], "kernelevaluationmap (class in botorch.sampling.pathwise.features.maps)": [[10, "botorch.sampling.pathwise.features.maps.KernelEvaluationMap", false]], "kernelfeaturemap (class in botorch.sampling.pathwise.features.maps)": [[10, "botorch.sampling.pathwise.features.maps.KernelFeatureMap", false]], "keys() (botorch.sampling.pathwise.paths.pathdict method)": [[10, "botorch.sampling.pathwise.paths.PathDict.keys", false]], "keys() (botorch.utils.torch.bufferdict method)": [[13, "botorch.utils.torch.BufferDict.keys", false]], "kroneckermultitaskgp (class in botorch.models.multitask)": [[7, "botorch.models.multitask.KroneckerMultiTaskGP", false]], "l0approximation (class in botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.L0Approximation", false]], "l0penaltyapprox (class in botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.L0PenaltyApprox", false]], "l0penaltyapproxobjective (class in botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.L0PenaltyApproxObjective", false]], "l1penalty (class in botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.L1Penalty", false]], "l1penaltyobjective (class in botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.L1PenaltyObjective", false]], "l2penalty (class in botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.L2Penalty", false]], "la2() (botorch.test_functions.multi_objective.mw7 method)": [[12, "botorch.test_functions.multi_objective.MW7.LA2", false]], "lambd (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.lambd", false]], "lceagp (class in botorch.models.contextual)": [[7, "botorch.models.contextual.LCEAGP", false]], "lceakernel (class in botorch.models.kernels.contextual_lcea)": [[7, "botorch.models.kernels.contextual_lcea.LCEAKernel", false]], "lcemgp (class in botorch.models.contextual_multioutput)": [[7, "botorch.models.contextual_multioutput.LCEMGP", false]], "learn_bounds (botorch.models.transforms.input.normalize property)": [[7, "botorch.models.transforms.input.Normalize.learn_bounds", false]], "learnedobjective (class in botorch.acquisition.objective)": [[0, "botorch.acquisition.objective.LearnedObjective", false]], "legacy_ei_numerics_warning() (in module botorch.exceptions.warnings)": [[2, "botorch.exceptions.warnings.legacy_ei_numerics_warning", false]], "leggauss() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.leggauss", false]], "level (botorch.settings.log_level attribute)": [[11, "botorch.settings.log_level.level", false]], "levy (botorch.test_functions.multi_objective.toyrobust attribute)": [[12, "botorch.test_functions.multi_objective.ToyRobust.levy", false]], "levy (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Levy", false]], "lifetime_samples (botorch.utils.probability.lin_ess.linearellipticalslicesampler property)": [[13, "botorch.utils.probability.lin_ess.LinearEllipticalSliceSampler.lifetime_samples", false]], "lin_constraint_jac() (in module botorch.optim.parameter_constraints)": [[8, "botorch.optim.parameter_constraints.lin_constraint_jac", false]], "linearellipticalslicesampler (class in botorch.utils.probability.lin_ess)": [[13, "botorch.utils.probability.lin_ess.LinearEllipticalSliceSampler", false]], "linearhomotopyschedule (class in botorch.optim.homotopy)": [[8, "botorch.optim.homotopy.LinearHomotopySchedule", false]], "linearmcobjective (class in botorch.acquisition.objective)": [[0, "botorch.acquisition.objective.LinearMCObjective", false]], "lineartruncatedfidelitykernel (class in botorch.models.kernels.linear_truncated_fidelity)": [[7, "botorch.models.kernels.linear_truncated_fidelity.LinearTruncatedFidelityKernel", false]], "load_mcmc_samples() (botorch.models.fully_bayesian.saasfullybayesiansingletaskgp method)": [[7, "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP.load_mcmc_samples", false]], "load_mcmc_samples() (botorch.models.fully_bayesian.saaspyromodel method)": [[7, "botorch.models.fully_bayesian.SaasPyroModel.load_mcmc_samples", false]], "load_mcmc_samples() (botorch.models.fully_bayesian_multitask.multitasksaaspyromodel method)": [[7, "botorch.models.fully_bayesian_multitask.MultitaskSaasPyroModel.load_mcmc_samples", false]], "load_mcmc_samples() (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp method)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.load_mcmc_samples", false]], "load_state_dict() (botorch.models.fully_bayesian.saasfullybayesiansingletaskgp method)": [[7, "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP.load_state_dict", false]], "load_state_dict() (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp method)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.load_state_dict", false]], "load_state_dict() (botorch.models.model.modellist method)": [[7, "botorch.models.model.ModelList.load_state_dict", false]], "load_state_dict() (botorch.models.pairwise_gp.pairwisegp method)": [[7, "botorch.models.pairwise_gp.PairwiseGP.load_state_dict", false]], "load_state_dict() (botorch.utils.testing.mockmodel method)": [[13, "botorch.utils.testing.MockModel.load_state_dict", false]], "log (class in botorch.models.transforms.outcome)": [[7, "botorch.models.transforms.outcome.Log", false]], "log() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.log", false]], "log10 (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.Log10", false]], "log1mexp() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.log1mexp", false]], "log1pexp() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.log1pexp", false]], "log_cdf_robust() (in module botorch.acquisition.multi_objective.predictive_entropy_search)": [[0, "botorch.acquisition.multi_objective.predictive_entropy_search.log_cdf_robust", false]], "log_erfc() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.log_erfc", false]], "log_erfcx() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.log_erfcx", false]], "log_fatmoid() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.log_fatmoid", false]], "log_fatplus() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.log_fatplus", false]], "log_level (class in botorch.settings)": [[11, "botorch.settings.log_level", false]], "log_ndtr() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.log_ndtr", false]], "log_p() (botorch.models.likelihoods.pairwise.pairwiselogitlikelihood method)": [[7, "botorch.models.likelihoods.pairwise.PairwiseLogitLikelihood.log_p", false]], "log_partition (botorch.utils.probability.truncated_multivariate_normal.truncatedmultivariatenormal property)": [[13, "botorch.utils.probability.truncated_multivariate_normal.TruncatedMultivariateNormal.log_partition", false]], "log_phi() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.log_phi", false]], "log_prob (botorch.utils.probability.mvnxpb.mvnxpbstate attribute)": [[13, "botorch.utils.probability.mvnxpb.mvnxpbState.log_prob", false]], "log_prob() (botorch.utils.probability.truncated_multivariate_normal.truncatedmultivariatenormal method)": [[13, "botorch.utils.probability.truncated_multivariate_normal.TruncatedMultivariateNormal.log_prob", false]], "log_prob() (botorch.utils.probability.unified_skew_normal.unifiedskewnormal method)": [[13, "botorch.utils.probability.unified_skew_normal.UnifiedSkewNormal.log_prob", false]], "log_prob_extra (botorch.utils.probability.mvnxpb.mvnxpbstate attribute)": [[13, "botorch.utils.probability.mvnxpb.mvnxpbState.log_prob_extra", false]], "log_prob_normal_in() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.log_prob_normal_in", false]], "log_softplus() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.log_softplus", false]], "logconstrainedexpectedimprovement (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.LogConstrainedExpectedImprovement", false]], "logdiffexp() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.logdiffexp", false]], "logexpectedimprovement (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.LogExpectedImprovement", false]], "logexpit() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.logexpit", false]], "loglinearhomotopyschedule (class in botorch.optim.homotopy)": [[8, "botorch.optim.homotopy.LogLinearHomotopySchedule", false]], "logmeanexp() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.logmeanexp", false]], "lognoisyexpectedimprovement (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.LogNoisyExpectedImprovement", false]], "lognorm_to_norm() (in module botorch.models.transforms.utils)": [[7, "botorch.models.transforms.utils.lognorm_to_norm", false]], "logplusexp() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.logplusexp", false]], "logprobabilityofimprovement (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.LogProbabilityOfImprovement", false]], "logsumexp() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.logsumexp", false]], "lowerboundmultiobjectiveentropysearch (class in botorch.acquisition.multi_objective.joint_entropy_search)": [[0, "botorch.acquisition.multi_objective.joint_entropy_search.LowerBoundMultiObjectiveEntropySearch", false]], "m_x (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.m_X", false]], "make_best_f() (in module botorch.acquisition.multi_step_lookahead)": [[0, "botorch.acquisition.multi_step_lookahead.make_best_f", false]], "make_differentiable() (botorch.acquisition.multi_objective.multi_output_risk_measures.mvar method)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MVaR.make_differentiable", false]], "make_posterior_variances() (botorch.models.higher_order_gp.higherordergp method)": [[7, "botorch.models.higher_order_gp.HigherOrderGP.make_posterior_variances", false]], "make_scipy_bounds() (in module botorch.optim.parameter_constraints)": [[8, "botorch.optim.parameter_constraints.make_scipy_bounds", false]], "make_scipy_linear_constraints() (in module botorch.optim.parameter_constraints)": [[8, "botorch.optim.parameter_constraints.make_scipy_linear_constraints", false]], "make_scipy_nonlinear_inequality_constraints() (in module botorch.optim.parameter_constraints)": [[8, "botorch.optim.parameter_constraints.make_scipy_nonlinear_inequality_constraints", false]], "manual_seed() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.manual_seed", false]], "mars (class in botorch.acquisition.multi_objective.multi_output_risk_measures)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MARS", false]], "match_batch_shape() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.match_batch_shape", false]], "matern52_kernel() (in module botorch.models.fully_bayesian)": [[7, "botorch.models.fully_bayesian.matern52_kernel", false]], "matheronpath (class in botorch.sampling.pathwise.posterior_samplers)": [[10, "botorch.sampling.pathwise.posterior_samplers.MatheronPath", false]], "max_hv (botorch.test_functions.base.multiobjectivetestproblem property)": [[12, "botorch.test_functions.base.MultiObjectiveTestProblem.max_hv", false]], "maximize_samples() (botorch.generation.sampling.maxposteriorsampling method)": [[4, "botorch.generation.sampling.MaxPosteriorSampling.maximize_samples", false]], "maxposteriorsampling (class in botorch.generation.sampling)": [[4, "botorch.generation.sampling.MaxPosteriorSampling", false]], "mcacquisitionfunction (class in botorch.acquisition.monte_carlo)": [[0, "botorch.acquisition.monte_carlo.MCAcquisitionFunction", false]], "mcmultioutputobjective (class in botorch.acquisition.multi_objective.objective)": [[0, "botorch.acquisition.multi_objective.objective.MCMultiOutputObjective", false]], "mean (botorch.posteriors.ensemble.ensembleposterior property)": [[9, "botorch.posteriors.ensemble.EnsemblePosterior.mean", false]], "mean (botorch.posteriors.gpytorch.gpytorchposterior property)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.mean", false]], "mean (botorch.posteriors.posterior_list.posteriorlist property)": [[9, "botorch.posteriors.posterior_list.PosteriorList.mean", false]], "mean (botorch.posteriors.transformed.transformedposterior property)": [[9, "botorch.posteriors.transformed.TransformedPosterior.mean", false]], "mean (botorch.utils.testing.mockposterior property)": [[13, "botorch.utils.testing.MockPosterior.mean", false]], "means (botorch.models.transforms.input.inputstandardize property)": [[7, "botorch.models.transforms.input.InputStandardize.means", false]], "median_lengthscale (botorch.models.fully_bayesian.saasfullybayesiansingletaskgp property)": [[7, "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP.median_lengthscale", false]], "median_lengthscale (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp property)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.median_lengthscale", false]], "message (botorch.optim.core.optimizationresult attribute)": [[8, "botorch.optim.core.OptimizationResult.message", false]], "michalewicz (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Michalewicz", false]], "minimize_with_timeout() (in module botorch.optim.utils.timeout)": [[8, "botorch.optim.utils.timeout.minimize_with_timeout", false]], "mins (botorch.models.transforms.input.normalize property)": [[7, "botorch.models.transforms.input.Normalize.mins", false]], "mixedsingletaskgp (class in botorch.models.gp_regression_mixed)": [[7, "botorch.models.gp_regression_mixed.MixedSingleTaskGP", false]], "mixture_covariance_matrix (botorch.posteriors.fully_bayesian.gaussianmixtureposterior property)": [[9, "botorch.posteriors.fully_bayesian.GaussianMixturePosterior.mixture_covariance_matrix", false]], "mixture_mean (botorch.posteriors.fully_bayesian.gaussianmixtureposterior property)": [[9, "botorch.posteriors.fully_bayesian.GaussianMixturePosterior.mixture_mean", false]], "mixture_variance (botorch.posteriors.fully_bayesian.gaussianmixtureposterior property)": [[9, "botorch.posteriors.fully_bayesian.GaussianMixturePosterior.mixture_variance", false]], "mockacquisitionfunction (class in botorch.utils.testing)": [[13, "botorch.utils.testing.MockAcquisitionFunction", false]], "mockmodel (class in botorch.utils.testing)": [[13, "botorch.utils.testing.MockModel", false]], "mockposterior (class in botorch.utils.testing)": [[13, "botorch.utils.testing.MockPosterior", false]], "mod_batch_shape() (in module botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.mod_batch_shape", false]], "model (botorch.cross_validation.cvresults attribute)": [[1, "botorch.cross_validation.CVResults.model", false]], "model (class in botorch.models.model)": [[7, "botorch.models.model.Model", false]], "model_list_to_batched() (in module botorch.models.converter)": [[7, "botorch.models.converter.model_list_to_batched", false]], "modeldict (class in botorch.models.model)": [[7, "botorch.models.model.ModelDict", false]], "modelfittingerror": [[2, "botorch.exceptions.errors.ModelFittingError", false]], "modellist (class in botorch.models.model)": [[7, "botorch.models.model.ModelList", false]], "modellistgp (class in botorch.models.model_list_gp_regression)": [[7, "botorch.models.model_list_gp_regression.ModelListGP", false]], "module": [[0, "module-botorch.acquisition", false], [0, "module-botorch.acquisition.acquisition", false], [0, "module-botorch.acquisition.active_learning", false], [0, "module-botorch.acquisition.analytic", false], [0, "module-botorch.acquisition.cached_cholesky", false], [0, "module-botorch.acquisition.cost_aware", false], [0, "module-botorch.acquisition.decoupled", false], [0, "module-botorch.acquisition.factory", false], [0, "module-botorch.acquisition.fixed_feature", false], [0, "module-botorch.acquisition.input_constructors", false], [0, "module-botorch.acquisition.joint_entropy_search", false], [0, "module-botorch.acquisition.knowledge_gradient", false], [0, "module-botorch.acquisition.logei", false], [0, "module-botorch.acquisition.max_value_entropy_search", false], [0, "module-botorch.acquisition.monte_carlo", false], [0, "module-botorch.acquisition.multi_objective.analytic", false], [0, "module-botorch.acquisition.multi_objective.hypervolume_knowledge_gradient", false], [0, "module-botorch.acquisition.multi_objective.joint_entropy_search", false], [0, "module-botorch.acquisition.multi_objective.logei", false], [0, "module-botorch.acquisition.multi_objective.max_value_entropy_search", false], [0, "module-botorch.acquisition.multi_objective.monte_carlo", false], [0, "module-botorch.acquisition.multi_objective.multi_fidelity", false], [0, "module-botorch.acquisition.multi_objective.multi_output_risk_measures", false], [0, "module-botorch.acquisition.multi_objective.objective", false], [0, "module-botorch.acquisition.multi_objective.parego", false], [0, "module-botorch.acquisition.multi_objective.predictive_entropy_search", false], [0, "module-botorch.acquisition.multi_objective.utils", false], [0, "module-botorch.acquisition.multi_step_lookahead", false], [0, "module-botorch.acquisition.objective", false], [0, "module-botorch.acquisition.penalized", false], [0, "module-botorch.acquisition.predictive_entropy_search", false], [0, "module-botorch.acquisition.preference", false], [0, "module-botorch.acquisition.prior_guided", false], [0, "module-botorch.acquisition.proximal", false], [0, "module-botorch.acquisition.risk_measures", false], [0, "module-botorch.acquisition.utils", false], [1, "module-botorch.cross_validation", false], [2, "module-botorch.exceptions", false], [2, "module-botorch.exceptions.errors", false], [2, "module-botorch.exceptions.warnings", false], [3, "module-botorch.fit", false], [4, "module-botorch.generation", false], [4, "module-botorch.generation.gen", false], [4, "module-botorch.generation.sampling", false], [4, "module-botorch.generation.utils", false], [6, "module-botorch.logging", false], [7, "module-botorch.models", false], [7, "module-botorch.models.approximate_gp", false], [7, "module-botorch.models.contextual", false], [7, "module-botorch.models.contextual_multioutput", false], [7, "module-botorch.models.converter", false], [7, "module-botorch.models.cost", false], [7, "module-botorch.models.deterministic", false], [7, "module-botorch.models.ensemble", false], [7, "module-botorch.models.fully_bayesian", false], [7, "module-botorch.models.fully_bayesian_multitask", false], [7, "module-botorch.models.gp_regression", false], [7, "module-botorch.models.gp_regression_fidelity", false], [7, "module-botorch.models.gp_regression_mixed", false], [7, "module-botorch.models.gpytorch", false], [7, "module-botorch.models.higher_order_gp", false], [7, "module-botorch.models.kernels.categorical", false], [7, "module-botorch.models.kernels.contextual_lcea", false], [7, "module-botorch.models.kernels.contextual_sac", false], [7, "module-botorch.models.kernels.downsampling", false], [7, "module-botorch.models.kernels.exponential_decay", false], [7, "module-botorch.models.kernels.infinite_width_bnn", false], [7, "module-botorch.models.kernels.linear_truncated_fidelity", false], [7, "module-botorch.models.kernels.orthogonal_additive_kernel", false], [7, "module-botorch.models.likelihoods.pairwise", false], [7, "module-botorch.models.model", false], [7, "module-botorch.models.model_list_gp_regression", false], [7, "module-botorch.models.multitask", false], [7, "module-botorch.models.pairwise_gp", false], [7, "module-botorch.models.transforms.factory", false], [7, "module-botorch.models.transforms.input", false], [7, "module-botorch.models.transforms.outcome", false], [7, "module-botorch.models.transforms.utils", false], [7, "module-botorch.models.utils.assorted", false], [7, "module-botorch.models.utils.gpytorch_modules", false], [7, "module-botorch.models.utils.inducing_point_allocators", false], [8, "module-botorch.optim", false], [8, "module-botorch.optim.closures.core", false], [8, "module-botorch.optim.closures.model_closures", false], [8, "module-botorch.optim.core", false], [8, "module-botorch.optim.fit", false], [8, "module-botorch.optim.homotopy", false], [8, "module-botorch.optim.initializers", false], [8, "module-botorch.optim.optimize", false], [8, "module-botorch.optim.optimize_homotopy", false], [8, "module-botorch.optim.parameter_constraints", false], [8, "module-botorch.optim.stopping", false], [8, "module-botorch.optim.utils.acquisition_utils", false], [8, "module-botorch.optim.utils.common", false], [8, "module-botorch.optim.utils.model_utils", false], [8, "module-botorch.optim.utils.numpy_utils", false], [8, "module-botorch.optim.utils.timeout", false], [9, "module-botorch.posteriors", false], [9, "module-botorch.posteriors.base_samples", false], [9, "module-botorch.posteriors.ensemble", false], [9, "module-botorch.posteriors.fully_bayesian", false], [9, "module-botorch.posteriors.gpytorch", false], [9, "module-botorch.posteriors.higher_order", false], [9, "module-botorch.posteriors.multitask", false], [9, "module-botorch.posteriors.posterior", false], [9, "module-botorch.posteriors.posterior_list", false], [9, "module-botorch.posteriors.torch", false], [9, "module-botorch.posteriors.transformed", false], [10, "module-botorch.sampling", false], [10, "module-botorch.sampling.base", false], [10, "module-botorch.sampling.get_sampler", false], [10, "module-botorch.sampling.index_sampler", false], [10, "module-botorch.sampling.list_sampler", false], [10, "module-botorch.sampling.normal", false], [10, "module-botorch.sampling.pairwise_samplers", false], [10, "module-botorch.sampling.pathwise.features.generators", false], [10, "module-botorch.sampling.pathwise.features.maps", false], [10, "module-botorch.sampling.pathwise.paths", false], [10, "module-botorch.sampling.pathwise.posterior_samplers", false], [10, "module-botorch.sampling.pathwise.prior_samplers", false], [10, "module-botorch.sampling.pathwise.update_strategies", false], [10, "module-botorch.sampling.pathwise.utils", false], [10, "module-botorch.sampling.qmc", false], [10, "module-botorch.sampling.stochastic_samplers", false], [11, "module-botorch.settings", false], [12, "module-botorch.test_functions", false], [12, "module-botorch.test_functions.base", false], [12, "module-botorch.test_functions.multi_fidelity", false], [12, "module-botorch.test_functions.multi_objective", false], [12, "module-botorch.test_functions.multi_objective_multi_fidelity", false], [12, "module-botorch.test_functions.sensitivity_analysis", false], [12, "module-botorch.test_functions.synthetic", false], [12, "module-botorch.test_functions.utils", false], [13, "module-botorch.utils", false], [13, "module-botorch.utils.constants", false], [13, "module-botorch.utils.constraints", false], [13, "module-botorch.utils.containers", false], [13, "module-botorch.utils.context_managers", false], [13, "module-botorch.utils.datasets", false], [13, "module-botorch.utils.dispatcher", false], [13, "module-botorch.utils.feasible_volume", false], [13, "module-botorch.utils.gp_sampling", false], [13, "module-botorch.utils.low_rank", false], [13, "module-botorch.utils.multi_objective.box_decompositions.box_decomposition", false], [13, "module-botorch.utils.multi_objective.box_decompositions.box_decomposition_list", false], [13, "module-botorch.utils.multi_objective.box_decompositions.dominated", false], [13, "module-botorch.utils.multi_objective.box_decompositions.non_dominated", false], [13, "module-botorch.utils.multi_objective.box_decompositions.utils", false], [13, "module-botorch.utils.multi_objective.hypervolume", false], [13, "module-botorch.utils.multi_objective.pareto", false], [13, "module-botorch.utils.multi_objective.scalarization", false], [13, "module-botorch.utils.multitask", false], [13, "module-botorch.utils.objective", false], [13, "module-botorch.utils.probability.bvn", false], [13, "module-botorch.utils.probability.lin_ess", false], [13, "module-botorch.utils.probability.linalg", false], [13, "module-botorch.utils.probability.mvnxpb", false], [13, "module-botorch.utils.probability.truncated_multivariate_normal", false], [13, "module-botorch.utils.probability.unified_skew_normal", false], [13, "module-botorch.utils.probability.utils", false], [13, "module-botorch.utils.rounding", false], [13, "module-botorch.utils.safe_math", false], [13, "module-botorch.utils.sampling", false], [13, "module-botorch.utils.test_helpers", false], [13, "module-botorch.utils.testing", false], [13, "module-botorch.utils.torch", false], [13, "module-botorch.utils.transforms", false], [13, "module-botorch.utils.types", false]], "module_rollback_ctx() (in module botorch.utils.context_managers)": [[13, "botorch.utils.context_managers.module_rollback_ctx", false]], "momf (class in botorch.acquisition.multi_objective.multi_fidelity)": [[0, "botorch.acquisition.multi_objective.multi_fidelity.MOMF", false]], "momfbranincurrin (class in botorch.test_functions.multi_objective_multi_fidelity)": [[12, "botorch.test_functions.multi_objective_multi_fidelity.MOMFBraninCurrin", false]], "momfpark (class in botorch.test_functions.multi_objective_multi_fidelity)": [[12, "botorch.test_functions.multi_objective_multi_fidelity.MOMFPark", false]], "morris (class in botorch.test_functions.sensitivity_analysis)": [[12, "botorch.test_functions.sensitivity_analysis.Morris", false]], "mu_p (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.mu_p", false]], "mu_x (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.mu_X", false]], "mul() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.mul", false]], "multilist (class in botorch.utils.multi_objective.hypervolume)": [[13, "botorch.utils.multi_objective.hypervolume.MultiList", false]], "multiobjectiveanalyticacquisitionfunction (class in botorch.acquisition.multi_objective.analytic)": [[0, "botorch.acquisition.multi_objective.analytic.MultiObjectiveAnalyticAcquisitionFunction", false]], "multiobjectivemcacquisitionfunction (class in botorch.acquisition.multi_objective.monte_carlo)": [[0, "botorch.acquisition.multi_objective.monte_carlo.MultiObjectiveMCAcquisitionFunction", false]], "multiobjectivetestproblem (class in botorch.test_functions.base)": [[12, "botorch.test_functions.base.MultiObjectiveTestProblem", false]], "multiobjectivetestproblemtestcasemixin (class in botorch.utils.testing)": [[13, "botorch.utils.testing.MultiObjectiveTestProblemTestCaseMixin", false]], "multioutput_to_batch_mode_transform() (in module botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.multioutput_to_batch_mode_transform", false]], "multioutputexpectation (class in botorch.acquisition.multi_objective.multi_output_risk_measures)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MultiOutputExpectation", false]], "multioutputworstcase (class in botorch.acquisition.multi_objective.multi_output_risk_measures)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MultiOutputWorstCase", false]], "multitaskdataset (class in botorch.utils.datasets)": [[13, "botorch.utils.datasets.MultiTaskDataset", false]], "multitaskgp (class in botorch.models.multitask)": [[7, "botorch.models.multitask.MultiTaskGP", false]], "multitaskgpposterior (class in botorch.posteriors.multitask)": [[9, "botorch.posteriors.multitask.MultitaskGPPosterior", false]], "multitasksaaspyromodel (class in botorch.models.fully_bayesian_multitask)": [[7, "botorch.models.fully_bayesian_multitask.MultitaskSaasPyroModel", false]], "multivariatenormalqmcengine (class in botorch.sampling.qmc)": [[10, "botorch.sampling.qmc.MultivariateNormalQMCEngine", false]], "mvar (class in botorch.acquisition.multi_objective.multi_output_risk_measures)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MVaR", false]], "mvn (botorch.posteriors.gpytorch.gpytorchposterior property)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.mvn", false]], "mvnxpb (class in botorch.utils.probability.mvnxpb)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB", false]], "mvnxpbstate (class in botorch.utils.probability.mvnxpb)": [[13, "botorch.utils.probability.mvnxpb.mvnxpbState", false]], "mw7 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.MW7", false]], "name (botorch.utils.dispatcher.dispatcher attribute)": [[13, "botorch.utils.dispatcher.Dispatcher.name", false]], "narrow_gaussian() (in module botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.narrow_gaussian", false]], "ndarrayoptimizationclosure (class in botorch.optim.closures.core)": [[8, "botorch.optim.closures.core.NdarrayOptimizationClosure", false]], "ndtr() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.ndtr", false]], "negative_log_gradient_sum() (botorch.models.likelihoods.pairwise.pairwiselogitlikelihood method)": [[7, "botorch.models.likelihoods.pairwise.PairwiseLogitLikelihood.negative_log_gradient_sum", false]], "negative_log_gradient_sum() (botorch.models.likelihoods.pairwise.pairwiseprobitlikelihood method)": [[7, "botorch.models.likelihoods.pairwise.PairwiseProbitLikelihood.negative_log_gradient_sum", false]], "negative_log_hessian_sum() (botorch.models.likelihoods.pairwise.pairwiselogitlikelihood method)": [[7, "botorch.models.likelihoods.pairwise.PairwiseLogitLikelihood.negative_log_hessian_sum", false]], "negative_log_hessian_sum() (botorch.models.likelihoods.pairwise.pairwiseprobitlikelihood method)": [[7, "botorch.models.likelihoods.pairwise.PairwiseProbitLikelihood.negative_log_hessian_sum", false]], "nnz_approx() (in module botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.nnz_approx", false]], "node (class in botorch.utils.multi_objective.hypervolume)": [[13, "botorch.utils.multi_objective.hypervolume.Node", false]], "noisyexpectedimprovement (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.NoisyExpectedImprovement", false]], "nondominatedpartitioning (class in botorch.utils.multi_objective.box_decompositions.non_dominated)": [[13, "botorch.utils.multi_objective.box_decompositions.non_dominated.NondominatedPartitioning", false]], "nonlinear_constraint_is_feasible() (in module botorch.optim.parameter_constraints)": [[8, "botorch.optim.parameter_constraints.nonlinear_constraint_is_feasible", false]], "nonlinear_inequality_constraints (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.nonlinear_inequality_constraints", false]], "norm_to_lognorm() (in module botorch.models.transforms.utils)": [[7, "botorch.models.transforms.utils.norm_to_lognorm", false]], "norm_to_lognorm_mean() (in module botorch.models.transforms.utils)": [[7, "botorch.models.transforms.utils.norm_to_lognorm_mean", false]], "norm_to_lognorm_variance() (in module botorch.models.transforms.utils)": [[7, "botorch.models.transforms.utils.norm_to_lognorm_variance", false]], "normalize (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.Normalize", false]], "normalize() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.normalize", false]], "normalize_dense_linear_constraints() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.normalize_dense_linear_constraints", false]], "normalize_indices() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.normalize_indices", false]], "normalize_sparse_linear_constraints() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.normalize_sparse_linear_constraints", false]], "normalmcsampler (class in botorch.sampling.normal)": [[10, "botorch.sampling.normal.NormalMCSampler", false]], "normalqmcengine (class in botorch.sampling.qmc)": [[10, "botorch.sampling.qmc.NormalQMCEngine", false]], "nu() (botorch.acquisition.multi_objective.analytic.expectedhypervolumeimprovement method)": [[0, "botorch.acquisition.multi_objective.analytic.ExpectedHypervolumeImprovement.nu", false]], "num_constraints (botorch.test_functions.base.constrainedbasetestproblem attribute)": [[12, "botorch.test_functions.base.ConstrainedBaseTestProblem.num_constraints", false]], "num_constraints (botorch.test_functions.multi_objective.bnh attribute)": [[12, "botorch.test_functions.multi_objective.BNH.num_constraints", false]], "num_constraints (botorch.test_functions.multi_objective.c2dtlz2 attribute)": [[12, "botorch.test_functions.multi_objective.C2DTLZ2.num_constraints", false]], "num_constraints (botorch.test_functions.multi_objective.constr attribute)": [[12, "botorch.test_functions.multi_objective.CONSTR.num_constraints", false]], "num_constraints (botorch.test_functions.multi_objective.constrainedbranincurrin attribute)": [[12, "botorch.test_functions.multi_objective.ConstrainedBraninCurrin.num_constraints", false]], "num_constraints (botorch.test_functions.multi_objective.discbrake attribute)": [[12, "botorch.test_functions.multi_objective.DiscBrake.num_constraints", false]], "num_constraints (botorch.test_functions.multi_objective.mw7 attribute)": [[12, "botorch.test_functions.multi_objective.MW7.num_constraints", false]], "num_constraints (botorch.test_functions.multi_objective.osy attribute)": [[12, "botorch.test_functions.multi_objective.OSY.num_constraints", false]], "num_constraints (botorch.test_functions.multi_objective.srn attribute)": [[12, "botorch.test_functions.multi_objective.SRN.num_constraints", false]], "num_constraints (botorch.test_functions.multi_objective.weldedbeam attribute)": [[12, "botorch.test_functions.multi_objective.WeldedBeam.num_constraints", false]], "num_constraints (botorch.test_functions.synthetic.constrainedgramacy attribute)": [[12, "botorch.test_functions.synthetic.ConstrainedGramacy.num_constraints", false]], "num_constraints (botorch.test_functions.synthetic.constrainedhartmann attribute)": [[12, "botorch.test_functions.synthetic.ConstrainedHartmann.num_constraints", false]], "num_constraints (botorch.test_functions.synthetic.constrainedhartmannsmooth attribute)": [[12, "botorch.test_functions.synthetic.ConstrainedHartmannSmooth.num_constraints", false]], "num_constraints (botorch.test_functions.synthetic.pressurevessel attribute)": [[12, "botorch.test_functions.synthetic.PressureVessel.num_constraints", false]], "num_constraints (botorch.test_functions.synthetic.speedreducer attribute)": [[12, "botorch.test_functions.synthetic.SpeedReducer.num_constraints", false]], "num_constraints (botorch.test_functions.synthetic.tensioncompressionstring attribute)": [[12, "botorch.test_functions.synthetic.TensionCompressionString.num_constraints", false]], "num_constraints (botorch.test_functions.synthetic.weldedbeamso attribute)": [[12, "botorch.test_functions.synthetic.WeldedBeamSO.num_constraints", false]], "num_mcmc_samples (botorch.models.fully_bayesian.saasfullybayesiansingletaskgp property)": [[7, "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP.num_mcmc_samples", false]], "num_mcmc_samples (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp property)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.num_mcmc_samples", false]], "num_objectives (botorch.test_functions.base.multiobjectivetestproblem attribute)": [[12, "botorch.test_functions.base.MultiObjectiveTestProblem.num_objectives", false]], "num_objectives (botorch.test_functions.multi_objective.bnh attribute)": [[12, "botorch.test_functions.multi_objective.BNH.num_objectives", false]], "num_objectives (botorch.test_functions.multi_objective.branincurrin attribute)": [[12, "botorch.test_functions.multi_objective.BraninCurrin.num_objectives", false]], "num_objectives (botorch.test_functions.multi_objective.carsideimpact attribute)": [[12, "botorch.test_functions.multi_objective.CarSideImpact.num_objectives", false]], "num_objectives (botorch.test_functions.multi_objective.constr attribute)": [[12, "botorch.test_functions.multi_objective.CONSTR.num_objectives", false]], "num_objectives (botorch.test_functions.multi_objective.constrainedbranincurrin attribute)": [[12, "botorch.test_functions.multi_objective.ConstrainedBraninCurrin.num_objectives", false]], "num_objectives (botorch.test_functions.multi_objective.dh attribute)": [[12, "botorch.test_functions.multi_objective.DH.num_objectives", false]], "num_objectives (botorch.test_functions.multi_objective.discbrake attribute)": [[12, "botorch.test_functions.multi_objective.DiscBrake.num_objectives", false]], "num_objectives (botorch.test_functions.multi_objective.mw7 attribute)": [[12, "botorch.test_functions.multi_objective.MW7.num_objectives", false]], "num_objectives (botorch.test_functions.multi_objective.osy attribute)": [[12, "botorch.test_functions.multi_objective.OSY.num_objectives", false]], "num_objectives (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.num_objectives", false]], "num_objectives (botorch.test_functions.multi_objective.srn attribute)": [[12, "botorch.test_functions.multi_objective.SRN.num_objectives", false]], "num_objectives (botorch.test_functions.multi_objective.toyrobust attribute)": [[12, "botorch.test_functions.multi_objective.ToyRobust.num_objectives", false]], "num_objectives (botorch.test_functions.multi_objective.vehiclesafety attribute)": [[12, "botorch.test_functions.multi_objective.VehicleSafety.num_objectives", false]], "num_objectives (botorch.test_functions.multi_objective.weldedbeam attribute)": [[12, "botorch.test_functions.multi_objective.WeldedBeam.num_objectives", false]], "num_objectives (botorch.test_functions.multi_objective_multi_fidelity.momfbranincurrin attribute)": [[12, "botorch.test_functions.multi_objective_multi_fidelity.MOMFBraninCurrin.num_objectives", false]], "num_objectives (botorch.test_functions.multi_objective_multi_fidelity.momfpark attribute)": [[12, "botorch.test_functions.multi_objective_multi_fidelity.MOMFPark.num_objectives", false]], "num_objectives (botorch.test_functions.synthetic.constrainedgramacy attribute)": [[12, "botorch.test_functions.synthetic.ConstrainedGramacy.num_objectives", false]], "num_objectives (botorch.test_functions.synthetic.synthetictestfunction attribute)": [[12, "botorch.test_functions.synthetic.SyntheticTestFunction.num_objectives", false]], "num_outputs (botorch.models.approximate_gp.approximategpytorchmodel property)": [[7, "botorch.models.approximate_gp.ApproximateGPyTorchModel.num_outputs", false]], "num_outputs (botorch.models.model.model property)": [[7, "botorch.models.model.Model.num_outputs", false]], "num_outputs (botorch.models.model.modellist property)": [[7, "botorch.models.model.ModelList.num_outputs", false]], "num_outputs (botorch.models.pairwise_gp.pairwisegp property)": [[7, "botorch.models.pairwise_gp.PairwiseGP.num_outputs", false]], "num_outputs (botorch.sampling.pathwise.features.maps.featuremap attribute)": [[10, "botorch.sampling.pathwise.features.maps.FeatureMap.num_outputs", false]], "num_outputs (botorch.sampling.pathwise.features.maps.kernelevaluationmap property)": [[10, "botorch.sampling.pathwise.features.maps.KernelEvaluationMap.num_outputs", false]], "num_outputs (botorch.sampling.pathwise.features.maps.kernelfeaturemap property)": [[10, "botorch.sampling.pathwise.features.maps.KernelFeatureMap.num_outputs", false]], "num_outputs (botorch.utils.testing.mockmodel property)": [[13, "botorch.utils.testing.MockModel.num_outputs", false]], "num_restarts (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.num_restarts", false]], "num_steps (botorch.optim.homotopy.fixedhomotopyschedule property)": [[8, "botorch.optim.homotopy.FixedHomotopySchedule.num_steps", false]], "num_steps (botorch.optim.homotopy.homotopyschedule property)": [[8, "botorch.optim.homotopy.HomotopySchedule.num_steps", false]], "numericswarning": [[2, "botorch.exceptions.warnings.NumericsWarning", false]], "observed_y (botorch.cross_validation.cvresults attribute)": [[1, "botorch.cross_validation.CVResults.observed_Y", false]], "observed_yvar (botorch.cross_validation.cvresults attribute)": [[1, "botorch.cross_validation.CVResults.observed_Yvar", false]], "onehotargmaxste (class in botorch.utils.rounding)": [[13, "botorch.utils.rounding.OneHotArgmaxSTE", false]], "onehottonumeric (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.OneHotToNumeric", false]], "optimal_sobol_indicies() (botorch.test_functions.sensitivity_analysis.gsobol method)": [[12, "botorch.test_functions.sensitivity_analysis.Gsobol.optimal_sobol_indicies", false]], "optimal_value (botorch.test_functions.synthetic.synthetictestfunction property)": [[12, "botorch.test_functions.synthetic.SyntheticTestFunction.optimal_value", false]], "optimizationresult (class in botorch.optim.core)": [[8, "botorch.optim.core.OptimizationResult", false]], "optimizationstatus (class in botorch.optim.core)": [[8, "botorch.optim.core.OptimizationStatus", false]], "optimizationtimeouterror": [[2, "botorch.exceptions.errors.OptimizationTimeoutError", false]], "optimizationwarning": [[2, "botorch.exceptions.warnings.OptimizationWarning", false]], "optimize_acqf() (in module botorch.optim.optimize)": [[8, "botorch.optim.optimize.optimize_acqf", false]], "optimize_acqf_cyclic() (in module botorch.optim.optimize)": [[8, "botorch.optim.optimize.optimize_acqf_cyclic", false]], "optimize_acqf_discrete() (in module botorch.optim.optimize)": [[8, "botorch.optim.optimize.optimize_acqf_discrete", false]], "optimize_acqf_discrete_local_search() (in module botorch.optim.optimize)": [[8, "botorch.optim.optimize.optimize_acqf_discrete_local_search", false]], "optimize_acqf_homotopy() (in module botorch.optim.optimize_homotopy)": [[8, "botorch.optim.optimize_homotopy.optimize_acqf_homotopy", false]], "optimize_acqf_list() (in module botorch.optim.optimize)": [[8, "botorch.optim.optimize.optimize_acqf_list", false]], "optimize_acqf_mixed() (in module botorch.optim.optimize)": [[8, "botorch.optim.optimize.optimize_acqf_mixed", false]], "optimize_objective() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.optimize_objective", false]], "optimize_posterior_samples() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.optimize_posterior_samples", false]], "optimizeacqfinputs (class in botorch.optim.optimize)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs", false]], "optimizers (botorch.test_functions.synthetic.hartmann property)": [[12, "botorch.test_functions.synthetic.Hartmann.optimizers", false]], "optimizers (botorch.test_functions.synthetic.michalewicz property)": [[12, "botorch.test_functions.synthetic.Michalewicz.optimizers", false]], "options (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.options", false]], "orthogonaladditivekernel (class in botorch.models.kernels.orthogonal_additive_kernel)": [[7, "botorch.models.kernels.orthogonal_additive_kernel.OrthogonalAdditiveKernel", false]], "osy (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.OSY", false]], "outcomeuntransformer (class in botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.OutcomeUntransformer", false]], "output_transform (botorch.sampling.pathwise.features.maps.featuremap attribute)": [[10, "botorch.sampling.pathwise.features.maps.FeatureMap.output_transform", false]], "output_transform (botorch.sampling.pathwise.utils.transformedmodulemixin attribute)": [[10, "botorch.sampling.pathwise.utils.TransformedModuleMixin.output_transform", false]], "outputscaletransform (class in botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.OutputscaleTransform", false]], "p() (botorch.models.likelihoods.pairwise.pairwiselogitlikelihood method)": [[7, "botorch.models.likelihoods.pairwise.PairwiseLogitLikelihood.p", false]], "p() (botorch.models.likelihoods.pairwise.pairwiseprobitlikelihood method)": [[7, "botorch.models.likelihoods.pairwise.PairwiseProbitLikelihood.p", false]], "pairwisebayesianactivelearningbydisagreement (class in botorch.acquisition.preference)": [[0, "botorch.acquisition.preference.PairwiseBayesianActiveLearningByDisagreement", false]], "pairwisegp (class in botorch.models.pairwise_gp)": [[7, "botorch.models.pairwise_gp.PairwiseGP", false]], "pairwiseiidnormalsampler (class in botorch.sampling.pairwise_samplers)": [[10, "botorch.sampling.pairwise_samplers.PairwiseIIDNormalSampler", false]], "pairwiselaplacemarginalloglikelihood (class in botorch.models.pairwise_gp)": [[7, "botorch.models.pairwise_gp.PairwiseLaplaceMarginalLogLikelihood", false]], "pairwiselogitlikelihood (class in botorch.models.likelihoods.pairwise)": [[7, "botorch.models.likelihoods.pairwise.PairwiseLogitLikelihood", false]], "pairwisemcposteriorvariance (class in botorch.acquisition.active_learning)": [[0, "botorch.acquisition.active_learning.PairwiseMCPosteriorVariance", false]], "pairwisemcsampler (class in botorch.sampling.pairwise_samplers)": [[10, "botorch.sampling.pairwise_samplers.PairwiseMCSampler", false]], "pairwiseprobitlikelihood (class in botorch.models.likelihoods.pairwise)": [[7, "botorch.models.likelihoods.pairwise.PairwiseProbitLikelihood", false]], "pairwisesobolqmcnormalsampler (class in botorch.sampling.pairwise_samplers)": [[10, "botorch.sampling.pairwise_samplers.PairwiseSobolQMCNormalSampler", false]], "parameter (botorch.optim.homotopy.homotopyparameter attribute)": [[8, "botorch.optim.homotopy.HomotopyParameter.parameter", false]], "parameter_rollback_ctx() (in module botorch.utils.context_managers)": [[13, "botorch.utils.context_managers.parameter_rollback_ctx", false]], "pareto_y (botorch.utils.multi_objective.box_decompositions.box_decomposition_list.boxdecompositionlist property)": [[13, "botorch.utils.multi_objective.box_decompositions.box_decomposition_list.BoxDecompositionList.pareto_Y", false]], "pathdict (class in botorch.sampling.pathwise.paths)": [[10, "botorch.sampling.pathwise.paths.PathDict", false]], "pathlist (class in botorch.sampling.pathwise.paths)": [[10, "botorch.sampling.pathwise.paths.PathList", false]], "penalizedacquisitionfunction (class in botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.PenalizedAcquisitionFunction", false]], "penalizedmcobjective (class in botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.PenalizedMCObjective", false]], "penicillin (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.Penicillin", false]], "penicillin_vectorized() (botorch.test_functions.multi_objective.penicillin class method)": [[12, "botorch.test_functions.multi_objective.Penicillin.penicillin_vectorized", false]], "perm (botorch.utils.probability.linalg.pivotedcholesky attribute)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.perm", false]], "perm (botorch.utils.probability.mvnxpb.mvnxpbstate attribute)": [[13, "botorch.utils.probability.mvnxpb.mvnxpbState.perm", false]], "phi() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.phi", false]], "piv_chol (botorch.utils.probability.mvnxpb.mvnxpbstate attribute)": [[13, "botorch.utils.probability.mvnxpb.mvnxpbState.piv_chol", false]], "pivot_() (botorch.utils.probability.linalg.pivotedcholesky method)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.pivot_", false]], "pivot_() (botorch.utils.probability.mvnxpb.mvnxpb method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.pivot_", false]], "pivotedcholesky (class in botorch.utils.probability.linalg)": [[13, "botorch.utils.probability.linalg.PivotedCholesky", false]], "plug_ins (botorch.utils.probability.mvnxpb.mvnxpbstate attribute)": [[13, "botorch.utils.probability.mvnxpb.mvnxpbState.plug_ins", false]], "pop() (botorch.utils.torch.bufferdict method)": [[13, "botorch.utils.torch.BufferDict.pop", false]], "post_processing_func (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.post_processing_func", false]], "posterior (botorch.cross_validation.cvresults attribute)": [[1, "botorch.cross_validation.CVResults.posterior", false]], "posterior() (botorch.models.approximate_gp.approximategpytorchmodel method)": [[7, "botorch.models.approximate_gp.ApproximateGPyTorchModel.posterior", false]], "posterior() (botorch.models.fully_bayesian.saasfullybayesiansingletaskgp method)": [[7, "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP.posterior", false]], "posterior() (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp method)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.posterior", false]], "posterior() (botorch.models.higher_order_gp.higherordergp method)": [[7, "botorch.models.higher_order_gp.HigherOrderGP.posterior", false]], "posterior() (botorch.models.model.fantasizemixin method)": [[7, "botorch.models.model.FantasizeMixin.posterior", false]], "posterior() (botorch.models.model.model method)": [[7, "botorch.models.model.Model.posterior", false]], "posterior() (botorch.models.model.modellist method)": [[7, "botorch.models.model.ModelList.posterior", false]], "posterior() (botorch.models.multitask.kroneckermultitaskgp method)": [[7, "botorch.models.multitask.KroneckerMultiTaskGP.posterior", false]], "posterior() (botorch.models.pairwise_gp.pairwisegp method)": [[7, "botorch.models.pairwise_gp.PairwiseGP.posterior", false]], "posterior() (botorch.utils.testing.mockmodel method)": [[13, "botorch.utils.testing.MockModel.posterior", false]], "posteriorlist (class in botorch.posteriors.posterior_list)": [[9, "botorch.posteriors.posterior_list.PosteriorList", false]], "posteriormean (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.PosteriorMean", false]], "posteriormeanmodel (class in botorch.models.deterministic)": [[7, "botorch.models.deterministic.PosteriorMeanModel", false]], "posteriorstandarddeviation (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.PosteriorStandardDeviation", false]], "postprocess_mcmc_samples() (botorch.models.fully_bayesian.saaspyromodel method)": [[7, "botorch.models.fully_bayesian.SaasPyroModel.postprocess_mcmc_samples", false]], "powell (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Powell", false]], "power (class in botorch.models.transforms.outcome)": [[7, "botorch.models.transforms.outcome.Power", false]], "predictive_mean_cache (botorch.models.multitask.kroneckermultitaskgp property)": [[7, "botorch.models.multitask.KroneckerMultiTaskGP.predictive_mean_cache", false]], "preprocess_transform() (botorch.models.transforms.input.chainedinputtransform method)": [[7, "botorch.models.transforms.input.ChainedInputTransform.preprocess_transform", false]], "pressurevessel (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.PressureVessel", false]], "priorguidedacquisitionfunction (class in botorch.acquisition.prior_guided)": [[0, "botorch.acquisition.prior_guided.PriorGuidedAcquisitionFunction", false]], "probabilityofimprovement (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.ProbabilityOfImprovement", false]], "project_to_sample_points() (in module botorch.acquisition.utils)": [[0, "botorch.acquisition.utils.project_to_sample_points", false]], "project_to_target_fidelity() (in module botorch.acquisition.utils)": [[0, "botorch.acquisition.utils.project_to_target_fidelity", false]], "projectedacquisitionfunction (class in botorch.acquisition.knowledge_gradient)": [[0, "botorch.acquisition.knowledge_gradient.ProjectedAcquisitionFunction", false]], "propagate_grads (class in botorch.settings)": [[11, "botorch.settings.propagate_grads", false]], "proximalacquisitionfunction (class in botorch.acquisition.proximal)": [[0, "botorch.acquisition.proximal.ProximalAcquisitionFunction", false]], "prune_candidates() (in module botorch.optim.optimize_homotopy)": [[8, "botorch.optim.optimize_homotopy.prune_candidates", false]], "prune_inferior_points() (in module botorch.acquisition.utils)": [[0, "botorch.acquisition.utils.prune_inferior_points", false]], "prune_inferior_points_multi_objective() (in module botorch.acquisition.multi_objective.utils)": [[0, "botorch.acquisition.multi_objective.utils.prune_inferior_points_multi_objective", false]], "psi() (botorch.acquisition.multi_objective.analytic.expectedhypervolumeimprovement method)": [[0, "botorch.acquisition.multi_objective.analytic.ExpectedHypervolumeImprovement.psi", false]], "q (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.q", false]], "qanalyticprobabilityofimprovement (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.qAnalyticProbabilityOfImprovement", false]], "qexpectedhypervolumeimprovement (class in botorch.acquisition.multi_objective.monte_carlo)": [[0, "botorch.acquisition.multi_objective.monte_carlo.qExpectedHypervolumeImprovement", false]], "qexpectedimprovement (class in botorch.acquisition.monte_carlo)": [[0, "botorch.acquisition.monte_carlo.qExpectedImprovement", false]], "qexpectedutilityofbestoption (class in botorch.acquisition.preference)": [[0, "botorch.acquisition.preference.qExpectedUtilityOfBestOption", false]], "qhypervolumeknowledgegradient (class in botorch.acquisition.multi_objective.hypervolume_knowledge_gradient)": [[0, "botorch.acquisition.multi_objective.hypervolume_knowledge_gradient.qHypervolumeKnowledgeGradient", false]], "qjointentropysearch (class in botorch.acquisition.joint_entropy_search)": [[0, "botorch.acquisition.joint_entropy_search.qJointEntropySearch", false]], "qknowledgegradient (class in botorch.acquisition.knowledge_gradient)": [[0, "botorch.acquisition.knowledge_gradient.qKnowledgeGradient", false]], "qlogexpectedhypervolumeimprovement (class in botorch.acquisition.multi_objective.logei)": [[0, "botorch.acquisition.multi_objective.logei.qLogExpectedHypervolumeImprovement", false]], "qlogexpectedimprovement (class in botorch.acquisition.logei)": [[0, "botorch.acquisition.logei.qLogExpectedImprovement", false]], "qlognoisyexpectedimprovement (class in botorch.acquisition.logei)": [[0, "botorch.acquisition.logei.qLogNoisyExpectedImprovement", false]], "qlognparego (class in botorch.acquisition.multi_objective.parego)": [[0, "botorch.acquisition.multi_objective.parego.qLogNParEGO", false]], "qlowerboundmaxvalueentropy (class in botorch.acquisition.max_value_entropy_search)": [[0, "botorch.acquisition.max_value_entropy_search.qLowerBoundMaxValueEntropy", false]], "qlowerboundmultiobjectivejointentropysearch (class in botorch.acquisition.multi_objective.joint_entropy_search)": [[0, "botorch.acquisition.multi_objective.joint_entropy_search.qLowerBoundMultiObjectiveJointEntropySearch", false]], "qlowerboundmultiobjectivemaxvalueentropysearch (class in botorch.acquisition.multi_objective.max_value_entropy_search)": [[0, "botorch.acquisition.multi_objective.max_value_entropy_search.qLowerBoundMultiObjectiveMaxValueEntropySearch", false]], "qmaxvalueentropy (class in botorch.acquisition.max_value_entropy_search)": [[0, "botorch.acquisition.max_value_entropy_search.qMaxValueEntropy", false]], "qmultifidelityhypervolumeknowledgegradient (class in botorch.acquisition.multi_objective.hypervolume_knowledge_gradient)": [[0, "botorch.acquisition.multi_objective.hypervolume_knowledge_gradient.qMultiFidelityHypervolumeKnowledgeGradient", false]], "qmultifidelityknowledgegradient (class in botorch.acquisition.knowledge_gradient)": [[0, "botorch.acquisition.knowledge_gradient.qMultiFidelityKnowledgeGradient", false]], "qmultifidelitylowerboundmaxvalueentropy (class in botorch.acquisition.max_value_entropy_search)": [[0, "botorch.acquisition.max_value_entropy_search.qMultiFidelityLowerBoundMaxValueEntropy", false]], "qmultifidelitymaxvalueentropy (class in botorch.acquisition.max_value_entropy_search)": [[0, "botorch.acquisition.max_value_entropy_search.qMultiFidelityMaxValueEntropy", false]], "qmultiobjectivemaxvalueentropy (class in botorch.acquisition.multi_objective.max_value_entropy_search)": [[0, "botorch.acquisition.multi_objective.max_value_entropy_search.qMultiObjectiveMaxValueEntropy", false]], "qmultiobjectivepredictiveentropysearch (class in botorch.acquisition.multi_objective.predictive_entropy_search)": [[0, "botorch.acquisition.multi_objective.predictive_entropy_search.qMultiObjectivePredictiveEntropySearch", false]], "qmultisteplookahead (class in botorch.acquisition.multi_step_lookahead)": [[0, "botorch.acquisition.multi_step_lookahead.qMultiStepLookahead", false]], "qnegintegratedposteriorvariance (class in botorch.acquisition.active_learning)": [[0, "botorch.acquisition.active_learning.qNegIntegratedPosteriorVariance", false]], "qnoisyexpectedimprovement (class in botorch.acquisition.monte_carlo)": [[0, "botorch.acquisition.monte_carlo.qNoisyExpectedImprovement", false]], "qpredictiveentropysearch (class in botorch.acquisition.predictive_entropy_search)": [[0, "botorch.acquisition.predictive_entropy_search.qPredictiveEntropySearch", false]], "qprobabilityofimprovement (class in botorch.acquisition.monte_carlo)": [[0, "botorch.acquisition.monte_carlo.qProbabilityOfImprovement", false]], "qsimpleregret (class in botorch.acquisition.monte_carlo)": [[0, "botorch.acquisition.monte_carlo.qSimpleRegret", false]], "qualityfunction (class in botorch.models.utils.inducing_point_allocators)": [[7, "botorch.models.utils.inducing_point_allocators.QualityFunction", false]], "quantile() (botorch.posteriors.fully_bayesian.gaussianmixtureposterior method)": [[9, "botorch.posteriors.fully_bayesian.GaussianMixturePosterior.quantile", false]], "quantile() (botorch.posteriors.gpytorch.gpytorchposterior method)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.quantile", false]], "quantile() (botorch.posteriors.torch.torchposterior method)": [[9, "botorch.posteriors.torch.TorchPosterior.quantile", false]], "qupperconfidencebound (class in botorch.acquisition.monte_carlo)": [[0, "botorch.acquisition.monte_carlo.qUpperConfidenceBound", false]], "r (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.R", false]], "random_search_optimizer() (in module botorch.acquisition.multi_objective.utils)": [[0, "botorch.acquisition.multi_objective.utils.random_search_optimizer", false]], "randomfourierfeatures (class in botorch.utils.gp_sampling)": [[13, "botorch.utils.gp_sampling.RandomFourierFeatures", false]], "ranges (botorch.models.transforms.input.normalize property)": [[7, "botorch.models.transforms.input.Normalize.ranges", false]], "rankingdataset (class in botorch.utils.datasets)": [[13, "botorch.utils.datasets.RankingDataset", false]], "rastrigin (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Rastrigin", false]], "raw_samples (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.raw_samples", false]], "ref_point (botorch.utils.multi_objective.box_decompositions.box_decomposition_list.boxdecompositionlist property)": [[13, "botorch.utils.multi_objective.box_decompositions.box_decomposition_list.BoxDecompositionList.ref_point", false]], "ref_point (botorch.utils.multi_objective.hypervolume.hypervolume property)": [[13, "botorch.utils.multi_objective.hypervolume.Hypervolume.ref_point", false]], "reinsert() (botorch.utils.multi_objective.hypervolume.multilist method)": [[13, "botorch.utils.multi_objective.hypervolume.MultiList.reinsert", false]], "remove() (botorch.utils.multi_objective.hypervolume.multilist method)": [[13, "botorch.utils.multi_objective.hypervolume.MultiList.remove", false]], "repeat_to_match_aug_dim() (in module botorch.acquisition.utils)": [[0, "botorch.acquisition.utils.repeat_to_match_aug_dim", false]], "reset() (botorch.optim.homotopy.homotopy method)": [[8, "botorch.optim.homotopy.Homotopy.reset", false]], "reshape_and_detach() (in module botorch.models.fully_bayesian)": [[7, "botorch.models.fully_bayesian.reshape_and_detach", false]], "restart() (botorch.optim.homotopy.fixedhomotopyschedule method)": [[8, "botorch.optim.homotopy.FixedHomotopySchedule.restart", false]], "restart() (botorch.optim.homotopy.homotopy method)": [[8, "botorch.optim.homotopy.Homotopy.restart", false]], "restart() (botorch.optim.homotopy.homotopyschedule method)": [[8, "botorch.optim.homotopy.HomotopySchedule.restart", false]], "retry_on_optimization_warning (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.retry_on_optimization_warning", false]], "return_best_only (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.return_best_only", false]], "return_full_tree (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.return_full_tree", false]], "rosenbrock (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Rosenbrock", false]], "round (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.Round", false]], "round_nearest() (in module botorch.test_functions.utils)": [[12, "botorch.test_functions.utils.round_nearest", false]], "roundste (class in botorch.utils.rounding)": [[13, "botorch.utils.rounding.RoundSTE", false]], "rsample() (botorch.posteriors.ensemble.ensembleposterior method)": [[9, "botorch.posteriors.ensemble.EnsemblePosterior.rsample", false]], "rsample() (botorch.posteriors.gpytorch.gpytorchposterior method)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.rsample", false]], "rsample() (botorch.posteriors.higher_order.higherordergpposterior method)": [[9, "botorch.posteriors.higher_order.HigherOrderGPPosterior.rsample", false]], "rsample() (botorch.posteriors.multitask.multitaskgpposterior method)": [[9, "botorch.posteriors.multitask.MultitaskGPPosterior.rsample", false]], "rsample() (botorch.posteriors.posterior_list.posteriorlist method)": [[9, "botorch.posteriors.posterior_list.PosteriorList.rsample", false]], "rsample() (botorch.posteriors.torch.torchposterior method)": [[9, "botorch.posteriors.torch.TorchPosterior.rsample", false]], "rsample() (botorch.posteriors.transformed.transformedposterior method)": [[9, "botorch.posteriors.transformed.TransformedPosterior.rsample", false]], "rsample() (botorch.utils.probability.truncated_multivariate_normal.truncatedmultivariatenormal method)": [[13, "botorch.utils.probability.truncated_multivariate_normal.TruncatedMultivariateNormal.rsample", false]], "rsample() (botorch.utils.probability.unified_skew_normal.unifiedskewnormal method)": [[13, "botorch.utils.probability.unified_skew_normal.UnifiedSkewNormal.rsample", false]], "rsample() (botorch.utils.testing.mockposterior method)": [[13, "botorch.utils.testing.MockPosterior.rsample", false]], "rsample_from_base_samples() (botorch.posteriors.ensemble.ensembleposterior method)": [[9, "botorch.posteriors.ensemble.EnsemblePosterior.rsample_from_base_samples", false]], "rsample_from_base_samples() (botorch.posteriors.gpytorch.gpytorchposterior method)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.rsample_from_base_samples", false]], "rsample_from_base_samples() (botorch.posteriors.higher_order.higherordergpposterior method)": [[9, "botorch.posteriors.higher_order.HigherOrderGPPosterior.rsample_from_base_samples", false]], "rsample_from_base_samples() (botorch.posteriors.multitask.multitaskgpposterior method)": [[9, "botorch.posteriors.multitask.MultitaskGPPosterior.rsample_from_base_samples", false]], "rsample_from_base_samples() (botorch.posteriors.transformed.transformedposterior method)": [[9, "botorch.posteriors.transformed.TransformedPosterior.rsample_from_base_samples", false]], "rsample_from_base_samples() (botorch.utils.testing.mockposterior method)": [[13, "botorch.utils.testing.MockPosterior.rsample_from_base_samples", false]], "running (botorch.optim.core.optimizationstatus attribute)": [[8, "botorch.optim.core.OptimizationStatus.RUNNING", false]], "runtime (botorch.optim.core.optimizationresult attribute)": [[8, "botorch.optim.core.OptimizationResult.runtime", false]], "saasfullybayesianmultitaskgp (class in botorch.models.fully_bayesian_multitask)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP", false]], "saasfullybayesiansingletaskgp (class in botorch.models.fully_bayesian)": [[7, "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP", false]], "saaspyromodel (class in botorch.models.fully_bayesian)": [[7, "botorch.models.fully_bayesian.SaasPyroModel", false]], "sacgp (class in botorch.models.contextual)": [[7, "botorch.models.contextual.SACGP", false]], "sackernel (class in botorch.models.kernels.contextual_sac)": [[7, "botorch.models.kernels.contextual_sac.SACKernel", false]], "sample() (botorch.models.fully_bayesian.saaspyromodel method)": [[7, "botorch.models.fully_bayesian.SaasPyroModel.sample", false]], "sample() (botorch.models.fully_bayesian_multitask.multitasksaaspyromodel method)": [[7, "botorch.models.fully_bayesian_multitask.MultitaskSaasPyroModel.sample", false]], "sample_all_priors() (in module botorch.optim.utils.model_utils)": [[8, "botorch.optim.utils.model_utils.sample_all_priors", false]], "sample_cached_cholesky() (in module botorch.utils.low_rank)": [[13, "botorch.utils.low_rank.sample_cached_cholesky", false]], "sample_hypersphere() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.sample_hypersphere", false]], "sample_latent_features() (botorch.models.fully_bayesian_multitask.multitasksaaspyromodel method)": [[7, "botorch.models.fully_bayesian_multitask.MultitaskSaasPyroModel.sample_latent_features", false]], "sample_lengthscale() (botorch.models.fully_bayesian.saaspyromodel method)": [[7, "botorch.models.fully_bayesian.SaasPyroModel.sample_lengthscale", false]], "sample_mean() (botorch.models.fully_bayesian.saaspyromodel method)": [[7, "botorch.models.fully_bayesian.SaasPyroModel.sample_mean", false]], "sample_noise() (botorch.models.fully_bayesian.saaspyromodel method)": [[7, "botorch.models.fully_bayesian.SaasPyroModel.sample_noise", false]], "sample_optimal_points() (in module botorch.acquisition.multi_objective.utils)": [[0, "botorch.acquisition.multi_objective.utils.sample_optimal_points", false]], "sample_outputscale() (botorch.models.fully_bayesian.saaspyromodel method)": [[7, "botorch.models.fully_bayesian.SaasPyroModel.sample_outputscale", false]], "sample_perturbed_subset_dims() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.sample_perturbed_subset_dims", false]], "sample_points_around_best() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.sample_points_around_best", false]], "sample_polytope() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.sample_polytope", false]], "sample_q_batches_from_polytope() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.sample_q_batches_from_polytope", false]], "sample_simplex() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.sample_simplex", false]], "sample_task_lengthscale() (botorch.models.fully_bayesian_multitask.multitasksaaspyromodel method)": [[7, "botorch.models.fully_bayesian_multitask.MultitaskSaasPyroModel.sample_task_lengthscale", false]], "sample_truncated_normal_perturbations() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.sample_truncated_normal_perturbations", false]], "samplepath (class in botorch.sampling.pathwise.paths)": [[10, "botorch.sampling.pathwise.paths.SamplePath", false]], "sampler (botorch.utils.probability.truncated_multivariate_normal.truncatedmultivariatenormal property)": [[13, "botorch.utils.probability.truncated_multivariate_normal.TruncatedMultivariateNormal.sampler", false]], "samplereducingmcacquisitionfunction (class in botorch.acquisition.monte_carlo)": [[0, "botorch.acquisition.monte_carlo.SampleReducingMCAcquisitionFunction", false]], "samplereductionprotocol (class in botorch.acquisition.monte_carlo)": [[0, "botorch.acquisition.monte_carlo.SampleReductionProtocol", false]], "samplingwarning": [[2, "botorch.exceptions.warnings.SamplingWarning", false]], "scalarize (botorch.acquisition.objective.scalarizedposteriortransform attribute)": [[0, "botorch.acquisition.objective.ScalarizedPosteriorTransform.scalarize", false]], "scalarize_posterior() (in module botorch.posteriors.gpytorch)": [[9, "botorch.posteriors.gpytorch.scalarize_posterior", false]], "scalarize_posterior_gpytorch() (in module botorch.posteriors.gpytorch)": [[9, "botorch.posteriors.gpytorch.scalarize_posterior_gpytorch", false]], "scalarizedposteriormean (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.ScalarizedPosteriorMean", false]], "scalarizedposteriortransform (class in botorch.acquisition.objective)": [[0, "botorch.acquisition.objective.ScalarizedPosteriorTransform", false]], "scale_tril (botorch.utils.probability.unified_skew_normal.unifiedskewnormal property)": [[13, "botorch.utils.probability.unified_skew_normal.UnifiedSkewNormal.scale_tril", false]], "schedule (botorch.optim.homotopy.homotopyparameter attribute)": [[8, "botorch.optim.homotopy.HomotopyParameter.schedule", false]], "scipy_minimize() (in module botorch.optim.core)": [[8, "botorch.optim.core.scipy_minimize", false]], "select_pivot() (botorch.utils.probability.mvnxpb.mvnxpb method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.select_pivot", false]], "separate_mtmvn() (in module botorch.utils.multitask)": [[13, "botorch.utils.multitask.separate_mtmvn", false]], "sequential (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.sequential", false]], "set_attribute() (in module botorch.models.converter)": [[7, "botorch.models.converter.set_attribute", false]], "set_baseline_y() (botorch.acquisition.multi_objective.multi_output_risk_measures.mars method)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MARS.set_baseline_Y", false]], "set_inputs() (botorch.models.fully_bayesian.saaspyromodel method)": [[7, "botorch.models.fully_bayesian.SaasPyroModel.set_inputs", false]], "set_inputs() (botorch.models.fully_bayesian_multitask.multitasksaaspyromodel method)": [[7, "botorch.models.fully_bayesian_multitask.MultitaskSaasPyroModel.set_inputs", false]], "set_tensors_from_ndarray_1d() (in module botorch.optim.utils.numpy_utils)": [[8, "botorch.optim.utils.numpy_utils.set_tensors_from_ndarray_1d", false]], "set_train_data() (botorch.models.pairwise_gp.pairwisegp method)": [[7, "botorch.models.pairwise_gp.PairwiseGP.set_train_data", false]], "set_x_pending() (botorch.acquisition.analytic.analyticacquisitionfunction method)": [[0, "botorch.acquisition.analytic.AnalyticAcquisitionFunction.set_X_pending", false]], "set_x_pending() (botorch.acquisition.decoupled.decoupledacquisitionfunction method)": [[0, "botorch.acquisition.decoupled.DecoupledAcquisitionFunction.set_X_pending", false]], "set_x_pending() (botorch.acquisition.max_value_entropy_search.qmaxvalueentropy method)": [[0, "botorch.acquisition.max_value_entropy_search.qMaxValueEntropy.set_X_pending", false]], "set_x_pending() (botorch.acquisition.multi_objective.analytic.multiobjectiveanalyticacquisitionfunction method)": [[0, "botorch.acquisition.multi_objective.analytic.MultiObjectiveAnalyticAcquisitionFunction.set_X_pending", false]], "set_x_pending() (botorch.acquisition.multi_objective.max_value_entropy_search.qmultiobjectivemaxvalueentropy method)": [[0, "botorch.acquisition.multi_objective.max_value_entropy_search.qMultiObjectiveMaxValueEntropy.set_X_pending", false]], "set_x_pending() (botorch.acquisition.penalized.penalizedacquisitionfunction method)": [[0, "botorch.acquisition.penalized.PenalizedAcquisitionFunction.set_X_pending", false]], "set_x_pending() (botorch.utils.testing.mockacquisitionfunction method)": [[13, "botorch.utils.testing.MockAcquisitionFunction.set_X_pending", false]], "setup() (botorch.utils.testing.botorchtestcase method)": [[13, "botorch.utils.testing.BotorchTestCase.setUp", false]], "shape (botorch.optim.utils.model_utils.torchattr attribute)": [[8, "botorch.optim.utils.model_utils.TorchAttr.shape", false]], "shape (botorch.utils.containers.densecontainer property)": [[13, "botorch.utils.containers.DenseContainer.shape", false]], "shape (botorch.utils.containers.slicecontainer property)": [[13, "botorch.utils.containers.SliceContainer.shape", false]], "shape_to_str() (in module botorch.logging)": [[6, "botorch.logging.shape_to_str", false]], "shekel (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Shekel", false]], "should_stop (botorch.optim.homotopy.fixedhomotopyschedule property)": [[8, "botorch.optim.homotopy.FixedHomotopySchedule.should_stop", false]], "should_stop (botorch.optim.homotopy.homotopy property)": [[8, "botorch.optim.homotopy.Homotopy.should_stop", false]], "should_stop (botorch.optim.homotopy.homotopyschedule property)": [[8, "botorch.optim.homotopy.HomotopySchedule.should_stop", false]], "sigmoid() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.sigmoid", false]], "sinecosinetransform (class in botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.SineCosineTransform", false]], "singletaskgp (class in botorch.models.gp_regression)": [[7, "botorch.models.gp_regression.SingleTaskGP", false]], "singletaskmultifidelitygp (class in botorch.models.gp_regression_fidelity)": [[7, "botorch.models.gp_regression_fidelity.SingleTaskMultiFidelityGP", false]], "singletaskvariationalgp (class in botorch.models.approximate_gp)": [[7, "botorch.models.approximate_gp.SingleTaskVariationalGP", false]], "sixhumpcamel (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.SixHumpCamel", false]], "slicecontainer (class in botorch.utils.containers)": [[13, "botorch.utils.containers.SliceContainer", false]], "smooth_amax() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.smooth_amax", false]], "smooth_amin() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.smooth_amin", false]], "sobolqmcnormalsampler (class in botorch.sampling.normal)": [[10, "botorch.sampling.normal.SobolQMCNormalSampler", false]], "solve() (botorch.utils.probability.mvnxpb.mvnxpb method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.solve", false]], "solver (botorch.utils.probability.truncated_multivariate_normal.truncatedmultivariatenormal property)": [[13, "botorch.utils.probability.truncated_multivariate_normal.TruncatedMultivariateNormal.solver", false]], "sort_by_dimension() (in module botorch.utils.multi_objective.hypervolume)": [[13, "botorch.utils.multi_objective.hypervolume.sort_by_dimension", false]], "source() (botorch.utils.dispatcher.dispatcher method)": [[13, "botorch.utils.dispatcher.Dispatcher.source", false]], "sparse_to_dense_constraints() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.sparse_to_dense_constraints", false]], "speedreducer (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.SpeedReducer", false]], "srn (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.SRN", false]], "standard_normal_log_hazard() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.standard_normal_log_hazard", false]], "standardize (class in botorch.models.transforms.outcome)": [[7, "botorch.models.transforms.outcome.Standardize", false]], "standardize() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.standardize", false]], "standardize_moments() (in module botorch.utils.test_helpers)": [[13, "botorch.utils.test_helpers.standardize_moments", false]], "state (botorch.optim.closures.core.ndarrayoptimizationclosure property)": [[8, "botorch.optim.closures.core.NdarrayOptimizationClosure.state", false]], "state_dict() (botorch.utils.testing.mockmodel method)": [[13, "botorch.utils.testing.MockModel.state_dict", false]], "status (botorch.optim.core.optimizationresult attribute)": [[8, "botorch.optim.core.OptimizationResult.status", false]], "stds (botorch.models.transforms.input.inputstandardize property)": [[7, "botorch.models.transforms.input.InputStandardize.stds", false]], "step (botorch.optim.core.optimizationresult attribute)": [[8, "botorch.optim.core.OptimizationResult.step", false]], "step (botorch.utils.probability.linalg.pivotedcholesky attribute)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.step", false]], "step (botorch.utils.probability.mvnxpb.mvnxpbstate attribute)": [[13, "botorch.utils.probability.mvnxpb.mvnxpbState.step", false]], "step() (botorch.optim.homotopy.fixedhomotopyschedule method)": [[8, "botorch.optim.homotopy.FixedHomotopySchedule.step", false]], "step() (botorch.optim.homotopy.homotopy method)": [[8, "botorch.optim.homotopy.Homotopy.step", false]], "step() (botorch.optim.homotopy.homotopyschedule method)": [[8, "botorch.optim.homotopy.HomotopySchedule.step", false]], "step() (botorch.utils.probability.lin_ess.linearellipticalslicesampler method)": [[13, "botorch.utils.probability.lin_ess.LinearEllipticalSliceSampler.step", false]], "stochasticsampler (class in botorch.sampling.stochastic_samplers)": [[10, "botorch.sampling.stochastic_samplers.StochasticSampler", false]], "stopped (botorch.optim.core.optimizationstatus attribute)": [[8, "botorch.optim.core.OptimizationStatus.STOPPED", false]], "styblinskitang (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.StyblinskiTang", false]], "sub() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.sub", false]], "subset_output() (botorch.models.deterministic.affinedeterministicmodel method)": [[7, "botorch.models.deterministic.AffineDeterministicModel.subset_output", false]], "subset_output() (botorch.models.deterministic.genericdeterministicmodel method)": [[7, "botorch.models.deterministic.GenericDeterministicModel.subset_output", false]], "subset_output() (botorch.models.gp_regression.heteroskedasticsingletaskgp method)": [[7, "botorch.models.gp_regression.HeteroskedasticSingleTaskGP.subset_output", false]], "subset_output() (botorch.models.model.model method)": [[7, "botorch.models.model.Model.subset_output", false]], "subset_output() (botorch.models.model.modellist method)": [[7, "botorch.models.model.ModelList.subset_output", false]], "subset_output() (botorch.models.transforms.outcome.bilog method)": [[7, "botorch.models.transforms.outcome.Bilog.subset_output", false]], "subset_output() (botorch.models.transforms.outcome.chainedoutcometransform method)": [[7, "botorch.models.transforms.outcome.ChainedOutcomeTransform.subset_output", false]], "subset_output() (botorch.models.transforms.outcome.log method)": [[7, "botorch.models.transforms.outcome.Log.subset_output", false]], "subset_output() (botorch.models.transforms.outcome.power method)": [[7, "botorch.models.transforms.outcome.Power.subset_output", false]], "subset_output() (botorch.models.transforms.outcome.standardize method)": [[7, "botorch.models.transforms.outcome.Standardize.subset_output", false]], "subset_transform() (in module botorch.models.transforms.utils)": [[7, "botorch.models.transforms.utils.subset_transform", false]], "subsetindexcachingmixin (class in botorch.utils.multi_objective.hypervolume)": [[13, "botorch.utils.multi_objective.hypervolume.SubsetIndexCachingMixin", false]], "success (botorch.optim.core.optimizationstatus attribute)": [[8, "botorch.optim.core.OptimizationStatus.SUCCESS", false]], "superviseddataset (class in botorch.utils.datasets)": [[13, "botorch.utils.datasets.SupervisedDataset", false]], "supports_cache_root() (in module botorch.acquisition.cached_cholesky)": [[0, "botorch.acquisition.cached_cholesky.supports_cache_root", false]], "swap_along_dim_() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.swap_along_dim_", false]], "synthetictestfunction (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.SyntheticTestFunction", false]], "synthetictestfunctiontestcasemixin (class in botorch.utils.testing)": [[13, "botorch.utils.testing.SyntheticTestFunctionTestCaseMixin", false]], "t_batch_mode_transform() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.t_batch_mode_transform", false]], "t_o (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.T_o", false]], "t_v (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.T_v", false]], "task_covar_module() (botorch.models.contextual_multioutput.lcemgp method)": [[7, "botorch.models.contextual_multioutput.LCEMGP.task_covar_module", false]], "tensioncompressionstring (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.TensionCompressionString", false]], "tensorcheckpoint (class in botorch.utils.context_managers)": [[13, "botorch.utils.context_managers.TensorCheckpoint", false]], "tensortransform (class in botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.TensorTransform", false]], "test_attributes() (botorch.utils.testing.multiobjectivetestproblemtestcasemixin method)": [[13, "botorch.utils.testing.MultiObjectiveTestProblemTestCaseMixin.test_attributes", false]], "test_evaluate_slack() (botorch.utils.testing.constrainedtestproblemtestcasemixin method)": [[13, "botorch.utils.testing.ConstrainedTestProblemTestCaseMixin.test_evaluate_slack", false]], "test_forward() (botorch.utils.testing.basetestproblemtestcasemixin method)": [[13, "botorch.utils.testing.BaseTestProblemTestCaseMixIn.test_forward", false]], "test_max_hv() (botorch.utils.testing.multiobjectivetestproblemtestcasemixin method)": [[13, "botorch.utils.testing.MultiObjectiveTestProblemTestCaseMixin.test_max_hv", false]], "test_num_constraints() (botorch.utils.testing.constrainedtestproblemtestcasemixin method)": [[13, "botorch.utils.testing.ConstrainedTestProblemTestCaseMixin.test_num_constraints", false]], "test_optimal_value() (botorch.utils.testing.synthetictestfunctiontestcasemixin method)": [[13, "botorch.utils.testing.SyntheticTestFunctionTestCaseMixin.test_optimal_value", false]], "test_optimizer() (botorch.utils.testing.synthetictestfunctiontestcasemixin method)": [[13, "botorch.utils.testing.SyntheticTestFunctionTestCaseMixin.test_optimizer", false]], "test_ref_point() (botorch.utils.testing.multiobjectivetestproblemtestcasemixin method)": [[13, "botorch.utils.testing.MultiObjectiveTestProblemTestCaseMixin.test_ref_point", false]], "test_x (botorch.cross_validation.cvfolds attribute)": [[1, "botorch.cross_validation.CVFolds.test_X", false]], "test_y (botorch.cross_validation.cvfolds attribute)": [[1, "botorch.cross_validation.CVFolds.test_Y", false]], "test_yvar (botorch.cross_validation.cvfolds attribute)": [[1, "botorch.cross_validation.CVFolds.test_Yvar", false]], "threehumpcamel (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.ThreeHumpCamel", false]], "timeout_sec (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.timeout_sec", false]], "torch_minimize() (in module botorch.optim.core)": [[8, "botorch.optim.core.torch_minimize", false]], "torchattr (class in botorch.optim.utils.model_utils)": [[8, "botorch.optim.utils.model_utils.TorchAttr", false]], "torchposterior (class in botorch.posteriors.torch)": [[9, "botorch.posteriors.torch.TorchPosterior", false]], "toyrobust (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.ToyRobust", false]], "train() (botorch.models.approximate_gp.approximategpytorchmodel method)": [[7, "botorch.models.approximate_gp.ApproximateGPyTorchModel.train", false]], "train() (botorch.models.fully_bayesian.saasfullybayesiansingletaskgp method)": [[7, "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP.train", false]], "train() (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp method)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.train", false]], "train() (botorch.models.model.model method)": [[7, "botorch.models.model.Model.train", false]], "train() (botorch.models.multitask.kroneckermultitaskgp method)": [[7, "botorch.models.multitask.KroneckerMultiTaskGP.train", false]], "train_full_covar (botorch.models.multitask.kroneckermultitaskgp property)": [[7, "botorch.models.multitask.KroneckerMultiTaskGP.train_full_covar", false]], "train_x (botorch.cross_validation.cvfolds attribute)": [[1, "botorch.cross_validation.CVFolds.train_X", false]], "train_y (botorch.cross_validation.cvfolds attribute)": [[1, "botorch.cross_validation.CVFolds.train_Y", false]], "train_yvar (botorch.cross_validation.cvfolds attribute)": [[1, "botorch.cross_validation.CVFolds.train_Yvar", false]], "transform() (botorch.models.transforms.input.appendfeatures method)": [[7, "botorch.models.transforms.input.AppendFeatures.transform", false]], "transform() (botorch.models.transforms.input.chainedinputtransform method)": [[7, "botorch.models.transforms.input.ChainedInputTransform.transform", false]], "transform() (botorch.models.transforms.input.filterfeatures method)": [[7, "botorch.models.transforms.input.FilterFeatures.transform", false]], "transform() (botorch.models.transforms.input.inputperturbation method)": [[7, "botorch.models.transforms.input.InputPerturbation.transform", false]], "transform() (botorch.models.transforms.input.onehottonumeric method)": [[7, "botorch.models.transforms.input.OneHotToNumeric.transform", false]], "transform() (botorch.models.transforms.input.round method)": [[7, "botorch.models.transforms.input.Round.transform", false]], "transform_constraints() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.transform_constraints", false]], "transform_inputs() (botorch.models.model.fantasizemixin method)": [[7, "botorch.models.model.FantasizeMixin.transform_inputs", false]], "transform_inputs() (botorch.models.model.model method)": [[7, "botorch.models.model.Model.transform_inputs", false]], "transform_inputs() (botorch.models.model.modellist method)": [[7, "botorch.models.model.ModelList.transform_inputs", false]], "transform_inter_point_constraint() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.transform_inter_point_constraint", false]], "transform_intra_point_constraint() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.transform_intra_point_constraint", false]], "transformedmodulemixin (class in botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.TransformedModuleMixin", false]], "transformedposterior (class in botorch.posteriors.transformed)": [[9, "botorch.posteriors.transformed.TransformedPosterior", false]], "tril (botorch.utils.probability.linalg.pivotedcholesky attribute)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.tril", false]], "truncatedmultivariatenormal (class in botorch.utils.probability.truncated_multivariate_normal)": [[13, "botorch.utils.probability.truncated_multivariate_normal.TruncatedMultivariateNormal", false]], "type_bypassing_encoder() (in module botorch.utils.dispatcher)": [[13, "botorch.utils.dispatcher.type_bypassing_encoder", false]], "unconsolidated_utility (botorch.models.pairwise_gp.pairwisegp property)": [[7, "botorch.models.pairwise_gp.PairwiseGP.unconsolidated_utility", false]], "unifiedskewnormal (class in botorch.utils.probability.unified_skew_normal)": [[13, "botorch.utils.probability.unified_skew_normal.UnifiedSkewNormal", false]], "unitqualityfunction (class in botorch.models.utils.inducing_point_allocators)": [[7, "botorch.models.utils.inducing_point_allocators.UnitQualityFunction", false]], "unnormalize() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.unnormalize", false]], "unsupportederror": [[2, "botorch.exceptions.errors.UnsupportedError", false]], "untransform() (botorch.models.higher_order_gp.flattenedstandardize method)": [[7, "botorch.models.higher_order_gp.FlattenedStandardize.untransform", false]], "untransform() (botorch.models.transforms.input.chainedinputtransform method)": [[7, "botorch.models.transforms.input.ChainedInputTransform.untransform", false]], "untransform() (botorch.models.transforms.input.onehottonumeric method)": [[7, "botorch.models.transforms.input.OneHotToNumeric.untransform", false]], "untransform() (botorch.models.transforms.outcome.bilog method)": [[7, "botorch.models.transforms.outcome.Bilog.untransform", false]], "untransform() (botorch.models.transforms.outcome.chainedoutcometransform method)": [[7, "botorch.models.transforms.outcome.ChainedOutcomeTransform.untransform", false]], "untransform() (botorch.models.transforms.outcome.log method)": [[7, "botorch.models.transforms.outcome.Log.untransform", false]], "untransform() (botorch.models.transforms.outcome.power method)": [[7, "botorch.models.transforms.outcome.Power.untransform", false]], "untransform() (botorch.models.transforms.outcome.standardize method)": [[7, "botorch.models.transforms.outcome.Standardize.untransform", false]], "untransform_posterior() (botorch.models.higher_order_gp.flattenedstandardize method)": [[7, "botorch.models.higher_order_gp.FlattenedStandardize.untransform_posterior", false]], "untransform_posterior() (botorch.models.transforms.outcome.bilog method)": [[7, "botorch.models.transforms.outcome.Bilog.untransform_posterior", false]], "untransform_posterior() (botorch.models.transforms.outcome.chainedoutcometransform method)": [[7, "botorch.models.transforms.outcome.ChainedOutcomeTransform.untransform_posterior", false]], "untransform_posterior() (botorch.models.transforms.outcome.log method)": [[7, "botorch.models.transforms.outcome.Log.untransform_posterior", false]], "untransform_posterior() (botorch.models.transforms.outcome.power method)": [[7, "botorch.models.transforms.outcome.Power.untransform_posterior", false]], "untransform_posterior() (botorch.models.transforms.outcome.standardize method)": [[7, "botorch.models.transforms.outcome.Standardize.untransform_posterior", false]], "update() (botorch.utils.multi_objective.box_decompositions.box_decomposition_list.boxdecompositionlist method)": [[13, "botorch.utils.multi_objective.box_decompositions.box_decomposition_list.BoxDecompositionList.update", false]], "update() (botorch.utils.torch.bufferdict method)": [[13, "botorch.utils.torch.BufferDict.update", false]], "update_() (botorch.utils.probability.linalg.pivotedcholesky method)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.update_", false]], "update_local_upper_bounds_incremental() (in module botorch.utils.multi_objective.box_decompositions.utils)": [[13, "botorch.utils.multi_objective.box_decompositions.utils.update_local_upper_bounds_incremental", false]], "upperconfidencebound (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.UpperConfidenceBound", false]], "userinputwarning": [[2, "botorch.exceptions.warnings.UserInputWarning", false]], "v_max (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.V_max", false]], "validate_init (botorch.utils.probability.linalg.pivotedcholesky attribute)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.validate_init", false]], "validate_input_scaling (class in botorch.settings)": [[11, "botorch.settings.validate_input_scaling", false]], "validate_input_scaling() (in module botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.validate_input_scaling", false]], "value (botorch.optim.homotopy.fixedhomotopyschedule property)": [[8, "botorch.optim.homotopy.FixedHomotopySchedule.value", false]], "value (botorch.optim.homotopy.homotopyschedule property)": [[8, "botorch.optim.homotopy.HomotopySchedule.value", false]], "values (botorch.utils.containers.densecontainer attribute)": [[13, "botorch.utils.containers.DenseContainer.values", false]], "values (botorch.utils.containers.slicecontainer attribute)": [[13, "botorch.utils.containers.SliceContainer.values", false]], "values (botorch.utils.context_managers.tensorcheckpoint attribute)": [[13, "botorch.utils.context_managers.TensorCheckpoint.values", false]], "values() (botorch.sampling.pathwise.paths.pathdict method)": [[10, "botorch.sampling.pathwise.paths.PathDict.values", false]], "values() (botorch.utils.torch.bufferdict method)": [[13, "botorch.utils.torch.BufferDict.values", false]], "var (class in botorch.acquisition.risk_measures)": [[0, "botorch.acquisition.risk_measures.VaR", false]], "variance (botorch.posteriors.ensemble.ensembleposterior property)": [[9, "botorch.posteriors.ensemble.EnsemblePosterior.variance", false]], "variance (botorch.posteriors.gpytorch.gpytorchposterior property)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.variance", false]], "variance (botorch.posteriors.posterior_list.posteriorlist property)": [[9, "botorch.posteriors.posterior_list.PosteriorList.variance", false]], "variance (botorch.posteriors.transformed.transformedposterior property)": [[9, "botorch.posteriors.transformed.TransformedPosterior.variance", false]], "variance (botorch.utils.testing.mockposterior property)": [[13, "botorch.utils.testing.MockPosterior.variance", false]], "vehiclesafety (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.VehicleSafety", false]], "warmstart_multistep() (in module botorch.acquisition.multi_step_lookahead)": [[0, "botorch.acquisition.multi_step_lookahead.warmstart_multistep", false]], "warp (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.Warp", false]], "weightedmcmultioutputobjective (class in botorch.acquisition.multi_objective.objective)": [[0, "botorch.acquisition.multi_objective.objective.WeightedMCMultiOutputObjective", false]], "weights (botorch.posteriors.ensemble.ensembleposterior property)": [[9, "botorch.posteriors.ensemble.EnsemblePosterior.weights", false]], "weldedbeam (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.WeldedBeam", false]], "weldedbeamso (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.WeldedBeamSO", false]], "worstcase (class in botorch.acquisition.risk_measures)": [[0, "botorch.acquisition.risk_measures.WorstCase", false]], "x (botorch.utils.datasets.contextualdataset property)": [[13, "botorch.utils.datasets.ContextualDataset.X", false]], "x (botorch.utils.datasets.multitaskdataset property)": [[13, "botorch.utils.datasets.MultiTaskDataset.X", false]], "x (botorch.utils.datasets.superviseddataset property)": [[13, "botorch.utils.datasets.SupervisedDataset.X", false]], "x_evaluation_mask (botorch.acquisition.decoupled.decoupledacquisitionfunction property)": [[0, "botorch.acquisition.decoupled.DecoupledAcquisitionFunction.X_evaluation_mask", false]], "x_pending (botorch.acquisition.fixed_feature.fixedfeatureacquisitionfunction property)": [[0, "botorch.acquisition.fixed_feature.FixedFeatureAcquisitionFunction.X_pending", false]], "x_pending (botorch.acquisition.penalized.penalizedacquisitionfunction property)": [[0, "botorch.acquisition.penalized.PenalizedAcquisitionFunction.X_pending", false]], "xs (botorch.utils.gp_sampling.gpdraw property)": [[13, "botorch.utils.gp_sampling.GPDraw.Xs", false]], "y (botorch.utils.datasets.contextualdataset property)": [[13, "botorch.utils.datasets.ContextualDataset.Y", false]], "y (botorch.utils.datasets.multitaskdataset property)": [[13, "botorch.utils.datasets.MultiTaskDataset.Y", false]], "y (botorch.utils.datasets.superviseddataset property)": [[13, "botorch.utils.datasets.SupervisedDataset.Y", false]], "y_ps (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.Y_ps", false]], "y_xs (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.Y_xs", false]], "ys (botorch.utils.gp_sampling.gpdraw property)": [[13, "botorch.utils.gp_sampling.GPDraw.Ys", false]], "yvar (botorch.utils.datasets.contextualdataset property)": [[13, "botorch.utils.datasets.ContextualDataset.Yvar", false]], "yvar (botorch.utils.datasets.multitaskdataset property)": [[13, "botorch.utils.datasets.MultiTaskDataset.Yvar", false]], "yvar (botorch.utils.datasets.superviseddataset property)": [[13, "botorch.utils.datasets.SupervisedDataset.Yvar", false]], "zdt (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.ZDT", false]], "zdt1 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.ZDT1", false]], "zdt2 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.ZDT2", false]], "zdt3 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.ZDT3", false]], "zero_grad_ctx() (in module botorch.utils.context_managers)": [[13, "botorch.utils.context_managers.zero_grad_ctx", false]]}, "objects": {"botorch": [[0, 0, 0, "-", "acquisition"], [1, 0, 0, "-", "cross_validation"], [2, 0, 0, "-", "exceptions"], [3, 0, 0, "-", "fit"], [4, 0, 0, "-", "generation"], [6, 0, 0, "-", "logging"], [7, 0, 0, "-", "models"], [8, 0, 0, "-", "optim"], [9, 0, 0, "-", "posteriors"], [10, 0, 0, "-", "sampling"], [11, 0, 0, "-", "settings"], [12, 0, 0, "-", "test_functions"], [13, 0, 0, "-", "utils"]], "botorch.acquisition": [[0, 0, 0, "-", "acquisition"], [0, 0, 0, "-", "active_learning"], [0, 0, 0, "-", "analytic"], [0, 0, 0, "-", "cached_cholesky"], [0, 0, 0, "-", "cost_aware"], [0, 0, 0, "-", "decoupled"], [0, 0, 0, "-", "factory"], [0, 0, 0, "-", "fixed_feature"], [0, 0, 0, "-", "input_constructors"], [0, 0, 0, "-", "joint_entropy_search"], [0, 0, 0, "-", "knowledge_gradient"], [0, 0, 0, "-", "logei"], [0, 0, 0, "-", "max_value_entropy_search"], [0, 0, 0, "-", "monte_carlo"], [0, 0, 0, "-", "multi_step_lookahead"], [0, 0, 0, "-", "objective"], [0, 0, 0, "-", "penalized"], [0, 0, 0, "-", "predictive_entropy_search"], [0, 0, 0, "-", "preference"], [0, 0, 0, "-", "prior_guided"], [0, 0, 0, "-", "proximal"], [0, 0, 0, "-", "risk_measures"], [0, 0, 0, "-", "utils"]], "botorch.acquisition.active_learning": [[0, 1, 1, "", "PairwiseMCPosteriorVariance"], [0, 1, 1, "", "qNegIntegratedPosteriorVariance"]], "botorch.acquisition.active_learning.PairwiseMCPosteriorVariance": [[0, 2, 1, "", "forward"]], "botorch.acquisition.active_learning.qNegIntegratedPosteriorVariance": [[0, 2, 1, "", "forward"]], "botorch.acquisition.analytic": [[0, 1, 1, "", "AnalyticAcquisitionFunction"], [0, 1, 1, "", "ConstrainedExpectedImprovement"], [0, 1, 1, "", "ExpectedImprovement"], [0, 1, 1, "", "LogConstrainedExpectedImprovement"], [0, 1, 1, "", "LogExpectedImprovement"], [0, 1, 1, "", "LogNoisyExpectedImprovement"], [0, 1, 1, "", "LogProbabilityOfImprovement"], [0, 1, 1, "", "NoisyExpectedImprovement"], [0, 1, 1, "", "PosteriorMean"], [0, 1, 1, "", "PosteriorStandardDeviation"], [0, 1, 1, "", "ProbabilityOfImprovement"], [0, 1, 1, "", "ScalarizedPosteriorMean"], [0, 1, 1, "", "UpperConfidenceBound"], [0, 1, 1, "", "qAnalyticProbabilityOfImprovement"]], "botorch.acquisition.analytic.AnalyticAcquisitionFunction": [[0, 2, 1, "", "set_X_pending"]], "botorch.acquisition.analytic.ConstrainedExpectedImprovement": [[0, 2, 1, "", "forward"]], "botorch.acquisition.analytic.ExpectedImprovement": [[0, 2, 1, "", "forward"]], "botorch.acquisition.analytic.LogConstrainedExpectedImprovement": [[0, 2, 1, "", "forward"]], "botorch.acquisition.analytic.LogExpectedImprovement": [[0, 2, 1, "", "forward"]], "botorch.acquisition.analytic.LogNoisyExpectedImprovement": [[0, 2, 1, "", "forward"]], "botorch.acquisition.analytic.LogProbabilityOfImprovement": [[0, 2, 1, "", "forward"]], "botorch.acquisition.analytic.NoisyExpectedImprovement": [[0, 2, 1, "", "forward"]], "botorch.acquisition.analytic.PosteriorMean": [[0, 2, 1, "", "forward"]], "botorch.acquisition.analytic.PosteriorStandardDeviation": [[0, 2, 1, "", "forward"]], "botorch.acquisition.analytic.ProbabilityOfImprovement": [[0, 2, 1, "", "forward"]], "botorch.acquisition.analytic.ScalarizedPosteriorMean": [[0, 2, 1, "", "forward"]], "botorch.acquisition.analytic.UpperConfidenceBound": [[0, 2, 1, "", "forward"]], "botorch.acquisition.analytic.qAnalyticProbabilityOfImprovement": [[0, 2, 1, "", "forward"]], "botorch.acquisition.cached_cholesky": [[0, 3, 1, "", "supports_cache_root"]], "botorch.acquisition.cost_aware": [[0, 1, 1, "", "GenericCostAwareUtility"], [0, 1, 1, "", "InverseCostWeightedUtility"]], "botorch.acquisition.cost_aware.GenericCostAwareUtility": [[0, 2, 1, "", "forward"]], "botorch.acquisition.cost_aware.InverseCostWeightedUtility": [[0, 2, 1, "", "forward"]], "botorch.acquisition.decoupled": [[0, 1, 1, "", "DecoupledAcquisitionFunction"]], "botorch.acquisition.decoupled.DecoupledAcquisitionFunction": [[0, 4, 1, "", "X_evaluation_mask"], [0, 2, 1, "", "construct_evaluation_mask"], [0, 2, 1, "", "set_X_pending"]], "botorch.acquisition.factory": [[0, 3, 1, "", "get_acquisition_function"]], "botorch.acquisition.fixed_feature": [[0, 1, 1, "", "FixedFeatureAcquisitionFunction"], [0, 3, 1, "", "get_device_of_sequence"], [0, 3, 1, "", "get_dtype_of_sequence"]], "botorch.acquisition.fixed_feature.FixedFeatureAcquisitionFunction": [[0, 4, 1, "", "X_pending"], [0, 2, 1, "", "forward"]], "botorch.acquisition.input_constructors": [[0, 3, 1, "", "acqf_input_constructor"], [0, 3, 1, "", "allow_only_specific_variable_kwargs"], [0, 3, 1, "", "construct_inputs_EHVI"], [0, 3, 1, "", "construct_inputs_analytic_eubo"], [0, 3, 1, "", "construct_inputs_best_f"], [0, 3, 1, "", "construct_inputs_mf_base"], [0, 3, 1, "", "construct_inputs_noisy_ei"], [0, 3, 1, "", "construct_inputs_posterior_mean"], [0, 3, 1, "", "construct_inputs_qEHVI"], [0, 3, 1, "", "construct_inputs_qEI"], [0, 3, 1, "", "construct_inputs_qJES"], [0, 3, 1, "", "construct_inputs_qKG"], [0, 3, 1, "", "construct_inputs_qLogEI"], [0, 3, 1, "", "construct_inputs_qLogNEHVI"], [0, 3, 1, "", "construct_inputs_qLogNEI"], [0, 3, 1, "", "construct_inputs_qLogNParEGO"], [0, 3, 1, "", "construct_inputs_qMES"], [0, 3, 1, "", "construct_inputs_qMFKG"], [0, 3, 1, "", "construct_inputs_qMFMES"], [0, 3, 1, "", "construct_inputs_qNEHVI"], [0, 3, 1, "", "construct_inputs_qNEI"], [0, 3, 1, "", "construct_inputs_qPI"], [0, 3, 1, "", "construct_inputs_qSimpleRegret"], [0, 3, 1, "", "construct_inputs_qUCB"], [0, 3, 1, "", "construct_inputs_qeubo"], [0, 3, 1, "", "construct_inputs_ucb"], [0, 3, 1, "", "get_acqf_input_constructor"], [0, 3, 1, "", "get_best_f_analytic"], [0, 3, 1, "", "get_best_f_mc"], [0, 3, 1, "", "optimize_objective"]], "botorch.acquisition.joint_entropy_search": [[0, 1, 1, "", "qJointEntropySearch"]], "botorch.acquisition.joint_entropy_search.qJointEntropySearch": [[0, 2, 1, "", "forward"]], "botorch.acquisition.knowledge_gradient": [[0, 1, 1, "", "ProjectedAcquisitionFunction"], [0, 1, 1, "", "qKnowledgeGradient"], [0, 1, 1, "", "qMultiFidelityKnowledgeGradient"]], "botorch.acquisition.knowledge_gradient.ProjectedAcquisitionFunction": [[0, 2, 1, "", "forward"]], "botorch.acquisition.knowledge_gradient.qKnowledgeGradient": [[0, 2, 1, "", "evaluate"], [0, 2, 1, "", "extract_candidates"], [0, 2, 1, "", "forward"], [0, 2, 1, "", "get_augmented_q_batch_size"]], "botorch.acquisition.knowledge_gradient.qMultiFidelityKnowledgeGradient": [[0, 4, 1, "", "cost_sampler"], [0, 2, 1, "", "forward"]], "botorch.acquisition.logei": [[0, 3, 1, "", "check_tau"], [0, 1, 1, "", "qLogExpectedImprovement"], [0, 1, 1, "", "qLogNoisyExpectedImprovement"]], "botorch.acquisition.logei.qLogNoisyExpectedImprovement": [[0, 2, 1, "", "compute_best_f"]], "botorch.acquisition.max_value_entropy_search": [[0, 1, 1, "", "DiscreteMaxValueBase"], [0, 1, 1, "", "qLowerBoundMaxValueEntropy"], [0, 1, 1, "", "qMaxValueEntropy"], [0, 1, 1, "", "qMultiFidelityLowerBoundMaxValueEntropy"], [0, 1, 1, "", "qMultiFidelityMaxValueEntropy"]], "botorch.acquisition.max_value_entropy_search.qMaxValueEntropy": [[0, 2, 1, "", "set_X_pending"]], "botorch.acquisition.max_value_entropy_search.qMultiFidelityMaxValueEntropy": [[0, 4, 1, "", "cost_sampler"], [0, 2, 1, "", "forward"]], "botorch.acquisition.monte_carlo": [[0, 1, 1, "", "MCAcquisitionFunction"], [0, 1, 1, "", "SampleReducingMCAcquisitionFunction"], [0, 1, 1, "", "SampleReductionProtocol"], [0, 1, 1, "", "qExpectedImprovement"], [0, 1, 1, "", "qNoisyExpectedImprovement"], [0, 1, 1, "", "qProbabilityOfImprovement"], [0, 1, 1, "", "qSimpleRegret"], [0, 1, 1, "", "qUpperConfidenceBound"]], "botorch.acquisition.monte_carlo.MCAcquisitionFunction": [[0, 2, 1, "", "forward"]], "botorch.acquisition.monte_carlo.SampleReducingMCAcquisitionFunction": [[0, 2, 1, "", "forward"]], "botorch.acquisition.monte_carlo.qNoisyExpectedImprovement": [[0, 2, 1, "", "compute_best_f"]], "botorch.acquisition.multi_objective": [[0, 0, 0, "-", "analytic"], [0, 0, 0, "-", "hypervolume_knowledge_gradient"], [0, 0, 0, "-", "joint_entropy_search"], [0, 0, 0, "-", "logei"], [0, 0, 0, "-", "max_value_entropy_search"], [0, 0, 0, "-", "monte_carlo"], [0, 0, 0, "-", "multi_fidelity"], [0, 0, 0, "-", "multi_output_risk_measures"], [0, 0, 0, "-", "objective"], [0, 0, 0, "-", "parego"], [0, 0, 0, "-", "predictive_entropy_search"], [0, 0, 0, "-", "utils"]], "botorch.acquisition.multi_objective.analytic": [[0, 1, 1, "", "ExpectedHypervolumeImprovement"], [0, 1, 1, "", "MultiObjectiveAnalyticAcquisitionFunction"]], "botorch.acquisition.multi_objective.analytic.ExpectedHypervolumeImprovement": [[0, 2, 1, "", "forward"], [0, 2, 1, "", "nu"], [0, 2, 1, "", "psi"]], "botorch.acquisition.multi_objective.analytic.MultiObjectiveAnalyticAcquisitionFunction": [[0, 2, 1, "", "forward"], [0, 2, 1, "", "set_X_pending"]], "botorch.acquisition.multi_objective.hypervolume_knowledge_gradient": [[0, 1, 1, "", "qHypervolumeKnowledgeGradient"], [0, 1, 1, "", "qMultiFidelityHypervolumeKnowledgeGradient"]], "botorch.acquisition.multi_objective.hypervolume_knowledge_gradient.qHypervolumeKnowledgeGradient": [[0, 4, 1, "", "cost_sampler"], [0, 2, 1, "", "extract_candidates"], [0, 2, 1, "", "forward"], [0, 2, 1, "", "get_augmented_q_batch_size"]], "botorch.acquisition.multi_objective.hypervolume_knowledge_gradient.qMultiFidelityHypervolumeKnowledgeGradient": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.joint_entropy_search": [[0, 1, 1, "", "LowerBoundMultiObjectiveEntropySearch"], [0, 1, 1, "", "qLowerBoundMultiObjectiveJointEntropySearch"]], "botorch.acquisition.multi_objective.joint_entropy_search.LowerBoundMultiObjectiveEntropySearch": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.joint_entropy_search.qLowerBoundMultiObjectiveJointEntropySearch": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.logei": [[0, 1, 1, "", "qLogExpectedHypervolumeImprovement"]], "botorch.acquisition.multi_objective.logei.qLogExpectedHypervolumeImprovement": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.max_value_entropy_search": [[0, 1, 1, "", "qLowerBoundMultiObjectiveMaxValueEntropySearch"], [0, 1, 1, "", "qMultiObjectiveMaxValueEntropy"]], "botorch.acquisition.multi_objective.max_value_entropy_search.qLowerBoundMultiObjectiveMaxValueEntropySearch": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.max_value_entropy_search.qMultiObjectiveMaxValueEntropy": [[0, 5, 1, "", "_default_sample_shape"], [0, 2, 1, "", "forward"], [0, 2, 1, "", "set_X_pending"]], "botorch.acquisition.multi_objective.monte_carlo": [[0, 1, 1, "", "MultiObjectiveMCAcquisitionFunction"], [0, 1, 1, "", "qExpectedHypervolumeImprovement"]], "botorch.acquisition.multi_objective.monte_carlo.MultiObjectiveMCAcquisitionFunction": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.monte_carlo.qExpectedHypervolumeImprovement": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.multi_fidelity": [[0, 1, 1, "", "MOMF"]], "botorch.acquisition.multi_objective.multi_fidelity.MOMF": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.multi_output_risk_measures": [[0, 1, 1, "", "IndependentCVaR"], [0, 1, 1, "", "IndependentVaR"], [0, 1, 1, "", "MARS"], [0, 1, 1, "", "MVaR"], [0, 1, 1, "", "MultiOutputExpectation"], [0, 1, 1, "", "MultiOutputWorstCase"]], "botorch.acquisition.multi_objective.multi_output_risk_measures.IndependentCVaR": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.multi_output_risk_measures.IndependentVaR": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.multi_output_risk_measures.MARS": [[0, 4, 1, "", "baseline_Y"], [0, 4, 1, "", "chebyshev_objective"], [0, 4, 1, "", "chebyshev_weights"], [0, 2, 1, "", "set_baseline_Y"]], "botorch.acquisition.multi_objective.multi_output_risk_measures.MVaR": [[0, 2, 1, "", "forward"], [0, 2, 1, "", "get_mvar_set_vectorized"], [0, 2, 1, "", "get_mvar_set_via_counting"], [0, 2, 1, "", "make_differentiable"]], "botorch.acquisition.multi_objective.multi_output_risk_measures.MultiOutputExpectation": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.multi_output_risk_measures.MultiOutputWorstCase": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.objective": [[0, 1, 1, "", "FeasibilityWeightedMCMultiOutputObjective"], [0, 1, 1, "", "GenericMCMultiOutputObjective"], [0, 1, 1, "", "IdentityMCMultiOutputObjective"], [0, 1, 1, "", "MCMultiOutputObjective"], [0, 1, 1, "", "WeightedMCMultiOutputObjective"]], "botorch.acquisition.multi_objective.objective.FeasibilityWeightedMCMultiOutputObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.objective.IdentityMCMultiOutputObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.objective.MCMultiOutputObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.objective.WeightedMCMultiOutputObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.parego": [[0, 1, 1, "", "qLogNParEGO"]], "botorch.acquisition.multi_objective.predictive_entropy_search": [[0, 3, 1, "", "log_cdf_robust"], [0, 1, 1, "", "qMultiObjectivePredictiveEntropySearch"]], "botorch.acquisition.multi_objective.predictive_entropy_search.qMultiObjectivePredictiveEntropySearch": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.utils": [[0, 3, 1, "", "compute_sample_box_decomposition"], [0, 3, 1, "", "get_default_partitioning_alpha"], [0, 3, 1, "", "prune_inferior_points_multi_objective"], [0, 3, 1, "", "random_search_optimizer"], [0, 3, 1, "", "sample_optimal_points"]], "botorch.acquisition.multi_step_lookahead": [[0, 3, 1, "", "make_best_f"], [0, 1, 1, "", "qMultiStepLookahead"], [0, 3, 1, "", "warmstart_multistep"]], "botorch.acquisition.multi_step_lookahead.qMultiStepLookahead": [[0, 2, 1, "", "extract_candidates"], [0, 2, 1, "", "forward"], [0, 2, 1, "", "get_augmented_q_batch_size"], [0, 2, 1, "", "get_induced_fantasy_model"], [0, 2, 1, "", "get_multi_step_tree_input_representation"], [0, 2, 1, "", "get_split_shapes"]], "botorch.acquisition.objective": [[0, 1, 1, "", "ConstrainedMCObjective"], [0, 1, 1, "", "ExpectationPosteriorTransform"], [0, 1, 1, "", "GenericMCObjective"], [0, 1, 1, "", "IdentityMCObjective"], [0, 1, 1, "", "LearnedObjective"], [0, 1, 1, "", "LinearMCObjective"], [0, 1, 1, "", "ScalarizedPosteriorTransform"]], "botorch.acquisition.objective.ConstrainedMCObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.objective.ExpectationPosteriorTransform": [[0, 2, 1, "", "evaluate"], [0, 2, 1, "", "forward"]], "botorch.acquisition.objective.GenericMCObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.objective.IdentityMCObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.objective.LearnedObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.objective.LinearMCObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.objective.ScalarizedPosteriorTransform": [[0, 2, 1, "", "evaluate"], [0, 2, 1, "", "forward"], [0, 5, 1, "", "scalarize"]], "botorch.acquisition.penalized": [[0, 1, 1, "", "GaussianPenalty"], [0, 1, 1, "", "GroupLassoPenalty"], [0, 1, 1, "", "L0Approximation"], [0, 1, 1, "", "L0PenaltyApprox"], [0, 1, 1, "", "L0PenaltyApproxObjective"], [0, 1, 1, "", "L1Penalty"], [0, 1, 1, "", "L1PenaltyObjective"], [0, 1, 1, "", "L2Penalty"], [0, 1, 1, "", "PenalizedAcquisitionFunction"], [0, 1, 1, "", "PenalizedMCObjective"], [0, 3, 1, "", "group_lasso_regularizer"], [0, 3, 1, "", "narrow_gaussian"], [0, 3, 1, "", "nnz_approx"]], "botorch.acquisition.penalized.GaussianPenalty": [[0, 2, 1, "", "forward"]], "botorch.acquisition.penalized.GroupLassoPenalty": [[0, 2, 1, "", "forward"]], "botorch.acquisition.penalized.L1Penalty": [[0, 2, 1, "", "forward"]], "botorch.acquisition.penalized.L1PenaltyObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.penalized.L2Penalty": [[0, 2, 1, "", "forward"]], "botorch.acquisition.penalized.PenalizedAcquisitionFunction": [[0, 4, 1, "", "X_pending"], [0, 2, 1, "", "forward"], [0, 2, 1, "", "set_X_pending"]], "botorch.acquisition.penalized.PenalizedMCObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.predictive_entropy_search": [[0, 1, 1, "", "qPredictiveEntropySearch"]], "botorch.acquisition.predictive_entropy_search.qPredictiveEntropySearch": [[0, 2, 1, "", "forward"]], "botorch.acquisition.preference": [[0, 1, 1, "", "AnalyticExpectedUtilityOfBestOption"], [0, 1, 1, "", "PairwiseBayesianActiveLearningByDisagreement"], [0, 1, 1, "", "qExpectedUtilityOfBestOption"]], "botorch.acquisition.preference.AnalyticExpectedUtilityOfBestOption": [[0, 2, 1, "", "forward"]], "botorch.acquisition.preference.PairwiseBayesianActiveLearningByDisagreement": [[0, 2, 1, "", "forward"]], "botorch.acquisition.preference.qExpectedUtilityOfBestOption": [[0, 2, 1, "", "forward"]], "botorch.acquisition.prior_guided": [[0, 1, 1, "", "PriorGuidedAcquisitionFunction"]], "botorch.acquisition.prior_guided.PriorGuidedAcquisitionFunction": [[0, 2, 1, "", "forward"]], "botorch.acquisition.proximal": [[0, 1, 1, "", "ProximalAcquisitionFunction"]], "botorch.acquisition.proximal.ProximalAcquisitionFunction": [[0, 2, 1, "", "forward"]], "botorch.acquisition.risk_measures": [[0, 1, 1, "", "CVaR"], [0, 1, 1, "", "Expectation"], [0, 1, 1, "", "VaR"], [0, 1, 1, "", "WorstCase"]], "botorch.acquisition.risk_measures.CVaR": [[0, 2, 1, "", "forward"]], "botorch.acquisition.risk_measures.Expectation": [[0, 2, 1, "", "forward"]], "botorch.acquisition.risk_measures.VaR": [[0, 2, 1, "", "forward"]], "botorch.acquisition.risk_measures.WorstCase": [[0, 2, 1, "", "forward"]], "botorch.acquisition.utils": [[0, 3, 1, "", "compute_best_feasible_objective"], [0, 3, 1, "", "expand_trace_observations"], [0, 3, 1, "", "get_acquisition_function"], [0, 3, 1, "", "get_infeasible_cost"], [0, 3, 1, "", "get_optimal_samples"], [0, 3, 1, "", "project_to_sample_points"], [0, 3, 1, "", "project_to_target_fidelity"], [0, 3, 1, "", "prune_inferior_points"], [0, 3, 1, "", "repeat_to_match_aug_dim"]], "botorch.cross_validation": [[1, 1, 1, "", "CVFolds"], [1, 1, 1, "", "CVResults"], [1, 3, 1, "", "batch_cross_validation"], [1, 3, 1, "", "gen_loo_cv_folds"]], "botorch.cross_validation.CVFolds": [[1, 5, 1, "", "test_X"], [1, 5, 1, "", "test_Y"], [1, 5, 1, "", "test_Yvar"], [1, 5, 1, "", "train_X"], [1, 5, 1, "", "train_Y"], [1, 5, 1, "", "train_Yvar"]], "botorch.cross_validation.CVResults": [[1, 5, 1, "", "model"], [1, 5, 1, "", "observed_Y"], [1, 5, 1, "", "observed_Yvar"], [1, 5, 1, "", "posterior"]], "botorch.exceptions": [[2, 0, 0, "-", "errors"], [2, 0, 0, "-", "warnings"]], "botorch.exceptions.errors": [[2, 6, 1, "", "BotorchError"], [2, 6, 1, "", "BotorchTensorDimensionError"], [2, 6, 1, "", "CandidateGenerationError"], [2, 6, 1, "", "DeprecationError"], [2, 6, 1, "", "InputDataError"], [2, 6, 1, "", "ModelFittingError"], [2, 6, 1, "", "OptimizationTimeoutError"], [2, 6, 1, "", "UnsupportedError"]], "botorch.exceptions.warnings": [[2, 6, 1, "", "BadInitialCandidatesWarning"], [2, 6, 1, "", "BotorchTensorDimensionWarning"], [2, 6, 1, "", "BotorchWarning"], [2, 6, 1, "", "CostAwareWarning"], [2, 6, 1, "", "InputDataWarning"], [2, 6, 1, "", "NumericsWarning"], [2, 6, 1, "", "OptimizationWarning"], [2, 6, 1, "", "SamplingWarning"], [2, 6, 1, "", "UserInputWarning"], [2, 3, 1, "", "legacy_ei_numerics_warning"]], "botorch.fit": [[3, 3, 1, "", "fit_fully_bayesian_model_nuts"], [3, 3, 1, "", "fit_gpytorch_mll"]], "botorch.generation": [[4, 0, 0, "-", "gen"], [4, 0, 0, "-", "sampling"], [4, 0, 0, "-", "utils"]], "botorch.generation.gen": [[4, 3, 1, "", "gen_candidates_scipy"], [4, 3, 1, "", "gen_candidates_torch"], [4, 3, 1, "", "get_best_candidates"]], "botorch.generation.sampling": [[4, 1, 1, "", "BoltzmannSampling"], [4, 1, 1, "", "ConstrainedMaxPosteriorSampling"], [4, 1, 1, "", "MaxPosteriorSampling"]], "botorch.generation.sampling.BoltzmannSampling": [[4, 2, 1, "", "forward"]], "botorch.generation.sampling.ConstrainedMaxPosteriorSampling": [[4, 2, 1, "", "forward"]], "botorch.generation.sampling.MaxPosteriorSampling": [[4, 2, 1, "", "forward"], [4, 2, 1, "", "maximize_samples"]], "botorch.logging": [[6, 3, 1, "", "shape_to_str"]], "botorch.models": [[7, 0, 0, "-", "approximate_gp"], [7, 0, 0, "-", "contextual"], [7, 0, 0, "-", "contextual_multioutput"], [7, 0, 0, "-", "converter"], [7, 0, 0, "-", "cost"], [7, 0, 0, "-", "deterministic"], [7, 0, 0, "-", "ensemble"], [7, 0, 0, "-", "fully_bayesian"], [7, 0, 0, "-", "fully_bayesian_multitask"], [7, 0, 0, "-", "gp_regression"], [7, 0, 0, "-", "gp_regression_fidelity"], [7, 0, 0, "-", "gp_regression_mixed"], [7, 0, 0, "-", "gpytorch"], [7, 0, 0, "-", "higher_order_gp"], [7, 0, 0, "-", "model"], [7, 0, 0, "-", "model_list_gp_regression"], [7, 0, 0, "-", "multitask"], [7, 0, 0, "-", "pairwise_gp"]], "botorch.models.approximate_gp": [[7, 1, 1, "", "ApproximateGPyTorchModel"], [7, 1, 1, "", "SingleTaskVariationalGP"]], "botorch.models.approximate_gp.ApproximateGPyTorchModel": [[7, 2, 1, "", "eval"], [7, 2, 1, "", "forward"], [7, 4, 1, "", "num_outputs"], [7, 2, 1, "", "posterior"], [7, 2, 1, "", "train"]], "botorch.models.approximate_gp.SingleTaskVariationalGP": [[7, 4, 1, "", "batch_shape"], [7, 2, 1, "", "init_inducing_points"]], "botorch.models.contextual": [[7, 1, 1, "", "LCEAGP"], [7, 1, 1, "", "SACGP"]], "botorch.models.contextual.LCEAGP": [[7, 2, 1, "", "construct_inputs"]], "botorch.models.contextual.SACGP": [[7, 2, 1, "", "construct_inputs"]], "botorch.models.contextual_multioutput": [[7, 1, 1, "", "FixedNoiseLCEMGP"], [7, 1, 1, "", "LCEMGP"]], "botorch.models.contextual_multioutput.LCEMGP": [[7, 2, 1, "", "construct_inputs"], [7, 2, 1, "", "task_covar_module"]], "botorch.models.converter": [[7, 3, 1, "", "batched_multi_output_to_single_output"], [7, 3, 1, "", "batched_to_model_list"], [7, 3, 1, "", "get_attribute"], [7, 3, 1, "", "model_list_to_batched"], [7, 3, 1, "", "set_attribute"]], "botorch.models.cost": [[7, 1, 1, "", "AffineFidelityCostModel"], [7, 1, 1, "", "FixedCostModel"]], "botorch.models.cost.AffineFidelityCostModel": [[7, 2, 1, "", "forward"]], "botorch.models.cost.FixedCostModel": [[7, 2, 1, "", "forward"]], "botorch.models.deterministic": [[7, 1, 1, "", "AffineDeterministicModel"], [7, 1, 1, "", "FixedSingleSampleModel"], [7, 1, 1, "", "GenericDeterministicModel"], [7, 1, 1, "", "PosteriorMeanModel"]], "botorch.models.deterministic.AffineDeterministicModel": [[7, 2, 1, "", "forward"], [7, 2, 1, "", "subset_output"]], "botorch.models.deterministic.FixedSingleSampleModel": [[7, 2, 1, "", "forward"]], "botorch.models.deterministic.GenericDeterministicModel": [[7, 2, 1, "", "forward"], [7, 2, 1, "", "subset_output"]], "botorch.models.deterministic.PosteriorMeanModel": [[7, 2, 1, "", "forward"]], "botorch.models.fully_bayesian": [[7, 1, 1, "", "SaasFullyBayesianSingleTaskGP"], [7, 1, 1, "", "SaasPyroModel"], [7, 3, 1, "", "compute_dists"], [7, 3, 1, "", "matern52_kernel"], [7, 3, 1, "", "reshape_and_detach"]], "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP": [[7, 4, 1, "", "batch_shape"], [7, 2, 1, "", "condition_on_observations"], [7, 2, 1, "", "forward"], [7, 2, 1, "", "load_mcmc_samples"], [7, 2, 1, "", "load_state_dict"], [7, 4, 1, "", "median_lengthscale"], [7, 4, 1, "", "num_mcmc_samples"], [7, 2, 1, "", "posterior"], [7, 2, 1, "", "train"]], "botorch.models.fully_bayesian.SaasPyroModel": [[7, 2, 1, "", "load_mcmc_samples"], [7, 2, 1, "", "postprocess_mcmc_samples"], [7, 2, 1, "", "sample"], [7, 2, 1, "", "sample_lengthscale"], [7, 2, 1, "", "sample_mean"], [7, 2, 1, "", "sample_noise"], [7, 2, 1, "", "sample_outputscale"], [7, 2, 1, "", "set_inputs"]], "botorch.models.fully_bayesian_multitask": [[7, 1, 1, "", "MultitaskSaasPyroModel"], [7, 1, 1, "", "SaasFullyBayesianMultiTaskGP"]], "botorch.models.fully_bayesian_multitask.MultitaskSaasPyroModel": [[7, 2, 1, "", "load_mcmc_samples"], [7, 2, 1, "", "sample"], [7, 2, 1, "", "sample_latent_features"], [7, 2, 1, "", "sample_task_lengthscale"], [7, 2, 1, "", "set_inputs"]], "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP": [[7, 4, 1, "", "batch_shape"], [7, 2, 1, "", "fantasize"], [7, 2, 1, "", "forward"], [7, 2, 1, "", "load_mcmc_samples"], [7, 2, 1, "", "load_state_dict"], [7, 4, 1, "", "median_lengthscale"], [7, 4, 1, "", "num_mcmc_samples"], [7, 2, 1, "", "posterior"], [7, 2, 1, "", "train"]], "botorch.models.gp_regression": [[7, 1, 1, "", "FixedNoiseGP"], [7, 1, 1, "", "HeteroskedasticSingleTaskGP"], [7, 1, 1, "", "SingleTaskGP"]], "botorch.models.gp_regression.HeteroskedasticSingleTaskGP": [[7, 2, 1, "", "condition_on_observations"], [7, 2, 1, "", "forward"], [7, 2, 1, "", "subset_output"]], "botorch.models.gp_regression.SingleTaskGP": [[7, 2, 1, "", "construct_inputs"], [7, 2, 1, "", "forward"]], "botorch.models.gp_regression_fidelity": [[7, 1, 1, "", "FixedNoiseMultiFidelityGP"], [7, 1, 1, "", "SingleTaskMultiFidelityGP"]], "botorch.models.gp_regression_fidelity.SingleTaskMultiFidelityGP": [[7, 2, 1, "", "construct_inputs"]], "botorch.models.gp_regression_mixed": [[7, 1, 1, "", "MixedSingleTaskGP"]], "botorch.models.gp_regression_mixed.MixedSingleTaskGP": [[7, 2, 1, "", "construct_inputs"]], "botorch.models.higher_order_gp": [[7, 1, 1, "", "FlattenedStandardize"], [7, 1, 1, "", "HigherOrderGP"]], "botorch.models.higher_order_gp.FlattenedStandardize": [[7, 2, 1, "", "forward"], [7, 2, 1, "", "untransform"], [7, 2, 1, "", "untransform_posterior"]], "botorch.models.higher_order_gp.HigherOrderGP": [[7, 2, 1, "", "condition_on_observations"], [7, 2, 1, "", "forward"], [7, 2, 1, "", "get_fantasy_model"], [7, 2, 1, "", "make_posterior_variances"], [7, 2, 1, "", "posterior"]], "botorch.models.kernels": [[7, 0, 0, "-", "categorical"], [7, 0, 0, "-", "contextual_lcea"], [7, 0, 0, "-", "contextual_sac"], [7, 0, 0, "-", "downsampling"], [7, 0, 0, "-", "exponential_decay"], [7, 0, 0, "-", "infinite_width_bnn"], [7, 0, 0, "-", "linear_truncated_fidelity"], [7, 0, 0, "-", "orthogonal_additive_kernel"]], "botorch.models.kernels.categorical": [[7, 1, 1, "", "CategoricalKernel"]], "botorch.models.kernels.contextual_lcea": [[7, 1, 1, "", "LCEAKernel"]], "botorch.models.kernels.contextual_sac": [[7, 1, 1, "", "SACKernel"]], "botorch.models.kernels.downsampling": [[7, 1, 1, "", "DownsamplingKernel"]], "botorch.models.kernels.exponential_decay": [[7, 1, 1, "", "ExponentialDecayKernel"]], "botorch.models.kernels.infinite_width_bnn": [[7, 1, 1, "", "InfiniteWidthBNNKernel"]], "botorch.models.kernels.linear_truncated_fidelity": [[7, 1, 1, "", "LinearTruncatedFidelityKernel"]], "botorch.models.kernels.orthogonal_additive_kernel": [[7, 1, 1, "", "OrthogonalAdditiveKernel"]], "botorch.models.likelihoods": [[7, 0, 0, "-", "pairwise"]], "botorch.models.likelihoods.pairwise": [[7, 1, 1, "", "PairwiseLogitLikelihood"], [7, 1, 1, "", "PairwiseProbitLikelihood"]], "botorch.models.likelihoods.pairwise.PairwiseLogitLikelihood": [[7, 2, 1, "", "log_p"], [7, 2, 1, "", "negative_log_gradient_sum"], [7, 2, 1, "", "negative_log_hessian_sum"], [7, 2, 1, "", "p"]], "botorch.models.likelihoods.pairwise.PairwiseProbitLikelihood": [[7, 2, 1, "", "negative_log_gradient_sum"], [7, 2, 1, "", "negative_log_hessian_sum"], [7, 2, 1, "", "p"]], "botorch.models.model": [[7, 1, 1, "", "FantasizeMixin"], [7, 1, 1, "", "Model"], [7, 1, 1, "", "ModelDict"], [7, 1, 1, "", "ModelList"]], "botorch.models.model.FantasizeMixin": [[7, 2, 1, "", "condition_on_observations"], [7, 2, 1, "", "fantasize"], [7, 2, 1, "", "posterior"], [7, 2, 1, "", "transform_inputs"]], "botorch.models.model.Model": [[7, 5, 1, "", "_has_transformed_inputs"], [7, 5, 1, "", "_is_ensemble"], [7, 5, 1, "", "_is_fully_bayesian"], [7, 5, 1, "", "_original_train_inputs"], [7, 4, 1, "", "batch_shape"], [7, 2, 1, "", "condition_on_observations"], [7, 2, 1, "", "construct_inputs"], [7, 4, 1, "", "dtypes_of_buffers"], [7, 2, 1, "", "eval"], [7, 4, 1, "", "num_outputs"], [7, 2, 1, "", "posterior"], [7, 2, 1, "", "subset_output"], [7, 2, 1, "", "train"], [7, 2, 1, "", "transform_inputs"]], "botorch.models.model.ModelList": [[7, 4, 1, "", "batch_shape"], [7, 2, 1, "", "fantasize"], [7, 2, 1, "", "load_state_dict"], [7, 4, 1, "", "num_outputs"], [7, 2, 1, "", "posterior"], [7, 2, 1, "", "subset_output"], [7, 2, 1, "", "transform_inputs"]], "botorch.models.model_list_gp_regression": [[7, 1, 1, "", "ModelListGP"]], "botorch.models.model_list_gp_regression.ModelListGP": [[7, 2, 1, "", "condition_on_observations"]], "botorch.models.multitask": [[7, 1, 1, "", "KroneckerMultiTaskGP"], [7, 1, 1, "", "MultiTaskGP"], [7, 3, 1, "", "get_task_value_remapping"]], "botorch.models.multitask.KroneckerMultiTaskGP": [[7, 2, 1, "", "forward"], [7, 2, 1, "", "posterior"], [7, 4, 1, "", "predictive_mean_cache"], [7, 2, 1, "", "train"], [7, 4, 1, "", "train_full_covar"]], "botorch.models.multitask.MultiTaskGP": [[7, 2, 1, "", "construct_inputs"], [7, 2, 1, "", "forward"], [7, 2, 1, "", "get_all_tasks"]], "botorch.models.pairwise_gp": [[7, 1, 1, "", "PairwiseGP"], [7, 1, 1, "", "PairwiseLaplaceMarginalLogLikelihood"]], "botorch.models.pairwise_gp.PairwiseGP": [[7, 4, 1, "", "batch_shape"], [7, 4, 1, "", "comparisons"], [7, 2, 1, "", "condition_on_observations"], [7, 2, 1, "", "construct_inputs"], [7, 4, 1, "", "datapoints"], [7, 2, 1, "", "forward"], [7, 2, 1, "", "load_state_dict"], [7, 4, 1, "", "num_outputs"], [7, 2, 1, "", "posterior"], [7, 2, 1, "", "set_train_data"], [7, 4, 1, "", "unconsolidated_utility"]], "botorch.models.pairwise_gp.PairwiseLaplaceMarginalLogLikelihood": [[7, 2, 1, "", "forward"]], "botorch.models.transforms": [[7, 0, 0, "-", "factory"], [7, 0, 0, "-", "input"], [7, 0, 0, "-", "outcome"], [7, 0, 0, "-", "utils"]], "botorch.models.transforms.factory": [[7, 3, 1, "", "get_rounding_input_transform"]], "botorch.models.transforms.input": [[7, 1, 1, "", "AppendFeatures"], [7, 1, 1, "", "ChainedInputTransform"], [7, 1, 1, "", "FilterFeatures"], [7, 1, 1, "", "InputPerturbation"], [7, 1, 1, "", "InputStandardize"], [7, 1, 1, "", "Log10"], [7, 1, 1, "", "Normalize"], [7, 1, 1, "", "OneHotToNumeric"], [7, 1, 1, "", "Round"], [7, 1, 1, "", "Warp"]], "botorch.models.transforms.input.AppendFeatures": [[7, 5, 1, "", "is_one_to_many"], [7, 2, 1, "", "transform"]], "botorch.models.transforms.input.ChainedInputTransform": [[7, 2, 1, "", "equals"], [7, 2, 1, "", "preprocess_transform"], [7, 2, 1, "", "transform"], [7, 2, 1, "", "untransform"]], "botorch.models.transforms.input.FilterFeatures": [[7, 2, 1, "", "equals"], [7, 2, 1, "", "transform"]], "botorch.models.transforms.input.InputPerturbation": [[7, 4, 1, "", "batch_shape"], [7, 5, 1, "", "is_one_to_many"], [7, 2, 1, "", "transform"]], "botorch.models.transforms.input.InputStandardize": [[7, 4, 1, "", "means"], [7, 4, 1, "", "stds"]], "botorch.models.transforms.input.Normalize": [[7, 4, 1, "", "bounds"], [7, 2, 1, "", "get_init_args"], [7, 4, 1, "", "learn_bounds"], [7, 4, 1, "", "mins"], [7, 4, 1, "", "ranges"]], "botorch.models.transforms.input.OneHotToNumeric": [[7, 2, 1, "", "equals"], [7, 2, 1, "", "transform"], [7, 2, 1, "", "untransform"]], "botorch.models.transforms.input.Round": [[7, 2, 1, "", "equals"], [7, 2, 1, "", "get_init_args"], [7, 2, 1, "", "transform"]], "botorch.models.transforms.outcome": [[7, 1, 1, "", "Bilog"], [7, 1, 1, "", "ChainedOutcomeTransform"], [7, 1, 1, "", "Log"], [7, 1, 1, "", "Power"], [7, 1, 1, "", "Standardize"]], "botorch.models.transforms.outcome.Bilog": [[7, 2, 1, "", "forward"], [7, 2, 1, "", "subset_output"], [7, 2, 1, "", "untransform"], [7, 2, 1, "", "untransform_posterior"]], "botorch.models.transforms.outcome.ChainedOutcomeTransform": [[7, 2, 1, "", "forward"], [7, 2, 1, "", "subset_output"], [7, 2, 1, "", "untransform"], [7, 2, 1, "", "untransform_posterior"]], "botorch.models.transforms.outcome.Log": [[7, 2, 1, "", "forward"], [7, 2, 1, "", "subset_output"], [7, 2, 1, "", "untransform"], [7, 2, 1, "", "untransform_posterior"]], "botorch.models.transforms.outcome.Power": [[7, 2, 1, "", "forward"], [7, 2, 1, "", "subset_output"], [7, 2, 1, "", "untransform"], [7, 2, 1, "", "untransform_posterior"]], "botorch.models.transforms.outcome.Standardize": [[7, 2, 1, "", "forward"], [7, 2, 1, "", "subset_output"], [7, 2, 1, "", "untransform"], [7, 2, 1, "", "untransform_posterior"]], "botorch.models.transforms.utils": [[7, 3, 1, "", "expand_and_copy_tensor"], [7, 3, 1, "", "lognorm_to_norm"], [7, 3, 1, "", "norm_to_lognorm"], [7, 3, 1, "", "norm_to_lognorm_mean"], [7, 3, 1, "", "norm_to_lognorm_variance"], [7, 3, 1, "", "subset_transform"]], "botorch.models.utils": [[7, 0, 0, "-", "assorted"], [7, 0, 0, "-", "gpytorch_modules"], [7, 0, 0, "-", "inducing_point_allocators"]], "botorch.models.utils.assorted": [[7, 3, 1, "", "add_output_dim"], [7, 3, 1, "", "check_min_max_scaling"], [7, 3, 1, "", "check_no_nans"], [7, 3, 1, "", "check_standardization"], [7, 3, 1, "", "consolidate_duplicates"], [7, 3, 1, "", "detect_duplicates"], [7, 1, 1, "", "fantasize"], [7, 3, 1, "", "gpt_posterior_settings"], [7, 3, 1, "", "mod_batch_shape"], [7, 3, 1, "", "multioutput_to_batch_mode_transform"], [7, 3, 1, "", "validate_input_scaling"]], "botorch.models.utils.gpytorch_modules": [[7, 3, 1, "", "get_gaussian_likelihood_with_gamma_prior"], [7, 3, 1, "", "get_matern_kernel_with_gamma_prior"]], "botorch.models.utils.inducing_point_allocators": [[7, 1, 1, "", "ExpectedImprovementQualityFunction"], [7, 1, 1, "", "GreedyImprovementReduction"], [7, 1, 1, "", "GreedyVarianceReduction"], [7, 1, 1, "", "InducingPointAllocator"], [7, 1, 1, "", "QualityFunction"], [7, 1, 1, "", "UnitQualityFunction"], [7, 3, 1, "", "_pivoted_cholesky_init"]], "botorch.models.utils.inducing_point_allocators.InducingPointAllocator": [[7, 2, 1, "", "allocate_inducing_points"]], "botorch.optim": [[8, 0, 0, "-", "core"], [8, 0, 0, "-", "fit"], [8, 0, 0, "-", "homotopy"], [8, 0, 0, "-", "initializers"], [8, 0, 0, "-", "optimize"], [8, 0, 0, "-", "optimize_homotopy"], [8, 0, 0, "-", "parameter_constraints"], [8, 0, 0, "-", "stopping"]], "botorch.optim.closures": [[8, 0, 0, "-", "core"], [8, 0, 0, "-", "model_closures"]], "botorch.optim.closures.core": [[8, 1, 1, "", "ForwardBackwardClosure"], [8, 1, 1, "", "NdarrayOptimizationClosure"]], "botorch.optim.closures.core.NdarrayOptimizationClosure": [[8, 4, 1, "", "state"]], "botorch.optim.closures.model_closures": [[8, 3, 1, "", "get_loss_closure"], [8, 3, 1, "", "get_loss_closure_with_grads"]], "botorch.optim.core": [[8, 1, 1, "", "OptimizationResult"], [8, 1, 1, "", "OptimizationStatus"], [8, 3, 1, "", "scipy_minimize"], [8, 3, 1, "", "torch_minimize"]], "botorch.optim.core.OptimizationResult": [[8, 5, 1, "", "fval"], [8, 5, 1, "", "message"], [8, 5, 1, "", "runtime"], [8, 5, 1, "", "status"], [8, 5, 1, "", "step"]], "botorch.optim.core.OptimizationStatus": [[8, 5, 1, "", "FAILURE"], [8, 5, 1, "", "RUNNING"], [8, 5, 1, "", "STOPPED"], [8, 5, 1, "", "SUCCESS"]], "botorch.optim.fit": [[8, 3, 1, "", "fit_gpytorch_mll_scipy"], [8, 3, 1, "", "fit_gpytorch_mll_torch"]], "botorch.optim.homotopy": [[8, 1, 1, "", "FixedHomotopySchedule"], [8, 1, 1, "", "Homotopy"], [8, 1, 1, "", "HomotopyParameter"], [8, 1, 1, "", "HomotopySchedule"], [8, 1, 1, "", "LinearHomotopySchedule"], [8, 1, 1, "", "LogLinearHomotopySchedule"]], "botorch.optim.homotopy.FixedHomotopySchedule": [[8, 4, 1, "", "num_steps"], [8, 2, 1, "", "restart"], [8, 4, 1, "", "should_stop"], [8, 2, 1, "", "step"], [8, 4, 1, "", "value"]], "botorch.optim.homotopy.Homotopy": [[8, 2, 1, "", "reset"], [8, 2, 1, "", "restart"], [8, 4, 1, "", "should_stop"], [8, 2, 1, "", "step"]], "botorch.optim.homotopy.HomotopyParameter": [[8, 5, 1, "", "parameter"], [8, 5, 1, "", "schedule"]], "botorch.optim.homotopy.HomotopySchedule": [[8, 4, 1, "", "num_steps"], [8, 2, 1, "", "restart"], [8, 4, 1, "", "should_stop"], [8, 2, 1, "", "step"], [8, 4, 1, "", "value"]], "botorch.optim.initializers": [[8, 3, 1, "", "gen_batch_initial_conditions"], [8, 3, 1, "", "gen_one_shot_hvkg_initial_conditions"], [8, 3, 1, "", "gen_one_shot_kg_initial_conditions"], [8, 3, 1, "", "gen_value_function_initial_conditions"], [8, 3, 1, "", "initialize_q_batch"], [8, 3, 1, "", "initialize_q_batch_nonneg"], [8, 3, 1, "", "is_nonnegative"], [8, 3, 1, "", "sample_perturbed_subset_dims"], [8, 3, 1, "", "sample_points_around_best"], [8, 3, 1, "", "sample_q_batches_from_polytope"], [8, 3, 1, "", "sample_truncated_normal_perturbations"], [8, 3, 1, "", "transform_constraints"], [8, 3, 1, "", "transform_inter_point_constraint"], [8, 3, 1, "", "transform_intra_point_constraint"]], "botorch.optim.optimize": [[8, 1, 1, "", "OptimizeAcqfInputs"], [8, 3, 1, "", "optimize_acqf"], [8, 3, 1, "", "optimize_acqf_cyclic"], [8, 3, 1, "", "optimize_acqf_discrete"], [8, 3, 1, "", "optimize_acqf_discrete_local_search"], [8, 3, 1, "", "optimize_acqf_list"], [8, 3, 1, "", "optimize_acqf_mixed"]], "botorch.optim.optimize.OptimizeAcqfInputs": [[8, 5, 1, "", "acq_function"], [8, 5, 1, "", "batch_initial_conditions"], [8, 5, 1, "", "bounds"], [8, 5, 1, "", "equality_constraints"], [8, 5, 1, "", "fixed_features"], [8, 4, 1, "", "full_tree"], [8, 5, 1, "", "gen_candidates"], [8, 2, 1, "", "get_ic_generator"], [8, 5, 1, "", "ic_gen_kwargs"], [8, 5, 1, "", "ic_generator"], [8, 5, 1, "", "inequality_constraints"], [8, 5, 1, "", "nonlinear_inequality_constraints"], [8, 5, 1, "", "num_restarts"], [8, 5, 1, "", "options"], [8, 5, 1, "", "post_processing_func"], [8, 5, 1, "", "q"], [8, 5, 1, "", "raw_samples"], [8, 5, 1, "", "retry_on_optimization_warning"], [8, 5, 1, "", "return_best_only"], [8, 5, 1, "", "return_full_tree"], [8, 5, 1, "", "sequential"], [8, 5, 1, "", "timeout_sec"]], "botorch.optim.optimize_homotopy": [[8, 3, 1, "", "optimize_acqf_homotopy"], [8, 3, 1, "", "prune_candidates"]], "botorch.optim.parameter_constraints": [[8, 3, 1, "", "eval_lin_constraint"], [8, 3, 1, "", "lin_constraint_jac"], [8, 3, 1, "", "make_scipy_bounds"], [8, 3, 1, "", "make_scipy_linear_constraints"], [8, 3, 1, "", "make_scipy_nonlinear_inequality_constraints"], [8, 3, 1, "", "nonlinear_constraint_is_feasible"]], "botorch.optim.stopping": [[8, 1, 1, "", "ExpMAStoppingCriterion"]], "botorch.optim.stopping.ExpMAStoppingCriterion": [[8, 2, 1, "", "evaluate"]], "botorch.optim.utils": [[8, 0, 0, "-", "acquisition_utils"], [8, 0, 0, "-", "common"], [8, 0, 0, "-", "model_utils"], [8, 0, 0, "-", "numpy_utils"], [8, 0, 0, "-", "timeout"]], "botorch.optim.utils.acquisition_utils": [[8, 3, 1, "", "columnwise_clamp"], [8, 3, 1, "", "fix_features"], [8, 3, 1, "", "get_X_baseline"]], "botorch.optim.utils.model_utils": [[8, 1, 1, "", "TorchAttr"], [8, 3, 1, "", "get_data_loader"], [8, 3, 1, "", "get_name_filter"], [8, 3, 1, "", "get_parameters"], [8, 3, 1, "", "get_parameters_and_bounds"], [8, 3, 1, "", "sample_all_priors"]], "botorch.optim.utils.model_utils.TorchAttr": [[8, 5, 1, "", "device"], [8, 5, 1, "", "dtype"], [8, 5, 1, "", "shape"]], "botorch.optim.utils.numpy_utils": [[8, 3, 1, "", "as_ndarray"], [8, 3, 1, "", "get_bounds_as_ndarray"], [8, 3, 1, "", "get_tensors_as_ndarray_1d"], [8, 3, 1, "", "set_tensors_from_ndarray_1d"]], "botorch.optim.utils.timeout": [[8, 3, 1, "", "minimize_with_timeout"]], "botorch.posteriors": [[9, 0, 0, "-", "base_samples"], [9, 0, 0, "-", "ensemble"], [9, 0, 0, "-", "fully_bayesian"], [9, 0, 0, "-", "gpytorch"], [9, 0, 0, "-", "higher_order"], [9, 0, 0, "-", "multitask"], [9, 0, 0, "-", "posterior"], [9, 0, 0, "-", "posterior_list"], [9, 0, 0, "-", "torch"], [9, 0, 0, "-", "transformed"]], "botorch.posteriors.ensemble": [[9, 1, 1, "", "EnsemblePosterior"]], "botorch.posteriors.ensemble.EnsemblePosterior": [[9, 4, 1, "", "device"], [9, 4, 1, "", "dtype"], [9, 4, 1, "", "ensemble_size"], [9, 4, 1, "", "mean"], [9, 2, 1, "", "rsample"], [9, 2, 1, "", "rsample_from_base_samples"], [9, 4, 1, "", "variance"], [9, 4, 1, "", "weights"]], "botorch.posteriors.fully_bayesian": [[9, 1, 1, "", "FullyBayesianPosterior"], [9, 1, 1, "", "GaussianMixturePosterior"], [9, 3, 1, "", "batched_bisect"]], "botorch.posteriors.fully_bayesian.GaussianMixturePosterior": [[9, 4, 1, "", "batch_range"], [9, 4, 1, "", "mixture_covariance_matrix"], [9, 4, 1, "", "mixture_mean"], [9, 4, 1, "", "mixture_variance"], [9, 2, 1, "", "quantile"]], "botorch.posteriors.gpytorch": [[9, 1, 1, "", "GPyTorchPosterior"], [9, 3, 1, "", "scalarize_posterior"], [9, 3, 1, "", "scalarize_posterior_gpytorch"]], "botorch.posteriors.gpytorch.GPyTorchPosterior": [[9, 4, 1, "", "base_sample_shape"], [9, 4, 1, "", "batch_range"], [9, 2, 1, "", "density"], [9, 5, 1, "", "distribution"], [9, 4, 1, "", "mean"], [9, 4, 1, "", "mvn"], [9, 2, 1, "", "quantile"], [9, 2, 1, "", "rsample"], [9, 2, 1, "", "rsample_from_base_samples"], [9, 4, 1, "", "variance"]], "botorch.posteriors.higher_order": [[9, 1, 1, "", "HigherOrderGPPosterior"]], "botorch.posteriors.higher_order.HigherOrderGPPosterior": [[9, 4, 1, "", "base_sample_shape"], [9, 4, 1, "", "batch_range"], [9, 2, 1, "", "rsample"], [9, 2, 1, "", "rsample_from_base_samples"]], "botorch.posteriors.multitask": [[9, 1, 1, "", "MultitaskGPPosterior"]], "botorch.posteriors.multitask.MultitaskGPPosterior": [[9, 4, 1, "", "base_sample_shape"], [9, 4, 1, "", "batch_range"], [9, 2, 1, "", "rsample"], [9, 2, 1, "", "rsample_from_base_samples"]], "botorch.posteriors.posterior_list": [[9, 1, 1, "", "PosteriorList"]], "botorch.posteriors.posterior_list.PosteriorList": [[9, 4, 1, "", "device"], [9, 4, 1, "", "dtype"], [9, 4, 1, "", "mean"], [9, 2, 1, "", "rsample"], [9, 4, 1, "", "variance"]], "botorch.posteriors.torch": [[9, 1, 1, "", "TorchPosterior"]], "botorch.posteriors.torch.TorchPosterior": [[9, 2, 1, "", "density"], [9, 4, 1, "", "device"], [9, 4, 1, "", "dtype"], [9, 2, 1, "", "quantile"], [9, 2, 1, "", "rsample"]], "botorch.posteriors.transformed": [[9, 1, 1, "", "TransformedPosterior"]], "botorch.posteriors.transformed.TransformedPosterior": [[9, 4, 1, "", "base_sample_shape"], [9, 4, 1, "", "batch_range"], [9, 4, 1, "", "device"], [9, 4, 1, "", "dtype"], [9, 4, 1, "", "mean"], [9, 2, 1, "", "rsample"], [9, 2, 1, "", "rsample_from_base_samples"], [9, 4, 1, "", "variance"]], "botorch.sampling": [[10, 0, 0, "-", "base"], [10, 0, 0, "-", "get_sampler"], [10, 0, 0, "-", "index_sampler"], [10, 0, 0, "-", "list_sampler"], [10, 0, 0, "-", "normal"], [10, 0, 0, "-", "pairwise_samplers"], [10, 0, 0, "-", "qmc"], [10, 0, 0, "-", "stochastic_samplers"]], "botorch.sampling.get_sampler": [[10, 3, 1, "", "get_sampler"]], "botorch.sampling.index_sampler": [[10, 1, 1, "", "IndexSampler"]], "botorch.sampling.index_sampler.IndexSampler": [[10, 2, 1, "", "forward"]], "botorch.sampling.normal": [[10, 1, 1, "", "IIDNormalSampler"], [10, 1, 1, "", "NormalMCSampler"], [10, 1, 1, "", "SobolQMCNormalSampler"]], "botorch.sampling.normal.NormalMCSampler": [[10, 2, 1, "", "forward"]], "botorch.sampling.pairwise_samplers": [[10, 1, 1, "", "PairwiseIIDNormalSampler"], [10, 1, 1, "", "PairwiseMCSampler"], [10, 1, 1, "", "PairwiseSobolQMCNormalSampler"]], "botorch.sampling.pairwise_samplers.PairwiseMCSampler": [[10, 2, 1, "", "forward"]], "botorch.sampling.pathwise": [[10, 0, 0, "-", "paths"], [10, 0, 0, "-", "posterior_samplers"], [10, 0, 0, "-", "prior_samplers"], [10, 0, 0, "-", "update_strategies"], [10, 0, 0, "-", "utils"]], "botorch.sampling.pathwise.features": [[10, 0, 0, "-", "generators"], [10, 0, 0, "-", "maps"]], "botorch.sampling.pathwise.features.generators": [[10, 3, 1, "", "gen_kernel_features"]], "botorch.sampling.pathwise.features.maps": [[10, 1, 1, "", "FeatureMap"], [10, 1, 1, "", "KernelEvaluationMap"], [10, 1, 1, "", "KernelFeatureMap"]], "botorch.sampling.pathwise.features.maps.FeatureMap": [[10, 5, 1, "", "batch_shape"], [10, 5, 1, "", "input_transform"], [10, 5, 1, "", "num_outputs"], [10, 5, 1, "", "output_transform"]], "botorch.sampling.pathwise.features.maps.KernelEvaluationMap": [[10, 4, 1, "", "batch_shape"], [10, 2, 1, "", "forward"], [10, 4, 1, "", "num_outputs"]], "botorch.sampling.pathwise.features.maps.KernelFeatureMap": [[10, 4, 1, "", "batch_shape"], [10, 2, 1, "", "forward"], [10, 4, 1, "", "num_outputs"]], "botorch.sampling.pathwise.paths": [[10, 1, 1, "", "GeneralizedLinearPath"], [10, 1, 1, "", "PathDict"], [10, 1, 1, "", "PathList"], [10, 1, 1, "", "SamplePath"]], "botorch.sampling.pathwise.paths.GeneralizedLinearPath": [[10, 2, 1, "", "forward"]], "botorch.sampling.pathwise.paths.PathDict": [[10, 2, 1, "", "forward"], [10, 2, 1, "", "items"], [10, 2, 1, "", "keys"], [10, 2, 1, "", "values"]], "botorch.sampling.pathwise.paths.PathList": [[10, 2, 1, "", "forward"]], "botorch.sampling.pathwise.posterior_samplers": [[10, 1, 1, "", "MatheronPath"], [10, 3, 1, "", "draw_matheron_paths"]], "botorch.sampling.pathwise.prior_samplers": [[10, 3, 1, "", "draw_kernel_feature_paths"]], "botorch.sampling.pathwise.update_strategies": [[10, 3, 1, "", "gaussian_update"]], "botorch.sampling.pathwise.utils": [[10, 1, 1, "", "ChainedTransform"], [10, 1, 1, "", "FeatureSelector"], [10, 1, 1, "", "InverseLengthscaleTransform"], [10, 1, 1, "", "OutcomeUntransformer"], [10, 1, 1, "", "OutputscaleTransform"], [10, 1, 1, "", "SineCosineTransform"], [10, 1, 1, "", "TensorTransform"], [10, 1, 1, "", "TransformedModuleMixin"], [10, 3, 1, "", "get_input_transform"], [10, 3, 1, "", "get_output_transform"], [10, 3, 1, "", "get_train_inputs"], [10, 3, 1, "", "get_train_targets"]], "botorch.sampling.pathwise.utils.ChainedTransform": [[10, 2, 1, "", "forward"]], "botorch.sampling.pathwise.utils.FeatureSelector": [[10, 2, 1, "", "forward"]], "botorch.sampling.pathwise.utils.InverseLengthscaleTransform": [[10, 2, 1, "", "forward"]], "botorch.sampling.pathwise.utils.OutcomeUntransformer": [[10, 2, 1, "", "forward"]], "botorch.sampling.pathwise.utils.OutputscaleTransform": [[10, 2, 1, "", "forward"]], "botorch.sampling.pathwise.utils.SineCosineTransform": [[10, 2, 1, "", "forward"]], "botorch.sampling.pathwise.utils.TensorTransform": [[10, 2, 1, "", "forward"]], "botorch.sampling.pathwise.utils.TransformedModuleMixin": [[10, 5, 1, "", "input_transform"], [10, 5, 1, "", "output_transform"]], "botorch.sampling.qmc": [[10, 1, 1, "", "MultivariateNormalQMCEngine"], [10, 1, 1, "", "NormalQMCEngine"]], "botorch.sampling.qmc.MultivariateNormalQMCEngine": [[10, 2, 1, "", "draw"]], "botorch.sampling.qmc.NormalQMCEngine": [[10, 2, 1, "", "draw"]], "botorch.sampling.stochastic_samplers": [[10, 1, 1, "", "ForkedRNGSampler"], [10, 1, 1, "", "StochasticSampler"]], "botorch.sampling.stochastic_samplers.ForkedRNGSampler": [[10, 2, 1, "", "forward"]], "botorch.sampling.stochastic_samplers.StochasticSampler": [[10, 2, 1, "", "forward"]], "botorch.settings": [[11, 1, 1, "", "debug"], [11, 1, 1, "", "log_level"], [11, 1, 1, "", "propagate_grads"], [11, 1, 1, "", "validate_input_scaling"]], "botorch.settings.log_level": [[11, 5, 1, "", "level"]], "botorch.test_functions": [[12, 0, 0, "-", "base"], [12, 0, 0, "-", "multi_fidelity"], [12, 0, 0, "-", "multi_objective"], [12, 0, 0, "-", "multi_objective_multi_fidelity"], [12, 0, 0, "-", "sensitivity_analysis"], [12, 0, 0, "-", "synthetic"], [12, 0, 0, "-", "utils"]], "botorch.test_functions.base": [[12, 1, 1, "", "BaseTestProblem"], [12, 1, 1, "", "ConstrainedBaseTestProblem"], [12, 1, 1, "", "MultiObjectiveTestProblem"]], "botorch.test_functions.base.BaseTestProblem": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 2, 1, "", "forward"]], "botorch.test_functions.base.ConstrainedBaseTestProblem": [[12, 5, 1, "", "constraint_noise_std"], [12, 2, 1, "", "evaluate_slack"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "is_feasible"], [12, 5, 1, "", "num_constraints"]], "botorch.test_functions.base.MultiObjectiveTestProblem": [[12, 2, 1, "", "gen_pareto_front"], [12, 4, 1, "", "max_hv"], [12, 5, 1, "", "num_objectives"]], "botorch.test_functions.multi_fidelity": [[12, 1, 1, "", "AugmentedBranin"], [12, 1, 1, "", "AugmentedHartmann"], [12, 1, 1, "", "AugmentedRosenbrock"]], "botorch.test_functions.multi_fidelity.AugmentedBranin": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.multi_fidelity.AugmentedHartmann": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.multi_fidelity.AugmentedRosenbrock": [[12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.multi_objective": [[12, 1, 1, "", "BNH"], [12, 1, 1, "", "BraninCurrin"], [12, 1, 1, "", "C2DTLZ2"], [12, 1, 1, "", "CONSTR"], [12, 1, 1, "", "CarSideImpact"], [12, 1, 1, "", "ConstrainedBraninCurrin"], [12, 1, 1, "", "DH"], [12, 1, 1, "", "DH1"], [12, 1, 1, "", "DH2"], [12, 1, 1, "", "DH3"], [12, 1, 1, "", "DH4"], [12, 1, 1, "", "DTLZ"], [12, 1, 1, "", "DTLZ1"], [12, 1, 1, "", "DTLZ2"], [12, 1, 1, "", "DTLZ3"], [12, 1, 1, "", "DTLZ4"], [12, 1, 1, "", "DTLZ5"], [12, 1, 1, "", "DTLZ7"], [12, 1, 1, "", "DiscBrake"], [12, 1, 1, "", "GMM"], [12, 1, 1, "", "MW7"], [12, 1, 1, "", "OSY"], [12, 1, 1, "", "Penicillin"], [12, 1, 1, "", "SRN"], [12, 1, 1, "", "ToyRobust"], [12, 1, 1, "", "VehicleSafety"], [12, 1, 1, "", "WeldedBeam"], [12, 1, 1, "", "ZDT"], [12, 1, 1, "", "ZDT1"], [12, 1, 1, "", "ZDT2"], [12, 1, 1, "", "ZDT3"]], "botorch.test_functions.multi_objective.BNH": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "num_constraints"], [12, 5, 1, "", "num_objectives"]], "botorch.test_functions.multi_objective.BraninCurrin": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "num_objectives"]], "botorch.test_functions.multi_objective.C2DTLZ2": [[12, 2, 1, "", "evaluate_slack_true"], [12, 5, 1, "", "num_constraints"]], "botorch.test_functions.multi_objective.CONSTR": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "num_constraints"], [12, 5, 1, "", "num_objectives"]], "botorch.test_functions.multi_objective.CarSideImpact": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "num_objectives"]], "botorch.test_functions.multi_objective.ConstrainedBraninCurrin": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 5, 1, "", "num_constraints"], [12, 5, 1, "", "num_objectives"]], "botorch.test_functions.multi_objective.DH": [[12, 5, 1, "", "num_objectives"]], "botorch.test_functions.multi_objective.DH1": [[12, 5, 1, "", "alpha"], [12, 5, 1, "", "beta"], [12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.multi_objective.DH2": [[12, 5, 1, "", "beta"]], "botorch.test_functions.multi_objective.DH3": [[12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.multi_objective.DTLZ1": [[12, 2, 1, "", "evaluate_true"], [12, 2, 1, "", "gen_pareto_front"]], "botorch.test_functions.multi_objective.DTLZ2": [[12, 2, 1, "", "evaluate_true"], [12, 2, 1, "", "gen_pareto_front"]], "botorch.test_functions.multi_objective.DTLZ3": [[12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.multi_objective.DTLZ5": [[12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.multi_objective.DTLZ7": [[12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.multi_objective.DiscBrake": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "num_constraints"], [12, 5, 1, "", "num_objectives"]], "botorch.test_functions.multi_objective.GMM": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.multi_objective.MW7": [[12, 2, 1, "", "LA2"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "num_constraints"], [12, 5, 1, "", "num_objectives"]], "botorch.test_functions.multi_objective.OSY": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "num_constraints"], [12, 5, 1, "", "num_objectives"]], "botorch.test_functions.multi_objective.Penicillin": [[12, 5, 1, "", "E_d"], [12, 5, 1, "", "E_g"], [12, 5, 1, "", "K"], [12, 5, 1, "", "K_1"], [12, 5, 1, "", "K_2"], [12, 5, 1, "", "K_I"], [12, 5, 1, "", "K_X"], [12, 5, 1, "", "K_p"], [12, 5, 1, "", "R"], [12, 5, 1, "", "T_o"], [12, 5, 1, "", "T_v"], [12, 5, 1, "", "V_max"], [12, 5, 1, "", "Y_ps"], [12, 5, 1, "", "Y_xs"], [12, 5, 1, "", "alpha_1"], [12, 5, 1, "", "alpha_2"], [12, 5, 1, "", "alpha_3"], [12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "k_d"], [12, 5, 1, "", "k_g"], [12, 5, 1, "", "lambd"], [12, 5, 1, "", "m_X"], [12, 5, 1, "", "mu_X"], [12, 5, 1, "", "mu_p"], [12, 5, 1, "", "num_objectives"], [12, 2, 1, "", "penicillin_vectorized"]], "botorch.test_functions.multi_objective.SRN": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "num_constraints"], [12, 5, 1, "", "num_objectives"]], "botorch.test_functions.multi_objective.ToyRobust": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 2, 1, "", "f_1"], [12, 2, 1, "", "f_2"], [12, 5, 1, "", "levy"], [12, 5, 1, "", "num_objectives"]], "botorch.test_functions.multi_objective.VehicleSafety": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "num_objectives"]], "botorch.test_functions.multi_objective.WeldedBeam": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "num_constraints"], [12, 5, 1, "", "num_objectives"]], "botorch.test_functions.multi_objective.ZDT1": [[12, 2, 1, "", "evaluate_true"], [12, 2, 1, "", "gen_pareto_front"]], "botorch.test_functions.multi_objective.ZDT2": [[12, 2, 1, "", "evaluate_true"], [12, 2, 1, "", "gen_pareto_front"]], "botorch.test_functions.multi_objective.ZDT3": [[12, 2, 1, "", "evaluate_true"], [12, 2, 1, "", "gen_pareto_front"]], "botorch.test_functions.multi_objective_multi_fidelity": [[12, 1, 1, "", "MOMFBraninCurrin"], [12, 1, 1, "", "MOMFPark"]], "botorch.test_functions.multi_objective_multi_fidelity.MOMFBraninCurrin": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "num_objectives"]], "botorch.test_functions.multi_objective_multi_fidelity.MOMFPark": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "num_objectives"]], "botorch.test_functions.sensitivity_analysis": [[12, 1, 1, "", "Gsobol"], [12, 1, 1, "", "Ishigami"], [12, 1, 1, "", "Morris"]], "botorch.test_functions.sensitivity_analysis.Gsobol": [[12, 2, 1, "", "evaluate_true"], [12, 2, 1, "", "optimal_sobol_indicies"]], "botorch.test_functions.sensitivity_analysis.Ishigami": [[12, 2, 1, "", "compute_dgsm"], [12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.sensitivity_analysis.Morris": [[12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic": [[12, 1, 1, "", "Ackley"], [12, 1, 1, "", "Beale"], [12, 1, 1, "", "Branin"], [12, 1, 1, "", "Bukin"], [12, 1, 1, "", "ConstrainedGramacy"], [12, 1, 1, "", "ConstrainedHartmann"], [12, 1, 1, "", "ConstrainedHartmannSmooth"], [12, 1, 1, "", "ConstrainedSyntheticTestFunction"], [12, 1, 1, "", "Cosine8"], [12, 1, 1, "", "DixonPrice"], [12, 1, 1, "", "DropWave"], [12, 1, 1, "", "EggHolder"], [12, 1, 1, "", "Griewank"], [12, 1, 1, "", "Hartmann"], [12, 1, 1, "", "HolderTable"], [12, 1, 1, "", "Levy"], [12, 1, 1, "", "Michalewicz"], [12, 1, 1, "", "Powell"], [12, 1, 1, "", "PressureVessel"], [12, 1, 1, "", "Rastrigin"], [12, 1, 1, "", "Rosenbrock"], [12, 1, 1, "", "Shekel"], [12, 1, 1, "", "SixHumpCamel"], [12, 1, 1, "", "SpeedReducer"], [12, 1, 1, "", "StyblinskiTang"], [12, 1, 1, "", "SyntheticTestFunction"], [12, 1, 1, "", "TensionCompressionString"], [12, 1, 1, "", "ThreeHumpCamel"], [12, 1, 1, "", "WeldedBeamSO"]], "botorch.test_functions.synthetic.Ackley": [[12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.Beale": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.Branin": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.Bukin": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.ConstrainedGramacy": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "num_constraints"], [12, 5, 1, "", "num_objectives"]], "botorch.test_functions.synthetic.ConstrainedHartmann": [[12, 2, 1, "", "evaluate_slack_true"], [12, 5, 1, "", "num_constraints"]], "botorch.test_functions.synthetic.ConstrainedHartmannSmooth": [[12, 2, 1, "", "evaluate_slack_true"], [12, 5, 1, "", "num_constraints"]], "botorch.test_functions.synthetic.Cosine8": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.DixonPrice": [[12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.DropWave": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.EggHolder": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.Griewank": [[12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.Hartmann": [[12, 2, 1, "", "evaluate_true"], [12, 4, 1, "", "optimizers"]], "botorch.test_functions.synthetic.HolderTable": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.Levy": [[12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.Michalewicz": [[12, 2, 1, "", "evaluate_true"], [12, 4, 1, "", "optimizers"]], "botorch.test_functions.synthetic.Powell": [[12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.PressureVessel": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "num_constraints"]], "botorch.test_functions.synthetic.Rastrigin": [[12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.Rosenbrock": [[12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.Shekel": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.SixHumpCamel": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.SpeedReducer": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "num_constraints"]], "botorch.test_functions.synthetic.StyblinskiTang": [[12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.SyntheticTestFunction": [[12, 5, 1, "", "num_objectives"], [12, 4, 1, "", "optimal_value"]], "botorch.test_functions.synthetic.TensionCompressionString": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "num_constraints"]], "botorch.test_functions.synthetic.ThreeHumpCamel": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.WeldedBeamSO": [[12, 5, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "num_constraints"]], "botorch.test_functions.utils": [[12, 3, 1, "", "round_nearest"]], "botorch.utils": [[13, 0, 0, "-", "constants"], [13, 0, 0, "-", "constraints"], [13, 0, 0, "-", "containers"], [13, 0, 0, "-", "context_managers"], [13, 0, 0, "-", "datasets"], [13, 0, 0, "-", "dispatcher"], [13, 0, 0, "-", "feasible_volume"], [13, 0, 0, "-", "gp_sampling"], [13, 0, 0, "-", "low_rank"], [13, 0, 0, "-", "multitask"], [13, 0, 0, "-", "objective"], [13, 0, 0, "-", "rounding"], [13, 0, 0, "-", "safe_math"], [13, 0, 0, "-", "sampling"], [13, 0, 0, "-", "test_helpers"], [13, 0, 0, "-", "testing"], [13, 0, 0, "-", "torch"], [13, 0, 0, "-", "transforms"], [13, 0, 0, "-", "types"]], "botorch.utils.constants": [[13, 3, 1, "", "get_constants"], [13, 3, 1, "", "get_constants_like"]], "botorch.utils.constraints": [[13, 3, 1, "", "get_monotonicity_constraints"], [13, 3, 1, "", "get_outcome_constraint_transforms"]], "botorch.utils.containers": [[13, 1, 1, "", "DenseContainer"], [13, 1, 1, "", "SliceContainer"]], "botorch.utils.containers.DenseContainer": [[13, 4, 1, "", "device"], [13, 4, 1, "", "dtype"], [13, 5, 1, "", "event_shape"], [13, 4, 1, "", "shape"], [13, 5, 1, "", "values"]], "botorch.utils.containers.SliceContainer": [[13, 4, 1, "", "device"], [13, 4, 1, "", "dtype"], [13, 5, 1, "", "event_shape"], [13, 5, 1, "", "indices"], [13, 4, 1, "", "shape"], [13, 5, 1, "", "values"]], "botorch.utils.context_managers": [[13, 1, 1, "", "TensorCheckpoint"], [13, 3, 1, "", "delattr_ctx"], [13, 3, 1, "", "module_rollback_ctx"], [13, 3, 1, "", "parameter_rollback_ctx"], [13, 3, 1, "", "zero_grad_ctx"]], "botorch.utils.context_managers.TensorCheckpoint": [[13, 5, 1, "", "device"], [13, 5, 1, "", "dtype"], [13, 5, 1, "", "values"]], "botorch.utils.datasets": [[13, 1, 1, "", "ContextualDataset"], [13, 1, 1, "", "FixedNoiseDataset"], [13, 1, 1, "", "MultiTaskDataset"], [13, 1, 1, "", "RankingDataset"], [13, 1, 1, "", "SupervisedDataset"]], "botorch.utils.datasets.ContextualDataset": [[13, 4, 1, "", "X"], [13, 4, 1, "", "Y"], [13, 4, 1, "", "Yvar"]], "botorch.utils.datasets.MultiTaskDataset": [[13, 4, 1, "", "X"], [13, 4, 1, "", "Y"], [13, 4, 1, "", "Yvar"], [13, 2, 1, "", "from_joint_dataset"], [13, 2, 1, "", "get_dataset_without_task_feature"]], "botorch.utils.datasets.SupervisedDataset": [[13, 4, 1, "", "X"], [13, 4, 1, "", "Y"], [13, 4, 1, "", "Yvar"]], "botorch.utils.dispatcher": [[13, 1, 1, "", "Dispatcher"], [13, 3, 1, "", "type_bypassing_encoder"]], "botorch.utils.dispatcher.Dispatcher": [[13, 2, 1, "", "dispatch"], [13, 5, 1, "", "doc"], [13, 2, 1, "", "encode_args"], [13, 4, 1, "", "encoder"], [13, 5, 1, "", "funcs"], [13, 2, 1, "", "help"], [13, 5, 1, "", "name"], [13, 2, 1, "", "source"]], "botorch.utils.feasible_volume": [[13, 3, 1, "", "estimate_feasible_volume"], [13, 3, 1, "", "get_feasible_samples"], [13, 3, 1, "", "get_outcome_feasibility_probability"]], "botorch.utils.gp_sampling": [[13, 1, 1, "", "GPDraw"], [13, 1, 1, "", "RandomFourierFeatures"], [13, 3, 1, "", "get_deterministic_model"], [13, 3, 1, "", "get_deterministic_model_list"], [13, 3, 1, "", "get_deterministic_model_multi_samples"], [13, 3, 1, "", "get_eval_gp_sample_callable"], [13, 3, 1, "", "get_gp_samples"], [13, 3, 1, "", "get_weights_posterior"]], "botorch.utils.gp_sampling.GPDraw": [[13, 4, 1, "", "Xs"], [13, 4, 1, "", "Ys"], [13, 2, 1, "", "forward"]], "botorch.utils.gp_sampling.RandomFourierFeatures": [[13, 2, 1, "", "forward"]], "botorch.utils.low_rank": [[13, 3, 1, "", "extract_batch_covar"], [13, 3, 1, "", "sample_cached_cholesky"]], "botorch.utils.multi_objective": [[13, 0, 0, "-", "hypervolume"], [13, 0, 0, "-", "pareto"], [13, 0, 0, "-", "scalarization"]], "botorch.utils.multi_objective.box_decompositions": [[13, 0, 0, "-", "box_decomposition"], [13, 0, 0, "-", "box_decomposition_list"], [13, 0, 0, "-", "dominated"], [13, 0, 0, "-", "non_dominated"], [13, 0, 0, "-", "utils"]], "botorch.utils.multi_objective.box_decompositions.box_decomposition_list": [[13, 1, 1, "", "BoxDecompositionList"]], "botorch.utils.multi_objective.box_decompositions.box_decomposition_list.BoxDecompositionList": [[13, 2, 1, "", "compute_hypervolume"], [13, 2, 1, "", "get_hypercell_bounds"], [13, 4, 1, "", "pareto_Y"], [13, 4, 1, "", "ref_point"], [13, 2, 1, "", "update"]], "botorch.utils.multi_objective.box_decompositions.dominated": [[13, 1, 1, "", "DominatedPartitioning"]], "botorch.utils.multi_objective.box_decompositions.non_dominated": [[13, 1, 1, "", "FastNondominatedPartitioning"], [13, 1, 1, "", "NondominatedPartitioning"]], "botorch.utils.multi_objective.box_decompositions.non_dominated.NondominatedPartitioning": [[13, 2, 1, "", "get_hypercell_bounds"]], "botorch.utils.multi_objective.box_decompositions.utils": [[13, 3, 1, "", "compute_dominated_hypercell_bounds_2d"], [13, 3, 1, "", "compute_local_upper_bounds"], [13, 3, 1, "", "compute_non_dominated_hypercell_bounds_2d"], [13, 3, 1, "", "get_partition_bounds"], [13, 3, 1, "", "update_local_upper_bounds_incremental"]], "botorch.utils.multi_objective.hypervolume": [[13, 1, 1, "", "Hypervolume"], [13, 1, 1, "", "MultiList"], [13, 1, 1, "", "Node"], [13, 1, 1, "", "SubsetIndexCachingMixin"], [13, 3, 1, "", "compute_subset_indices"], [13, 3, 1, "", "infer_reference_point"], [13, 3, 1, "", "sort_by_dimension"]], "botorch.utils.multi_objective.hypervolume.Hypervolume": [[13, 2, 1, "", "compute"], [13, 4, 1, "", "ref_point"]], "botorch.utils.multi_objective.hypervolume.MultiList": [[13, 2, 1, "", "append"], [13, 2, 1, "", "extend"], [13, 2, 1, "", "reinsert"], [13, 2, 1, "", "remove"]], "botorch.utils.multi_objective.hypervolume.SubsetIndexCachingMixin": [[13, 2, 1, "", "compute_q_subset_indices"]], "botorch.utils.multi_objective.pareto": [[13, 3, 1, "", "is_non_dominated"]], "botorch.utils.multi_objective.scalarization": [[13, 3, 1, "", "get_chebyshev_scalarization"]], "botorch.utils.multitask": [[13, 3, 1, "", "separate_mtmvn"]], "botorch.utils.objective": [[13, 3, 1, "", "apply_constraints"], [13, 3, 1, "", "apply_constraints_nonnegative_soft"], [13, 3, 1, "", "compute_feasibility_indicator"], [13, 3, 1, "", "compute_smoothed_feasibility_indicator"], [13, 3, 1, "", "get_objective_weights_transform"]], "botorch.utils.probability": [[13, 0, 0, "-", "bvn"], [13, 0, 0, "-", "lin_ess"], [13, 0, 0, "-", "linalg"], [13, 0, 0, "-", "mvnxpb"], [13, 0, 0, "-", "truncated_multivariate_normal"], [13, 0, 0, "-", "unified_skew_normal"], [13, 0, 0, "-", "utils"]], "botorch.utils.probability.bvn": [[13, 3, 1, "", "bvn"], [13, 3, 1, "", "bvnmom"], [13, 3, 1, "", "bvnu"]], "botorch.utils.probability.lin_ess": [[13, 1, 1, "", "LinearEllipticalSliceSampler"], [13, 3, 1, "", "get_index_tensors"]], "botorch.utils.probability.lin_ess.LinearEllipticalSliceSampler": [[13, 2, 1, "", "draw"], [13, 4, 1, "", "lifetime_samples"], [13, 2, 1, "", "step"]], "botorch.utils.probability.linalg": [[13, 1, 1, "", "PivotedCholesky"], [13, 3, 1, "", "augment_cholesky"], [13, 3, 1, "", "block_matrix_concat"]], "botorch.utils.probability.linalg.PivotedCholesky": [[13, 2, 1, "", "clone"], [13, 2, 1, "", "concat"], [13, 2, 1, "", "detach"], [13, 5, 1, "", "diag"], [13, 2, 1, "", "expand"], [13, 5, 1, "", "perm"], [13, 2, 1, "", "pivot_"], [13, 5, 1, "", "step"], [13, 5, 1, "", "tril"], [13, 2, 1, "", "update_"], [13, 5, 1, "", "validate_init"]], "botorch.utils.probability.mvnxpb": [[13, 1, 1, "", "MVNXPB"], [13, 1, 1, "", "mvnxpbState"]], "botorch.utils.probability.mvnxpb.MVNXPB": [[13, 2, 1, "", "asdict"], [13, 2, 1, "", "augment"], [13, 2, 1, "", "build"], [13, 2, 1, "", "clone"], [13, 2, 1, "", "concat"], [13, 2, 1, "", "detach"], [13, 2, 1, "", "expand"], [13, 2, 1, "", "pivot_"], [13, 2, 1, "", "select_pivot"], [13, 2, 1, "", "solve"]], "botorch.utils.probability.mvnxpb.mvnxpbState": [[13, 5, 1, "", "bounds"], [13, 5, 1, "", "log_prob"], [13, 5, 1, "", "log_prob_extra"], [13, 5, 1, "", "perm"], [13, 5, 1, "", "piv_chol"], [13, 5, 1, "", "plug_ins"], [13, 5, 1, "", "step"]], "botorch.utils.probability.truncated_multivariate_normal": [[13, 1, 1, "", "TruncatedMultivariateNormal"]], "botorch.utils.probability.truncated_multivariate_normal.TruncatedMultivariateNormal": [[13, 2, 1, "", "expand"], [13, 4, 1, "", "log_partition"], [13, 2, 1, "", "log_prob"], [13, 2, 1, "", "rsample"], [13, 4, 1, "", "sampler"], [13, 4, 1, "", "solver"]], "botorch.utils.probability.unified_skew_normal": [[13, 1, 1, "", "UnifiedSkewNormal"]], "botorch.utils.probability.unified_skew_normal.UnifiedSkewNormal": [[13, 5, 1, "", "arg_constraints"], [13, 4, 1, "", "covariance_matrix"], [13, 2, 1, "", "expand"], [13, 2, 1, "", "log_prob"], [13, 2, 1, "", "rsample"], [13, 4, 1, "", "scale_tril"]], "botorch.utils.probability.utils": [[13, 3, 1, "", "build_positional_indices"], [13, 3, 1, "", "case_dispatcher"], [13, 3, 1, "", "gen_positional_indices"], [13, 3, 1, "", "get_constants"], [13, 3, 1, "", "get_constants_like"], [13, 3, 1, "", "leggauss"], [13, 3, 1, "", "log_erfc"], [13, 3, 1, "", "log_erfcx"], [13, 3, 1, "", "log_ndtr"], [13, 3, 1, "", "log_phi"], [13, 3, 1, "", "log_prob_normal_in"], [13, 3, 1, "", "ndtr"], [13, 3, 1, "", "phi"], [13, 3, 1, "", "standard_normal_log_hazard"], [13, 3, 1, "", "swap_along_dim_"]], "botorch.utils.rounding": [[13, 1, 1, "", "IdentitySTEFunction"], [13, 1, 1, "", "OneHotArgmaxSTE"], [13, 1, 1, "", "RoundSTE"], [13, 3, 1, "", "approximate_round"]], "botorch.utils.rounding.IdentitySTEFunction": [[13, 2, 1, "", "backward"]], "botorch.utils.rounding.OneHotArgmaxSTE": [[13, 2, 1, "", "forward"]], "botorch.utils.rounding.RoundSTE": [[13, 2, 1, "", "forward"]], "botorch.utils.safe_math": [[13, 3, 1, "", "add"], [13, 3, 1, "", "cauchy"], [13, 3, 1, "", "check_dtype_float32_or_float64"], [13, 3, 1, "", "div"], [13, 3, 1, "", "exp"], [13, 3, 1, "", "fatmax"], [13, 3, 1, "", "fatmaximum"], [13, 3, 1, "", "fatmin"], [13, 3, 1, "", "fatminimum"], [13, 3, 1, "", "fatmoid"], [13, 3, 1, "", "fatplus"], [13, 3, 1, "", "log"], [13, 3, 1, "", "log1mexp"], [13, 3, 1, "", "log1pexp"], [13, 3, 1, "", "log_fatmoid"], [13, 3, 1, "", "log_fatplus"], [13, 3, 1, "", "log_softplus"], [13, 3, 1, "", "logdiffexp"], [13, 3, 1, "", "logexpit"], [13, 3, 1, "", "logmeanexp"], [13, 3, 1, "", "logplusexp"], [13, 3, 1, "", "logsumexp"], [13, 3, 1, "", "mul"], [13, 3, 1, "", "sigmoid"], [13, 3, 1, "", "smooth_amax"], [13, 3, 1, "", "smooth_amin"], [13, 3, 1, "", "sub"]], "botorch.utils.sampling": [[13, 1, 1, "", "DelaunayPolytopeSampler"], [13, 1, 1, "", "HitAndRunPolytopeSampler"], [13, 3, 1, "", "batched_multinomial"], [13, 3, 1, "", "draw_sobol_normal_samples"], [13, 3, 1, "", "draw_sobol_samples"], [13, 3, 1, "", "find_interior_point"], [13, 3, 1, "", "get_polytope_samples"], [13, 3, 1, "", "manual_seed"], [13, 3, 1, "", "normalize_dense_linear_constraints"], [13, 3, 1, "", "normalize_sparse_linear_constraints"], [13, 3, 1, "", "optimize_posterior_samples"], [13, 3, 1, "", "sample_hypersphere"], [13, 3, 1, "", "sample_polytope"], [13, 3, 1, "", "sample_simplex"], [13, 3, 1, "", "sparse_to_dense_constraints"]], "botorch.utils.sampling.DelaunayPolytopeSampler": [[13, 2, 1, "", "draw"]], "botorch.utils.sampling.HitAndRunPolytopeSampler": [[13, 2, 1, "", "draw"]], "botorch.utils.test_helpers": [[13, 3, 1, "", "gen_multi_task_dataset"], [13, 3, 1, "", "get_pvar_expected"], [13, 3, 1, "", "get_sample_moments"], [13, 3, 1, "", "standardize_moments"]], "botorch.utils.testing": [[13, 1, 1, "", "BaseTestProblemTestCaseMixIn"], [13, 1, 1, "", "BotorchTestCase"], [13, 1, 1, "", "ConstrainedTestProblemTestCaseMixin"], [13, 1, 1, "", "MockAcquisitionFunction"], [13, 1, 1, "", "MockModel"], [13, 1, 1, "", "MockPosterior"], [13, 1, 1, "", "MultiObjectiveTestProblemTestCaseMixin"], [13, 1, 1, "", "SyntheticTestFunctionTestCaseMixin"]], "botorch.utils.testing.BaseTestProblemTestCaseMixIn": [[13, 4, 1, "", "functions"], [13, 2, 1, "", "test_forward"]], "botorch.utils.testing.BotorchTestCase": [[13, 2, 1, "", "assertAllClose"], [13, 5, 1, "", "device"], [13, 2, 1, "", "setUp"]], "botorch.utils.testing.ConstrainedTestProblemTestCaseMixin": [[13, 2, 1, "", "test_evaluate_slack"], [13, 2, 1, "", "test_num_constraints"]], "botorch.utils.testing.MockAcquisitionFunction": [[13, 2, 1, "", "set_X_pending"]], "botorch.utils.testing.MockModel": [[13, 4, 1, "", "batch_shape"], [13, 2, 1, "", "load_state_dict"], [13, 4, 1, "", "num_outputs"], [13, 2, 1, "", "posterior"], [13, 2, 1, "", "state_dict"]], "botorch.utils.testing.MockPosterior": [[13, 4, 1, "", "base_sample_shape"], [13, 4, 1, "", "batch_range"], [13, 4, 1, "", "batch_shape"], [13, 4, 1, "", "device"], [13, 4, 1, "", "dtype"], [13, 4, 1, "", "mean"], [13, 2, 1, "", "rsample"], [13, 2, 1, "", "rsample_from_base_samples"], [13, 4, 1, "", "variance"]], "botorch.utils.testing.MultiObjectiveTestProblemTestCaseMixin": [[13, 2, 1, "", "test_attributes"], [13, 2, 1, "", "test_max_hv"], [13, 2, 1, "", "test_ref_point"]], "botorch.utils.testing.SyntheticTestFunctionTestCaseMixin": [[13, 2, 1, "", "test_optimal_value"], [13, 2, 1, "", "test_optimizer"]], "botorch.utils.torch": [[13, 1, 1, "", "BufferDict"]], "botorch.utils.torch.BufferDict": [[13, 2, 1, "", "clear"], [13, 2, 1, "", "extra_repr"], [13, 2, 1, "", "items"], [13, 2, 1, "", "keys"], [13, 2, 1, "", "pop"], [13, 2, 1, "", "update"], [13, 2, 1, "", "values"]], "botorch.utils.transforms": [[13, 3, 1, "", "concatenate_pending_points"], [13, 3, 1, "", "convert_to_target_pre_hook"], [13, 3, 1, "", "is_ensemble"], [13, 3, 1, "", "is_fully_bayesian"], [13, 3, 1, "", "match_batch_shape"], [13, 3, 1, "", "normalize"], [13, 3, 1, "", "normalize_indices"], [13, 3, 1, "", "standardize"], [13, 3, 1, "", "t_batch_mode_transform"], [13, 3, 1, "", "unnormalize"]], "botorch.utils.types": [[13, 1, 1, "", "DEFAULT"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "exception", "Python exception"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:attribute", "6": "py:exception"}, "terms": {"": [0, 4, 7, 8, 9, 10, 12, 13], "0": [0, 1, 4, 7, 8, 9, 10, 12, 13], "000": 7, "000000000000001e": 12, "0000034868717194": 13, "0001": [0, 7, 8, 12, 13], "0002": 12, "00025": 12, "001": [0, 7, 12, 13], "005": 12, "00601": 12, "00798": 13, "01": [0, 7, 12], "014": 12, "019": 13, "02785": 10, "03": 12, "04": 12, "05": [7, 8, 12, 13], "05135": 7, "05502": 12, "06": [0, 7, 9], "07": [7, 12], "08": [7, 13], "08526": 4, "092": 12, "0th": [0, 13], "1": [0, 1, 4, 7, 8, 9, 10, 12, 13], "10": [0, 1, 4, 7, 8, 12, 13], "100": [4, 8, 12, 13], "1000": [0, 10, 12, 13], "10000": [8, 13], "1007": 13, "1012": 7, "10123": 7, "1015": 7, "1024": [0, 8, 10, 13], "105": 12, "108": 12, "1083": 7, "10x10": 7, "11": [7, 12, 13], "1157": 13, "1163": 13, "12": [7, 12], "123": 10, "1234": [10, 13], "128": 0, "12997": 7, "1309": 7, "13901": [0, 12], "13th": 13, "14": 12, "143": 12, "145": 12, "15": [7, 8, 12], "150": 12, "150011": 12, "1506": 10, "16": [0, 3, 7, 8, 10, 12, 13], "16341639895667773": 0, "164": 12, "166166": 12, "1709": 7, "173": 12, "180": 12, "19": [0, 7, 12], "1900": 12, "193": 12, "195": 12, "1990": 13, "1994": 13, "1995": 12, "1d": [7, 12], "1e": [0, 7, 8, 9, 12, 13], "1e100": 13, "1e20": 13, "1st": 0, "2": [0, 1, 4, 7, 8, 9, 10, 12, 13], "20": [0, 7, 8, 10, 12, 13], "200": 13, "2000": [0, 12], "2002": [4, 12], "2004": [12, 13], "2005": [7, 12], "2006": [12, 13], "2007": [7, 10], "2008": 0, "2009": 7, "2010": [7, 12], "2011": [0, 13], "2012": [0, 13], "2013": [0, 7, 8], "2014": [0, 12, 13], "2015": [10, 13], "2016": [0, 12, 13], "20169": 12, "2017": [0, 13], "2018": [7, 10], "2019": [0, 7, 12], "2020": [0, 7, 10, 12, 13], "2021": [0, 7, 10, 12], "2022": [0, 7, 12, 13], "2023": [0, 7], "203": 12, "2048": [0, 8], "20708": 0, "2085": 12, "2092": 12, "20x20": 7, "21": 12, "2106": 7, "2112": [0, 12], "22": [7, 12], "2262": 12, "2272": 12, "22nd": 7, "23": 12, "2300": 12, "2301": 7, "2310": 0, "25": [0, 4, 8, 9, 10, 12, 13], "250": [0, 12], "256": [3, 8], "259": 12, "2599": 7, "25th": 7, "26": 7, "273": 12, "275": 12, "275332": 12, "29th": 7, "2a": 13, "2d": 7, "2m": 12, "2pi": 13, "2rxy": 13, "2x": 3, "3": [0, 1, 4, 7, 8, 10, 12, 13], "30": 7, "30x30": 7, "311652": 12, "3136": 3, "31945": 13, "32": [0, 7, 9, 12, 13], "32237": 12, "32nd": 7, "33": [0, 7, 12], "34": 0, "35": [0, 12, 13], "36": [0, 7], "373": 12, "37th": 0, "39": 12, "397887": 12, "39th": [0, 7, 12], "3d": 0, "3k": 12, "3pi": 12, "4": [0, 1, 7, 8, 12, 13], "400": 7, "4000": 12, "4096": 8, "40th": 0, "42478": 12, "44": 12, "45": 12, "47": 12, "475": 12, "476874": 12, "48550": 4, "495": 12, "4e": 12, "4i": 12, "4x_i": 12, "5": [0, 1, 4, 7, 8, 9, 12, 13], "50": [11, 12, 13], "500": [4, 8, 12], "50000": 12, "5100": 12, "512": [0, 3, 8, 12, 13], "519": 12, "521": 12, "5363": 12, "549": 12, "5e": 13, "5mb": 13, "5th": 13, "5w_1": 12, "6": [0, 3, 7, 8, 12, 13], "60": 12, "600": 12, "64": [0, 8], "6573": 12, "66": 13, "66459": 12, "6835": 7, "7": [7, 12, 13], "7000": 12, "75": [0, 13], "768": 12, "79": 13, "8": [0, 7, 8, 12, 13], "8348668001940709": 13, "85": 12, "89": [7, 12], "9": [1, 7, 12], "903534": 12, "925": 13, "9287": 12, "9303": 12, "94": 12, "945": 12, "956": 12, "972": 12, "986": 12, "9872": 12, "99": 12, "A": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 13], "As": [0, 4, 7, 8, 9, 10, 13], "At": 9, "By": [0, 4, 7, 8, 10], "For": [0, 4, 7, 8, 9, 10, 11, 13], "If": [0, 3, 4, 7, 8, 9, 10, 12, 13], "In": [0, 4, 7, 8, 9, 12, 13], "It": [0, 7, 8, 9, 10, 12, 13], "NOT": [0, 7], "No": [3, 7, 11], "Not": [0, 7, 8], "On": [0, 10], "One": [7, 8], "Or": 13, "Such": 13, "That": [0, 8], "The": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13], "Then": [0, 7, 13], "There": [0, 7, 12], "These": [0, 7, 8, 12, 13], "To": [0, 7, 8, 9, 10, 11, 13], "Will": [7, 13], "With": 7, "_": [0, 7, 13], "_0": 0, "_2": 12, "__": 7, "_______________________________________": 10, "__call__": [0, 10], "__getitem__": 13, "__init__": [7, 13], "_aug_batch_shap": 7, "_c": 8, "_construct_base_sampl": 10, "_construct_x_ful": 0, "_default_sample_shap": 0, "_evaluation_ma": 0, "_expanded_perturb": 7, "_extended_shap": [9, 10, 13], "_fast_solv": 7, "_flag": [7, 11], "_has_transformed_input": 7, "_i": 7, "_incompatiblekei": 7, "_input_batch_shap": 7, "_instanc": 13, "_is_ensembl": 7, "_is_fully_bayesian": 7, "_is_mo": 0, "_load_from_state_dict": 7, "_lrschedul": 8, "_original_train_input": 7, "_pend": 0, "_pivoted_cholesky_init": 7, "_revert_to_original_input": 7, "_sampl": 13, "_sample_forward": 0, "_singletaskvariationalgp": 7, "_updat": 7, "_update_damp": 0, "_variationaldistribut": 7, "_variationalstrategi": 7, "a_": 12, "a_1j": 12, "a_eq": 13, "a_i": 12, "a_ij": 12, "a_nlz": 13, "ab": [0, 7, 8], "abc": [0, 7, 8, 10, 12], "abil": 7, "abl": [0, 7], "abort": 8, "about": [0, 7], "abov": [0, 11, 13], "abraham": 12, "absolut": [7, 12, 13], "abstract": [7, 8, 10], "ac": 7, "acceler": 12, "accept": [0, 4, 7, 13], "access": [0, 7, 9, 13], "accommod": 0, "accord": [0, 4, 7, 8, 13], "accordingli": [7, 8], "account": [0, 7, 13], "accross": 0, "accur": [0, 7, 13], "accuraci": [8, 13], "achiev": 8, "acklei": 12, "acm": 0, "aco": 7, "acos_ep": 7, "acq": 0, "acq_func": 4, "acq_funct": [0, 8], "acq_function_list": 8, "acq_valu": 8, "acq_value_list": 8, "acqf": [0, 13], "acqf_cl": 0, "acqf_input_constructor": 0, "acqfn": 0, "acquisit": [2, 5, 7, 9, 10, 13], "acquisition_funct": 4, "acquisition_function_nam": 0, "acquisition_util": 8, "acquisitionfunct": [0, 4, 8, 13], "acquisiton": 8, "acquist": 0, "acqusit": 7, "acqval": 0, "across": [0, 4, 7, 8, 9, 10, 13], "act": [7, 8, 10, 13], "activ": [7, 12], "active_dim": 7, "active_learn": 0, "actual": 0, "ad": [0, 7, 8, 10, 12, 13], "adam": [4, 7, 8, 12], "adapt": [0, 12, 13], "add": [0, 7, 8, 12, 13], "add_output_dim": 7, "added_batch_shap": 13, "addit": [0, 7, 8, 10, 12, 13], "addition": [0, 8, 13], "additon": 0, "address": 0, "adher": 13, "adjust": 13, "advanc": [0, 7, 10, 12, 13], "advantag": 0, "advis": 0, "af": 0, "affin": [0, 7, 9], "affinecostmodel": 0, "affinedeterministicmodel": 7, "affinefidelitycostmodel": 7, "affineinputtransform": 7, "after": [0, 2, 4, 7, 8, 13], "afterward": [7, 10], "ag": 7, "again": [0, 4, 8, 13], "against": [0, 7], "agre": 13, "agreement": 13, "ahead": 0, "ai": 12, "aim": 7, "aistat": [0, 13], "akedo": 13, "al": 0, "alg": 13, "algebra": 7, "algorithm": [0, 3, 7, 12, 13], "alia": [1, 7, 8, 13], "align": [0, 7, 13], "all": [0, 2, 4, 7, 8, 9, 10, 11, 12, 13], "all_task": 7, "allclos": 13, "allevi": 0, "alloc": 13, "allocate_inducing_point": 7, "allow": [0, 7, 8, 9, 13], "allow_only_specific_variable_kwarg": 0, "almost": 0, "almost_zero": 7, "along": [0, 1, 7, 8, 10, 13], "alpha": [0, 7, 8, 12, 13], "alpha_1": 12, "alpha_2": 12, "alpha_3": 12, "alpha_i": 12, "alpig": 13, "alreadi": [0, 7, 8, 12], "also": [0, 3, 7, 8, 9, 13], "altern": [0, 7, 13], "although": [7, 10], "alwai": [0, 7, 8, 13], "amax": [0, 13], "ament": 0, "ament2023logei": 0, "amin": 13, "amount": [0, 3, 8, 13], "an": [0, 1, 4, 7, 8, 9, 10, 12, 13], "anal": 12, "analog": 0, "analysi": 0, "analyt": [4, 7], "analyticacquisitionfunct": 0, "analyticexpectedutilityofbestopt": 0, "andez": 12, "angl": 13, "ani": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 13], "annal": 0, "anneal": 12, "annual": [0, 13], "anoth": [7, 13], "anyoptim": 12, "api": [8, 13], "appear": [0, 7, 8], "append": [0, 7, 13], "appendfeatur": [0, 7], "appendix": 0, "appli": [0, 7, 8, 9, 10, 11, 12, 13], "applic": [0, 7, 10, 13], "apply_constraint": [0, 13], "apply_constraints_nonnegative_soft": 13, "approach": [0, 4, 7, 10, 13], "appropri": [0, 7, 8, 9, 13], "approx": 0, "approxim": [0, 7, 9, 10, 12, 13], "approximate_gp": 7, "approximate_round": 13, "approximategp": 7, "approximategpytorchmodel": 7, "apr": [7, 12], "ar": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13], "arang": 0, "arbitrari": [0, 7, 8, 12, 13], "arbitrarili": 7, "arbitrary_q_method": 13, "architectur": 7, "ard_num_dim": 7, "area": 8, "aren": [7, 8], "arg": [0, 2, 7, 8, 10, 13], "arg_constraint": 13, "argmax": 13, "argmin_": 13, "argument": [1, 3, 4, 7, 8, 10, 13], "ari": 13, "arithmet": [10, 13], "arlington": 12, "arm": 7, "around": [0, 8, 13], "arrai": [0, 2, 8, 13], "articl": 0, "artifici": [0, 7, 12], "arxiv": [0, 4, 7, 10, 12], "as_arrai": 8, "as_ndarrai": 8, "as_tensor": 8, "asdict": 13, "assert": 13, "assert_clos": 13, "assert_output_shap": 13, "assertallclos": 13, "assertionerror": 13, "assess": [0, 13], "assign": [0, 8, 13], "associ": [0, 2, 4, 7, 8, 12, 13], "assort": 7, "asssum": 7, "assum": [0, 4, 7, 8, 9, 10, 12, 13], "assumpt": 0, "astudillo": 0, "astudillo2023qeubo": 0, "asymptot": [0, 13], "asynchron": 0, "atol": [7, 13], "atol_mean": 7, "atol_std": 7, "attach": 0, "attain": 13, "attempt": [2, 8], "attr": [7, 13], "attribut": [0, 3, 7, 8, 9, 12, 13], "auai": 12, "augment": [0, 12, 13], "augment_choleski": 13, "augmented_sampl": 0, "augmentedbranin": 12, "augmentedhartmann": 12, "augmentedrosenbrock": 12, "auto": 0, "autograd": [8, 13], "automat": [0, 7, 8, 9, 13], "auxiliari": 13, "avail": [0, 13], "averag": [0, 7, 8, 9, 10, 12, 13], "avoid": [0, 7, 8, 13], "awar": 2, "ax": 13, "axi": [0, 7, 13], "b": [0, 4, 7, 8, 9, 10, 12, 13], "b1": [0, 7, 9], "b_1": 7, "b_eq": 13, "b_k": 7, "b_min": 12, "b_nlz": 13, "bach": 8, "back": [0, 7, 13], "backpropag": 0, "backshi": 7, "backward": [3, 7, 8, 9, 13], "bad": [2, 8], "badinitialcandidateswarn": 2, "bahri": 7, "bakshi": [0, 7, 12, 13], "balandat": [0, 7, 12, 13], "balandat2020botorch": 0, "bald": 0, "bandit": 0, "bank": 8, "bar": 3, "barbosa": 12, "base": [0, 1, 2, 4, 8, 11, 12, 13], "base_kernel": 7, "base_sampl": [9, 13], "base_sample_shap": [9, 13], "base_shap": 13, "base_value_funct": 0, "baselin": [0, 7, 8, 13], "baseline_i": 0, "baseline_l": 13, "basemodel": 7, "basetestproblem": [12, 13], "basetestproblemtestcasemixin": 13, "basi": [0, 8, 10, 13], "basic": [0, 13], "batch": [0, 1, 4, 7, 8, 9, 10, 13], "batch_acq_valu": 4, "batch_candid": 4, "batch_cross_valid": 1, "batch_dim": 10, "batch_gp": 7, "batch_initial_condit": [0, 8], "batch_limit": 8, "batch_mo_gp": 7, "batch_mo_model": 7, "batch_model": 7, "batch_rang": [9, 13], "batch_shap": [0, 1, 4, 7, 8, 9, 10, 12, 13], "batch_shape_i": 13, "batch_shape_input": 13, "batch_shape_x": 13, "batch_siz": [0, 7, 8, 13], "batch_so_gp": 7, "batch_valu": 4, "batch_x": 7, "batched_bisect": 9, "batched_mo_model": 7, "batched_multi_output_to_single_output": 7, "batched_multinomi": 13, "batched_multioutput_to_single_output": 7, "batched_to_model_list": 7, "batchedmultioutputgpytorchmodel": [7, 13], "bayesian": [0, 3, 10, 12, 13], "bd": 13, "bd1": 13, "bd2": 13, "beal": 12, "beam": 12, "becaus": [0, 7, 9, 12, 13], "becom": [0, 13], "been": [0, 7, 8, 13], "befor": [0, 4, 7, 8, 13], "beforehand": 7, "begin": [7, 8], "behav": [0, 7, 13], "behavior": [0, 7, 8, 13], "behind": 0, "being": [0, 7, 8, 12, 13], "belakaria": 0, "belakaria2019": 0, "belief": 0, "belong": [7, 13], "below": [0, 7, 13], "benchmark": [2, 12], "benefici": 0, "beneifici": 8, "berlin": 12, "bernardino": 0, "besid": 0, "best": [0, 4, 7, 8, 10, 13], "best_candid": 4, "best_f": [0, 4, 8], "best_pct": 8, "beta": [0, 4, 7, 8, 12], "beta_i": 12, "beta_ij": 12, "beta_ijl": 12, "better": [0, 4, 7, 13], "between": [0, 7, 8, 9, 12, 13], "beyond": 13, "bfg": [4, 8], "bia": [0, 7, 10, 13], "bias": [0, 7, 10], "bias_modul": 10, "big": 7, "bilog": 7, "binari": [0, 8, 13], "bingham": 12, "bingham2013virtu": 12, "binoi": 0, "binois2017repexp": 0, "biomass": 12, "bisect": 9, "bivari": 0, "bk": [0, 7, 9], "black": [4, 8, 12], "blackbox": 12, "blob": [7, 12, 13], "block": [0, 7, 13], "block_matrix_concat": 13, "bmucb": 4, "bnh": 12, "bnn": 7, "bo": [0, 7], "bogu": 13, "boltzmann": 4, "boltzmannsampl": 4, "bonilla": 7, "bonilla2007mtgp": 7, "bool": [0, 1, 3, 4, 7, 8, 10, 11, 12, 13], "boolean": [0, 3, 4, 7, 8, 12, 13], "booltensor": 13, "bootstrap": 7, "bope": 0, "borg": 12, "borovitskii": 10, "boschresearch": 12, "both": [0, 7, 8, 9, 10, 12, 13], "botorchcontain": [7, 13], "botorcherror": 2, "botorchtensordimensionerror": 2, "botorchtensordimensionwarn": 2, "botorchtestcas": 13, "botorchwarn": 2, "boukouvala": 7, "bound": [0, 4, 7, 8, 9, 12, 13], "boundari": [7, 13], "box": [0, 4, 8, 10, 12], "box_decomposit": [0, 13], "box_decomposition_list": 13, "boxdecomposit": [0, 13], "boxdecompositionlist": 13, "brake": 12, "branch": 13, "branin": 12, "branincurrin": 12, "break": 13, "breakdown": [7, 13], "bridg": 10, "brisban": 13, "british": 13, "broadcast": [0, 4, 7, 8, 13], "broader": 0, "brochu": 7, "brochu2010tutori": 7, "brown": 13, "buffer": [7, 8, 13], "bufferdict": 13, "build": [7, 8, 13], "build_positional_indic": 13, "built": [0, 7, 8], "bukin": 12, "burn": [3, 8, 13], "burnin": 13, "burt": 7, "burt2020svgp": 7, "bvn": 13, "bvnmom": 13, "bvnu": 13, "bxd": 0, "byproduct": 12, "b\u00e4ck": 12, "c": [0, 4, 7, 8, 12, 13], "c1": [4, 7], "c2": [4, 7], "c2dtlz2": 12, "c_": 12, "c_1": [0, 7, 12], "c_2": [0, 7], "c_3": [0, 7], "c_i": 12, "c_n": 0, "ca": [12, 13], "cach": [7, 13], "cache_pend": 0, "cache_root": 0, "cached_choleski": 0, "cachedcholeskymcsamplermixin": 0, "cakmak": [0, 12], "cakmak2020risk": [0, 7], "calcul": [0, 7, 8, 13], "calibr": 7, "call": [0, 3, 4, 7, 8, 9, 10, 11, 12, 13], "callabl": [0, 3, 4, 7, 8, 9, 10, 13], "callback": [4, 8], "can": [0, 4, 7, 8, 9, 10, 12, 13], "canada": 13, "candid": [0, 2, 7, 8, 9, 10, 13], "candidate_s": 0, "candidate_set": 0, "candidategenerationerror": 2, "cannot": 7, "canon": [0, 13], "car": 12, "cardin": [0, 7], "care": [0, 7, 10, 13], "carl": 7, "carlo": [4, 13], "carsideimpact": 12, "case": [0, 2, 4, 7, 8, 9, 10, 13], "case_dispatch": 13, "cast": 7, "cat": 7, "cat_0": 7, "cat_dim": 7, "cat_feature_dict": 7, "cat_k": 7, "catch": 10, "categor": [7, 13], "categorical_featur": 7, "categoricalkernel": 7, "cauchi": 13, "caus": [0, 8], "cdf": [0, 7, 13], "cdot": 7, "cei": 0, "ceil": 0, "cell": [0, 13], "censor": 13, "center": [0, 7, 10], "certain": 0, "chai": 7, "chain": [7, 8, 13], "chainedinputtransform": 7, "chainedoutcometransform": 7, "chainedtransform": 10, "chang": [0, 7, 13], "cheap": 0, "cheaper": 7, "cheapli": 13, "chebyshev": 13, "chebyshev_object": 0, "chebyshev_weight": 0, "check": [0, 7, 8, 11, 13], "check_dtype_float32_or_float64": 13, "check_feas": 13, "check_if_fit": 7, "check_min_max_sc": 7, "check_no_nan": 7, "check_standard": 7, "check_tau": 0, "checkpoint": 13, "chen": [0, 7], "chen2014seqexpdesign": 0, "chen2018dpp": 7, "child": 13, "cho": 7, "cho2009kernel": 7, "choic": [0, 7, 8, 13], "choleski": 7, "choleskyvariationaldistribut": 7, "choos": [7, 8, 12, 13], "chosen": [0, 8, 13], "chu": 7, "chu2005prefer": 7, "ci": 7, "circular": 0, "circumv": 0, "clamp": [0, 4, 7, 8], "class": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13], "classic": 0, "classif": 0, "classmethod": [7, 12, 13], "clear": [3, 8, 13], "clip": [7, 13], "clone": 13, "close": [0, 8, 12, 13], "closest": [0, 12], "closur": 3, "closure_kwarg": [3, 8], "cm": 4, "cmodel1": 4, "cmodel2": 4, "cmp": 4, "co": [7, 12], "co2": 12, "code": [0, 7, 12], "codifi": 7, "coeff": 8, "coeff_constraint": 7, "coeffici": [4, 7, 8, 13], "coello": 12, "coellocoello2002constraint": 12, "coinlab": [12, 13], "collapse_batch_dim": 0, "collapse_fantasy_base_sampl": 0, "collect": [0, 8], "column": [0, 4, 7, 8, 13], "columnwise_clamp": 8, "com": [0, 3, 7, 12, 13], "combin": [0, 7, 8, 10, 12, 13], "come": [0, 7, 12, 13], "comment": 0, "common": [0, 7, 8, 12, 13], "commonli": [0, 12], "comp": 7, "compar": [0, 13], "comparison": [7, 10, 12], "compat": [0, 4, 7, 9, 10, 13], "compil": 13, "complementari": 13, "complet": 12, "complex": [0, 7, 13], "compli": 2, "compon": [0, 9, 13], "compos": [12, 13], "composit": 10, "comppon": 7, "compress": 12, "compris": 0, "comput": [0, 4, 7, 8, 9, 10, 12, 13], "computacion": 12, "computation": [0, 7], "compute_": 0, "compute_best_f": 0, "compute_best_feasible_object": 0, "compute_dgsm": 12, "compute_dist": 7, "compute_dominated_hypercell_bounds_2d": 13, "compute_feasibility_ind": 13, "compute_hypervolum": 13, "compute_local_upper_bound": 13, "compute_non_dominated_hypercell_bounds_2d": 13, "compute_q_subset_indic": 13, "compute_sample_box_decomposit": 0, "compute_smoothed_feasibility_ind": [0, 13], "compute_subset_indic": 13, "concat": 13, "concaten": [0, 8, 10, 13], "concatenate_pending_point": 13, "concav": 12, "concentr": [7, 12], "concentration0": 7, "concentration0_prior": 7, "concentration1": 7, "concentration1_prior": 7, "condit": [0, 7, 8, 10], "condition_noiseless": 0, "condition_on_observ": 7, "conditional_entropi": 0, "conf": 13, "confer": [0, 7, 10, 12], "confid": 0, "configur": [0, 7], "congress": 13, "conjunct": [7, 8, 9, 13], "connect": 7, "consecut": [0, 13], "consequ": 0, "conserv": 7, "consid": [0, 4, 7, 8, 12, 13], "consist": [0, 7, 9, 12, 13], "consolid": 7, "consolidate_atol": 7, "consolidate_dupl": 7, "consolidate_rtol": 7, "consolidated_i": 7, "consolidated_x": 7, "constant": [7, 12], "constantmean": 7, "constitut": 7, "constr": 12, "constrain": [0, 4, 7, 8, 12, 13], "constrained_ei": 0, "constrained_object": 0, "constrainedbasetestproblem": 12, "constrainedbranincurrin": 12, "constrainedexpectedimprov": 0, "constrainedgramaci": 12, "constrainedhartmann": 12, "constrainedhartmannsmooth": 12, "constrainedmaxposteriorsampl": 4, "constrainedmcacquisitionfunct": 0, "constrainedmcobject": 0, "constrainedsynthetictestfunct": 12, "constrainedtestproblemtestcasemixin": 13, "constraint": [0, 4, 7, 12], "constraint_i": 0, "constraint_idc": 0, "constraint_model": 4, "constraint_noise_std": 12, "construct": [0, 7, 8, 9, 12, 13], "construct_evaluation_mask": 0, "construct_input": 7, "construct_inputs_analytic_eubo": 0, "construct_inputs_best_f": 0, "construct_inputs_ehvi": 0, "construct_inputs_mf_bas": 0, "construct_inputs_noisy_ei": 0, "construct_inputs_posterior_mean": 0, "construct_inputs_qehvi": 0, "construct_inputs_qei": 0, "construct_inputs_qeubo": 0, "construct_inputs_qj": 0, "construct_inputs_qkg": 0, "construct_inputs_qlogei": 0, "construct_inputs_qlognehvi": 0, "construct_inputs_qlognei": 0, "construct_inputs_qlognparego": 0, "construct_inputs_qm": 0, "construct_inputs_qmfkg": 0, "construct_inputs_qmfm": 0, "construct_inputs_qnehvi": 0, "construct_inputs_qnei": 0, "construct_inputs_qpi": 0, "construct_inputs_qsimpleregret": 0, "construct_inputs_qucb": 0, "construct_inputs_ucb": 0, "constructor": [1, 4, 12], "constuct": 7, "consum": 9, "cont_kernel_factori": 7, "contain": [0, 4, 7, 8, 9, 11], "content": [0, 13], "context": [0, 2, 10], "context1": 13, "context2": 13, "context_cat_featur": 7, "context_emb_featur": 7, "context_manag": [8, 13], "context_nam": 7, "context_weight_dict": 7, "contextmanag": [8, 13], "contextu": [0, 13], "contextual_lcea": 7, "contextual_multioutput": 7, "contextual_sac": 7, "contextualdataset": 13, "contigu": [7, 13], "continu": [7, 8, 12, 13], "contrast": [0, 7, 13], "contribut": 13, "control": [0, 4, 13], "conveni": [0, 7, 13], "convent": [2, 13], "converg": [0, 7, 8], "convert": [4, 7, 8, 13], "convert_to_target_pre_hook": 13, "convex": [12, 13], "coordin": [8, 13], "copi": [0, 7, 13], "cora": 7, "core": 12, "cornelliu": 7, "correct": 7, "correctli": 9, "correl": [7, 13], "correspond": [0, 4, 7, 8, 9, 12, 13], "cosin": [10, 12], "cosine8": 12, "cost": 2, "cost_awar": [0, 7], "cost_aware_util": [0, 7], "cost_cal": 0, "cost_func": 0, "cost_intercept": 0, "cost_model": [0, 7], "cost_object": 0, "cost_sampl": 0, "costawareutil": 0, "costawarewarn": 2, "costli": 13, "couckuyt": 13, "couckuyt2012": 13, "could": [0, 7, 13], "count": 0, "cousin": 0, "cousin2013mvar": 0, "cov": [7, 9, 10, 13], "cov_": 7, "cov_f_new": 0, "cov_f_old": 0, "cov_ln": 7, "cov_ln_": 7, "cov_n": 7, "cov_n_": 7, "covar": 7, "covar_modul": 7, "covar_module_bias": 7, "covar_module_unbias": 7, "covari": [0, 7, 9, 10, 13], "covariance_matrix": 13, "covariance_root": 13, "cover": 0, "cpu": [0, 13], "crash": 12, "creas": 13, "creat": [1, 7, 8, 13], "creation": 7, "creteria": 7, "criteria": 0, "criterion": [7, 8, 12, 13], "cross": [1, 7, 13], "cross_covariance_matrix": 13, "cross_valid": 5, "crucial": 13, "ctx": 13, "cube": [7, 11, 12, 13], "cuda": [0, 7], "cultur": 12, "cumul": 0, "current": [0, 1, 2, 4, 7, 8, 13], "current_model": 8, "current_valu": 0, "current_x": 2, "currin": 12, "custom": [0, 7, 8, 12, 13], "cv": 1, "cv_fold": 1, "cv_result": 1, "cvar": 0, "cvfold": 1, "cvresult": 1, "cycl": [7, 8], "cyclic": [0, 8], "cyclic_opt": 8, "d": [0, 1, 4, 7, 8, 10, 12, 13], "d_f": [0, 7], "da": 13, "damp": 0, "daniel": 12, "data": [0, 2, 7, 8, 9, 10, 11, 13], "data_covar_modul": 7, "data_fidel": 7, "data_load": 8, "dataload": 8, "datapoint": 7, "dataset": [0, 7], "dateset": 13, "daulton": [0, 12, 13], "daulton2020qehvi": [0, 13], "daulton2021nehvi": 0, "daulton2022": 12, "daulton2022bopr": [7, 13], "daulton2022mar": 0, "daulton2023hvkg": 0, "david": 7, "dayanik": 0, "de": [7, 13], "deb": 12, "deb2005dtlz": 12, "deb2005robust": 12, "debug": 11, "decai": [0, 7, 8, 13], "decemb": 12, "decis": [0, 7, 13], "decompos": 7, "decomposit": [0, 7], "decor": [0, 7, 13], "decoupledacquisitionfunct": 0, "decreas": [8, 13], "decres": 0, "dedic": 13, "dedup": 7, "dedupl": 13, "deep": [0, 7, 9], "deepcopi": 7, "def": [7, 13], "default": [0, 4, 7, 8, 9, 10, 11, 12, 13], "default_bound": 8, "defin": [0, 7, 8, 9, 10, 12, 13], "definin": 13, "defininig": 13, "definit": 0, "deg": 13, "degener": 7, "deisenroth": [0, 10], "delattr_ctx": 13, "delaunai": 13, "delaunaypolytopesampl": 13, "delet": 13, "delta": [0, 7, 12], "delta_0": 12, "delta_i": 12, "delta_theta": 13, "denomin": 7, "denot": [0, 7, 10, 13], "dens": [12, 13], "densecontain": 13, "densiti": [0, 9, 13], "depend": [0, 7, 12], "deprec": [0, 2, 7, 9, 10, 13], "deprecationerror": 2, "depth": [3, 7], "der": 7, "deriv": [0, 12, 13], "descend": 13, "descent": [8, 13], "deschrijv": 13, "describ": [0, 4, 7, 9, 13], "descript": [0, 7], "deshwal": 0, "design": [0, 7, 8, 12, 13], "desir": [0, 7, 10, 13], "destin": 13, "detach": [7, 13], "detail": [0, 7, 8, 10, 12, 13], "detect": 2, "detect_dupl": 7, "determin": [0, 7, 8, 13], "determinant": 7, "determinist": [0, 9, 10, 13], "deterministicmodel": [0, 7], "determist": 7, "deutz": [0, 12], "deviat": [0, 7, 8, 12, 13], "devic": [7, 8, 9, 13], "dgsm": 12, "dgsm_gradient": 12, "dgsm_gradient_ba": 12, "dgsm_gradient_squar": 12, "dh": 12, "dh1": 12, "dh2": 12, "dh3": 12, "dh4": 12, "dhaen": 13, "di": 0, "diag": 13, "diaglinearoper": 13, "diagnost": 3, "diagon": [0, 7, 13], "dickstein": 7, "dict": [0, 1, 3, 4, 7, 8, 10, 13], "dictionari": [0, 3, 4, 7, 8, 10, 13], "diffenti": 13, "differ": [0, 4, 7, 8, 9, 10, 12, 13], "differenti": [0, 7, 13], "difficult": [9, 13], "digabel": 12, "dim": [0, 4, 7, 8, 9, 10, 12, 13], "dimens": [0, 4, 7, 8, 9, 10, 12, 13], "dimension": [0, 4, 7, 8, 10, 12, 13], "dimesion": 8, "dimsension": 13, "direct": 13, "directli": [0, 7, 13], "disabl": [0, 7], "disable_pivot": 13, "disable_progbar": 3, "disagr": 0, "disc": 12, "discard": 13, "discbrak": 12, "disconnect": 12, "discontinu": 12, "discret": [0, 7, 8, 9, 12, 13], "discrete_choic": 8, "discretemaxvaluebas": 0, "discuss": [0, 7], "disk": 12, "dispatch": [3, 8], "dist": 7, "distanc": [7, 8, 12], "distinct": 13, "distribut": [0, 4, 7, 9, 10, 12], "div": 13, "divers": [7, 13], "divid": [10, 13], "divis": [7, 13], "dixonpric": 12, "dklv17": 0, "dltz1": 12, "dltz2": 12, "do": [0, 4, 7, 8, 12, 13], "doc": [0, 13], "docstr": [0, 4, 8, 13], "document": [7, 8], "doe": [0, 2, 7, 8, 9, 10, 13], "doesn": 7, "doi": 4, "domain": [0, 8, 12, 13], "domin": [0, 12], "dominatedpartit": [0, 13], "don": [7, 8], "done": [0, 8, 13], "doppa": 0, "doubl": [0, 7, 13], "doubli": 13, "doucet": 7, "doucet2010sampl": [7, 9], "doucet_simulationconditionalgaussian": 7, "down": [3, 7, 13], "downsampl": 7, "downsamplingkernel": 7, "downstream": [7, 8], "dpp": 7, "draw": [0, 4, 7, 9, 10, 13], "draw_kernel_feature_path": 10, "draw_matheron_path": 10, "draw_sobol_normal_sampl": 13, "draw_sobol_sampl": [8, 13], "drawn": [0, 9, 10, 13], "driven": 10, "drop": [7, 13], "dropwav": 12, "dtlz": 12, "dtlz1": 12, "dtlz2": 12, "dtlz3": 12, "dtlz4": 12, "dtlz5": 12, "dtlz7": 12, "dtype": [0, 7, 8, 9, 10, 13], "dtypes_of_buff": 7, "due": [0, 2, 7, 13], "dummi": [0, 7, 13], "duplic": 7, "dure": [0, 2, 3, 7, 8, 9, 13], "dx": 13, "dy": 13, "dynam": 8, "d\u00f6pp": [0, 12], "e": [0, 3, 4, 7, 8, 9, 10, 12, 13], "e_d": 12, "e_g": 12, "each": [0, 4, 7, 8, 9, 10, 12, 13], "eagerli": 9, "eas": 7, "easi": [9, 12], "easier": 7, "edg": 12, "edward": 7, "effect": [0, 7, 13], "effici": [0, 7, 10, 12, 13], "egghold": 12, "ehvi": 0, "ei": [0, 2], "ei_proxim": 0, "eip": 0, "either": [0, 4, 7, 8, 9, 13], "eleg": 0, "element": [0, 4, 7, 8, 9, 13], "eleven": 12, "elimin": 7, "elment": 8, "els": [0, 7, 8, 10, 13], "elsewher": 7, "elston": 13, "embed": 7, "embedding_dim": 13, "embs_dim_list": 7, "embs_feature_dict": 7, "emit": [0, 7], "emmerich": [0, 12], "empir": [0, 12], "empti": [7, 13], "enabl": [0, 7, 9, 10, 13], "encapsul": 13, "encod": [4, 7, 8, 13], "encode_arg": 13, "encompass": 0, "encount": [7, 13], "encourag": 7, "end": [0, 7, 8, 9, 13], "enforc": [8, 13], "enforce_hasattr": 13, "engin": [7, 8, 10, 12], "ensembl": [10, 13], "ensemble_s": 9, "ensembleposterior": [9, 10], "ensur": [0, 9, 13], "entir": [9, 13], "entri": [0, 7, 8, 13], "entropi": 12, "enum": 8, "enumer": [8, 13], "environment": 7, "ep": [0, 7, 13], "ep_jitt": 0, "epsilon": [7, 10], "epsneg": 13, "eq": 8, "equal": [0, 4, 7, 8, 9, 10, 13], "equal_nan": 13, "equality_constraint": [4, 8, 13], "equat": [0, 7, 12, 13], "equival": [7, 13], "erfc": 13, "erfcx": 13, "eric": 7, "eriksson": [0, 7, 13], "eriksson2021saasbo": 7, "eriksson2021scal": 7, "eriksson21a": 7, "error": [0, 3, 7, 10, 13], "especi": 13, "essenti": 7, "estim": [0, 3, 4, 7, 12, 13], "estimate_feasible_volum": 13, "estimation_typ": 0, "et": 0, "eta": [0, 4, 7, 8, 13], "etc": 0, "eubo": 0, "eval": [7, 13], "eval_lin_constraint": 8, "evalaut": 0, "evalu": [0, 1, 3, 4, 7, 8, 10, 12, 13], "evaluate_slack": 12, "evaluate_slack_tru": 12, "evaluate_tru": 12, "evaluation_mask": [0, 7], "evalut": [8, 10], "even": [0, 7], "event_shap": 13, "everi": [0, 3, 7, 8, 10, 13], "everyth": 0, "everywher": 13, "evid": 7, "evol": 13, "evolutionari": [12, 13], "exact": [0, 7, 10, 12, 13], "exact_gp": 7, "exactgp": [0, 7], "exactli": 13, "exactmarginalloglikelihood": [1, 7], "examin": 13, "exampl": [0, 1, 3, 4, 7, 8, 9, 10, 13], "exampleacquisitionfunct": 13, "exampleclass": 13, "exce": 0, "except": [0, 5, 7, 8, 12, 13], "excess": 8, "exclud": [0, 8], "execut": [4, 8, 13], "exercis": 13, "exhibit": 12, "exist": [0, 10, 13], "exit": 13, "exp": [4, 7, 8, 12, 13], "expand": [0, 7, 9, 13], "expand_and_copy_tensor": 7, "expand_dim": 0, "expand_trace_observ": 0, "expans": [0, 13], "expect": [0, 7, 8, 10, 12, 13], "expectationposteriortransform": 0, "expected_q": 13, "expectedhypervolumeimprov": 0, "expectedimprov": 0, "expectedimprovementqualityfunct": 7, "expecxt": 13, "expedit": 13, "expens": [0, 7, 8, 13], "experi": [0, 12], "experiment": [0, 7], "expit": 13, "explan": 8, "explicit": [2, 7, 8], "explicitli": [0, 9], "explod": 8, "exploit": [0, 7, 9], "explor": 0, "expmastoppingcriterion": 8, "expon": [0, 12, 13], "exponenti": [0, 7, 8, 13], "exponential_decai": 7, "exponentialdecaykernel": 7, "expos": 9, "express": [7, 8, 12], "extend": [0, 9, 13], "extens": 0, "extra": [7, 13], "extra_repr": 13, "extract": [0, 4, 8, 13], "extract_batch_covar": 13, "extract_candid": 0, "extrem": [7, 9, 13], "f": [0, 7, 9, 10, 12, 13], "f1": 7, "f2": 7, "f_": 12, "f_0": 12, "f_1": [0, 7, 12], "f_2": [0, 7, 12], "f_i": [0, 7, 12], "f_i1": 0, "f_ij": 0, "f_ik": 0, "f_j": 7, "f_k": 0, "f_m": 12, "f_map": 7, "f_mean": 7, "f_np_wrapper": 8, "f_opt": 13, "f_stddev": 7, "fact": 8, "factor": [0, 8, 13], "factori": [8, 13], "fail": [0, 7, 8], "failur": [0, 8], "fake": 7, "fals": [0, 1, 3, 4, 7, 8, 10, 12, 13], "famili": 0, "fanci": 8, "fant_x": 8, "fantas": [0, 7, 8], "fantasi": [0, 7, 8, 11], "fantasizemixin": [7, 13], "fantasy_model": 8, "far": [0, 4, 7, 8, 13], "fashion": [0, 7, 8], "fast": 7, "faster": [0, 3, 13], "fastnondominatedpartit": [0, 13], "fastpartit": 13, "fat": [0, 13], "fatmax": 13, "fatmaximum": 13, "fatmin": 13, "fatminimum": 13, "fatmoid": 13, "fatplu": 13, "favor": [0, 7], "feasibilityweightedmcmultioutputobject": 0, "feasibilti": 0, "feasibl": [0, 8, 12], "feasible_volum": 13, "featur": [1, 2, 4, 7, 8, 13], "feature_index": [0, 8], "feature_indic": 7, "feature_map": 10, "feature_nam": 13, "feature_set": [0, 7], "featuremap": 10, "featureselector": 10, "feb": 13, "fed": 7, "feed": [12, 13], "feng": 7, "feng2020hdcp": 7, "ferment": 12, "few": 7, "fewer": [0, 7], "fidelity_1": 7, "fidelity_2": 7, "fidelity_dim": [0, 7], "fidelity_featur": 7, "fidelity_weight": [0, 7], "field": [0, 1, 8, 13], "figur": 13, "file": [9, 13], "fill": [0, 8], "fill_valu": 8, "filter": [0, 7, 8, 12, 13], "filter_domin": 0, "filterfeatur": 7, "final": [0, 8, 10], "final_opt": 8, "financ": 10, "financi": 0, "find": [0, 7, 8, 13], "find_interior_point": 13, "finfo": 13, "finit": [0, 4, 9, 10, 13], "first": [0, 4, 7, 8, 12, 13], "fit": [0, 2, 4, 5, 7], "fit_arg": 1, "fit_fully_bayesian_model_nut": [3, 7], "fit_gpytorch_": 7, "fit_gpytorch_ml": [1, 3, 7], "fit_gpytorch_mll_scipi": 8, "fit_gpytorch_mll_torch": [7, 8], "fix": [4, 7, 8, 9, 12, 13], "fix_featur": 8, "fixed_cost": 7, "fixed_featur": [0, 4, 8], "fixed_features_list": 8, "fixed_indic": 13, "fixed_x_fantasi": 8, "fixedcostmodel": 7, "fixedfeatureacquisitionfunct": 0, "fixedhomotopyschedul": 8, "fixednoisedataset": 13, "fixednoisegaussianlikelihood": 7, "fixednoisegp": 7, "fixednoiselcemgp": 7, "fixednoisemultifidelitygp": 7, "fixedsinglesamplemodel": 7, "fixtur": 13, "fkwarg": 7, "flag": [0, 7, 11], "flat_idxr": 8, "flatten": 7, "flattenedstandard": 7, "flexibl": 7, "flip": 13, "float": [0, 2, 4, 7, 8, 9, 12, 13], "float32": [0, 13], "float64": [0, 7, 13], "floatortensor": 0, "fly": [0, 7], "focus": 0, "fold": 1, "follow": [0, 1, 4, 7, 8, 10, 13], "fonseca": 13, "fonseca2006": 13, "footprint": 13, "forc": 13, "forest": 9, "fork_rng": 10, "forkedrngsampl": [0, 10], "form": [0, 4, 7, 8, 10, 12, 13], "formal": 0, "format": [0, 13], "former": [7, 10], "formul": [0, 7], "formula": 0, "forward": [0, 3, 4, 7, 8, 10, 12, 13], "forwardbackwardclosur": 8, "found": [4, 7, 8, 12], "four": [7, 12], "fourier": [0, 7, 10, 13], "frac": 7, "frac_random": 8, "fraction": [0, 8, 13], "framework": 0, "frazier": [0, 7], "frazier2008knowledg": 0, "free": [7, 12], "freita": 7, "frohlich": 12, "frohlich2020": 12, "from": [0, 1, 4, 7, 8, 9, 10, 12], "from_joint_dataset": 13, "fronit": 13, "front": [0, 12, 13], "frontier": [0, 12, 13], "fsolv": 7, "fukuoka": 0, "fukushima": 12, "fulfil": 8, "full": [0, 7, 10], "full_lik": 7, "full_optim": 0, "full_tre": 8, "fulli": [0, 3, 8, 13], "fully_bayesian": [7, 9], "fully_bayesian_multitask": 7, "fullybayesianposterior": 9, "fun": 8, "func": 13, "function": [1, 2, 7, 9, 13], "funtion": 8, "further": [0, 7, 8], "fuse": 8, "fusi": 7, "futur": [7, 13], "fval": 8, "g": [0, 3, 7, 8, 10, 12, 13], "gain": 0, "galsbei": 13, "gamma": 7, "gammaprior": 7, "gandi": 0, "gardner": 0, "garnett": 0, "garrido": [0, 12], "garridomerchan2020": 12, "gauss": [7, 13], "gaussian": [0, 7, 8, 9, 12], "gaussian_upd": 10, "gaussianlikelihood": 7, "gaussianmixtureposterior": [7, 9], "gaussianpenalti": 0, "gd": 0, "gelbart": 12, "gelbart2014": 12, "gen": 4, "gen_batch_initial_condit": [4, 8], "gen_candid": 8, "gen_candidates_scipi": [4, 8], "gen_candidates_torch": [4, 8, 10], "gen_kernel_featur": 10, "gen_loo_cv_fold": 1, "gen_multi_task_dataset": 13, "gen_one_shot_hvkg_initial_condit": 8, "gen_one_shot_kg_initial_condit": 8, "gen_pareto_front": 12, "gen_positional_indic": 13, "gen_value_function_initial_condit": 8, "gener": [1, 2, 5, 7, 9, 12, 13], "generalizedlinearpath": 10, "generic_object": 0, "genericcostawareutil": 0, "genericdeterministicmodel": [0, 7, 13], "genericmcmultioutputobject": 0, "genericmcobject": 0, "genet": [12, 13], "genz": 13, "genz2004bvnt": 13, "genz2016numer": 13, "gertvv": 13, "gessner": 13, "gessner2020": 13, "get": [0, 7, 8, 13], "get_acqf_input_constructor": 0, "get_acquisition_funct": 0, "get_all_task": 7, "get_attribut": 7, "get_aug_chebyshev_scalar": 13, "get_augmented_q_batch_s": 0, "get_best_candid": 4, "get_best_f_analyt": 0, "get_best_f_mc": 0, "get_bounds_as_ndarrai": 8, "get_chebyshev_scalar": 13, "get_const": 13, "get_constants_lik": 13, "get_data_load": 8, "get_dataset_without_task_featur": 13, "get_default_dtyp": 10, "get_default_partitioning_alpha": 0, "get_deterministic_model": 13, "get_deterministic_model_list": 13, "get_deterministic_model_multi_sampl": 13, "get_device_of_sequ": 0, "get_dtype_of_sequ": 0, "get_eval_gp_sample_cal": 13, "get_fantasy_model": 7, "get_feasible_sampl": 13, "get_gaussian_likelihood_with_gamma_prior": 7, "get_gp_sampl": [7, 13], "get_hypercell_bound": 13, "get_ic_gener": 8, "get_index_tensor": 13, "get_induced_fantasy_model": 0, "get_infeasible_cost": 0, "get_init_arg": 7, "get_input_transform": 10, "get_loss_closur": 8, "get_loss_closure_with_grad": [3, 8], "get_matern_kernel_with_gamma_prior": 7, "get_monotonicity_constraint": 13, "get_multi_step_tree_input_represent": 0, "get_mvar_set_": 0, "get_mvar_set_vector": 0, "get_mvar_set_via_count": 0, "get_name_filt": 8, "get_objective_weights_transform": 13, "get_optimal_sampl": 0, "get_outcome_constraint_transform": 13, "get_outcome_feasibility_prob": 13, "get_output_transform": 10, "get_paramet": 8, "get_parameters_and_bound": 8, "get_partition_bound": 13, "get_polytope_sampl": 13, "get_posterior_sampl": 0, "get_pvar_expect": 13, "get_rounding_input_transform": 7, "get_sampl": [0, 10], "get_sample_mo": 13, "get_split_shap": 0, "get_stat": 8, "get_swap_module_params_on_convers": 13, "get_task_value_remap": 7, "get_tensors_as_ndarray_1d": 8, "get_train_input": 10, "get_train_target": 10, "get_weights_posterior": 13, "get_x_baselin": 8, "getattr": 7, "getlogg": 11, "getlossclosur": 8, "getlossclosurewithgrad": 8, "gge": 13, "ghahramani": [0, 7], "gibbon": 0, "gibson": 13, "gibson1994mont": 13, "github": [3, 7, 12, 13], "give": 0, "given": [0, 4, 7, 8, 10, 11, 12, 13], "gj": 13, "glob": 0, "global": [0, 7, 12], "glucos": 12, "gmm": 12, "go": [0, 8], "goal": [7, 12, 13], "goe": 13, "goldberg": 12, "good": [7, 13], "govern": [0, 13], "gp": [0, 1, 3, 4, 10], "gp1": 7, "gp2": 7, "gp_model": 7, "gp_regress": [0, 7], "gp_regression_fidel": 7, "gp_regression_mix": 7, "gp_sampl": 13, "gpdraw": 13, "gpflow": 13, "gpflowopt": 13, "gpt_posterior_set": 7, "gpytorch": [0, 1, 3, 8], "gpytorch_modul": 7, "gpytorchmodel": [0, 1, 7, 8, 10], "gpytorchposterior": [0, 1, 7, 9, 13], "grad": [3, 8], "grad_output": 13, "gradient": [3, 4, 7, 8, 9, 11, 12, 13], "graepel": 0, "grai": 12, "gramaci": [0, 12], "gramacy2016": 12, "greater": [0, 7], "greatli": 0, "greedi": [0, 7, 8], "greedili": 7, "greedyimprovementreduct": 7, "greedyvariancereduct": 7, "grid": [0, 7], "griewank": 12, "ground": 13, "group": 0, "group_lasso_regular": 0, "grouplassopenalti": 0, "grow": 9, "gsobol": 12, "guarante": [7, 13], "guess": 13, "gumbel": 0, "guoxin": 7, "gupta": 12, "h": [0, 7, 12, 13], "h_min": 12, "ha": [0, 1, 4, 7, 8, 9, 12, 13], "halv": 0, "ham": 7, "han": 7, "hand": [8, 13], "handl": [0, 7, 8, 9, 12, 13], "happen": [0, 7, 13], "hard": 0, "harder": 0, "harryql": 12, "hartmann": 12, "hashabl": 0, "hasten": 13, "have": [0, 2, 4, 7, 8, 9, 10, 12, 13], "hazard": 13, "heavi": 0, "heavili": 7, "heavisid": 13, "hedar": 12, "hedar2006derivfre": 12, "help": [7, 10, 13], "helper": [0, 7, 9], "henc": 0, "hennig": 13, "henri": 7, "hensman": 7, "hensman2013svgp": 7, "here": [0, 7, 8, 12, 13], "hern": 12, "hernandez": 0, "hess": 8, "hessian": 7, "hessianupdatestrategi": 8, "hessp": 8, "heterogen": [7, 13], "heteroscedast": 7, "heteroskedast": 7, "heteroskedasticsingletaskgp": 7, "heurist": [0, 8, 12], "hierarch": 7, "high": [0, 7, 8, 13], "higher": [0, 4, 13], "higher_ord": 9, "higher_order_gp": 7, "higherordergp": [7, 9], "higherordergpposterior": [7, 9], "highest": 4, "highli": [0, 7, 9, 13], "hisao": 12, "hit": 13, "hitandrunpolytopesampl": 13, "hogp": 9, "hold": [0, 13], "holder": 12, "holdert": 12, "homotopy_paramet": 8, "homotopyparamet": 8, "homotopyschedul": 8, "hong": 0, "hong2014review": 0, "honor": 7, "hood": 10, "hook": [7, 10, 13], "hope": 0, "hopefulli": 7, "hot": [7, 13], "houlsbi": 0, "houlsby2011bald": 0, "hous": [3, 8, 13], "how": [0, 7, 8], "howev": [0, 7, 13], "html": [7, 12], "http": [0, 3, 4, 7, 12, 13], "hu": 0, "huang": 0, "hull": 13, "hundr": 7, "husz\u00e1r": 0, "hutter": 0, "hv": 13, "hvarfner": 0, "hvarfner2022": 0, "hvarfner2022joint": 0, "hvkg": [0, 8], "hybrid": 13, "hyper": [0, 7, 13], "hyperbol": [7, 13], "hypercel": [0, 13], "hypercell_bound": 0, "hypercub": 12, "hyperparam": 7, "hyperparamet": [0, 7, 8, 13], "hyperplan": 12, "hyperrectangl": 13, "hyperspher": [12, 13], "hypertriangl": 13, "hypervolum": [8, 12], "hypervolume_knowledge_gradi": 0, "i": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13], "i1": 7, "i2": 7, "i_d": [10, 13], "ibanez": 13, "ic_gen_kwarg": 8, "ic_gener": 8, "iclr": 0, "icm": [7, 9], "icml": 0, "idc": 7, "idea": [0, 13], "ideal": 12, "ident": [0, 7, 9, 12, 13], "identifi": [0, 7, 9, 13], "identity_object": 0, "identitymcmultioutputobject": 0, "identitymcobject": [0, 4], "identitymultioutputobject": 0, "identitystefunct": 13, "ieee": [12, 13], "iff": 12, "ignor": [0, 3, 7, 8, 10], "ignore_dim": 7, "ignore_x_dim": 7, "ii": [0, 7, 11, 13], "iid": [10, 13], "iidnormalsampl": 10, "iii": [7, 11], "ij": 7, "ijcnn": 0, "imag": 7, "imagin": 7, "impact": [7, 12], "implement": [0, 7, 9, 10, 12, 13], "impli": [0, 13], "implicitli": [7, 9, 13], "import": [0, 1, 7, 13], "impos": 8, "imposs": 0, "imprecis": 13, "improv": [0, 7, 12, 13], "inaccess": [0, 7], "incl": 0, "includ": [0, 4, 7, 8, 12, 13], "incorpor": [0, 7], "increas": [0, 3, 13], "increment": [0, 8, 12, 13], "incremental_nehvi": 0, "incur": 13, "independ": [0, 7, 8, 9, 13], "independentcvar": 0, "independentmodellist": 7, "independentvar": 0, "index": [0, 5, 7, 8, 13], "index_sampl": 10, "indexsampl": [9, 10], "indic": [0, 3, 4, 7, 8, 9, 10, 12, 13], "indictor": 7, "individu": [0, 4, 7, 8, 9, 13], "induc": 0, "inducing_point": 7, "inducing_point_alloc": 7, "inducingpointalloc": 7, "ineffici": [0, 1], "ineq": 8, "inequ": [4, 8, 13], "inequality_constraint": [4, 8, 13], "inf": [0, 7, 8, 13], "infeas": [0, 13], "infeasible_cost": [0, 13], "infeasible_obj": 0, "infer": [0, 7, 13], "infer_reference_point": [12, 13], "inferred_noise_model": 7, "infin": 13, "infinit": [7, 12], "infinite_width_bnn": 7, "infinitewidthbnnkernel": 7, "influenc": 13, "info": 11, "inform": [0, 4, 7, 8, 9, 10, 13], "informat": 12, "infti": [4, 13], "inherif": 7, "inherit": [0, 7], "init_batch_limit": 8, "init_inducing_point": 7, "init_point": 0, "initi": [0, 1, 2, 4, 7, 10, 13], "initial_condit": 4, "initialize_q_batch": 8, "initialize_q_batch_nonneg": 8, "initit": 8, "initvar": 13, "inject": 8, "inlin": 0, "inner": [0, 8], "inner_mc_sampl": 0, "inner_sampl": 0, "inplac": 8, "input": [1, 2, 4, 8, 9, 10, 11, 12, 13], "input_batch_shap": 7, "input_constructor": 0, "input_dim": 13, "input_transform": [0, 1, 7, 10], "inputdataerror": [2, 7], "inputdatawarn": 2, "inputperturb": [0, 7], "inputstandard": 7, "inputtransform": [7, 10], "insert": [0, 7, 13], "insid": 7, "instanc": [0, 1, 3, 7, 8, 10, 11, 13], "instanti": [0, 7], "instead": [0, 7, 8, 10, 13], "int": [0, 3, 4, 7, 8, 9, 10, 11, 12, 13], "int_": 13, "integ": [0, 7, 8, 13], "integer_indic": 7, "integr": [0, 7, 12, 13], "intellig": [0, 7, 12], "intend": [0, 7, 9, 13], "intens": [0, 7, 13], "inter": [4, 7, 8], "interact": 7, "interfac": [7, 8], "interior": [7, 13], "interior_point": 13, "intern": [0, 1, 7, 8, 9, 10, 12, 13], "interpret": 0, "intersect": 13, "interv": 7, "intra": [4, 8], "intrins": 7, "introduc": [0, 7, 12], "introduct": 10, "intut": 8, "inv_transform": 10, "invalid": 13, "invers": [0, 7, 10, 13], "inversecostweightedutil": [0, 7], "inverselengthscaletransform": 10, "invert": 0, "invok": [8, 9, 13], "involv": [0, 7, 13], "irshad": [0, 12], "irshad2021": 12, "irshad2021momf": 0, "is_ensembl": 13, "is_feas": 12, "is_fully_bayesian": 13, "is_intrapoint": 8, "is_non_domin": 13, "is_nonneg": 8, "is_one_to_mani": 7, "ishibuchi": [12, 13], "ishibuchi2011": 13, "ishigami": 12, "isn": [7, 8], "issu": [0, 2, 3, 7, 13], "item": [0, 7, 8, 10, 13], "item_0": 13, "item_1": 13, "iter": [0, 2, 4, 7, 8, 10, 13], "iteration_fidel": 7, "ith": [7, 13], "its": [0, 4, 7, 8, 9, 10, 12, 13], "itself": [7, 13], "j": [0, 7, 8, 10, 12, 13], "jac": 8, "jacobian": 8, "jain": 12, "jame": 7, "jankowiak": 7, "jasper": 12, "je": 0, "jegelka": 0, "ji": 12, "jiang": 0, "jiang2020multistep": 0, "jit": 3, "jit_compil": 3, "jitter": [0, 7, 13], "jj": 7, "jmlr": 7, "join": 10, "joint": [4, 7, 8, 9, 13], "joint_covariance_matrix": [7, 9], "joint_dim": 10, "joint_entropy_search": 0, "jointli": [0, 4, 7, 8, 13], "journal": [0, 7, 10, 12, 13], "jul": 7, "juli": 13, "jun": 7, "just": [0, 4, 7, 8], "justif": 7, "k": [0, 7, 10, 12, 13], "k_0": 7, "k_1": [7, 12], "k_2": [7, 12], "k_3": 7, "k_cat_1": 7, "k_cat_2": 7, "k_cont_1": 7, "k_cont_2": 7, "k_d": 12, "k_f": 7, "k_g": 12, "k_i": [7, 8, 12], "k_m": 7, "k_p": 12, "k_x": 12, "kaa": 13, "kab": 13, "kanjil": 13, "kanta": 0, "karasuyama": 0, "karrer": [0, 12], "karsch": [0, 12], "kba": 13, "kbb": 13, "keep": [7, 8, 13], "keep_dim": 7, "keep_var": 13, "keepdim": [0, 7, 13], "kei": [4, 7, 8, 10, 13], "kept": [7, 13], "kernel": [9, 10, 13], "kernel_batch_shap": 13, "kernel_matrix": 7, "kernelevaluationmap": 10, "kernelfeaturemap": 10, "keyword": [0, 1, 3, 7, 8, 13], "kg": [0, 8], "kind": 13, "kirbi": 7, "klamroth": 13, "klensk": 12, "know": 7, "knowl": 13, "knowledge_gradi": 0, "knowledgegradi": 0, "knowles2005": [0, 13], "known": [0, 2, 7, 8], "koyama": 0, "krige": 0, "kroneck": [7, 9], "kroneckermultitaskgp": [7, 9], "kumaraswami": 7, "kundu": 12, "kwarg": [0, 2, 3, 7, 8, 10, 13], "l": [0, 4, 7, 8, 12, 13], "l0": 0, "l0approxim": 0, "l0penaltyapprox": 0, "l0penaltyapproxobject": 0, "l1": 0, "l1_penalized_object": 0, "l1_penalty_object": 0, "l1penalti": 0, "l1penaltyobject": 0, "l2": 0, "l2penalti": 0, "l_": 13, "l_i": 8, "la2": 12, "laa": 13, "label": [7, 13], "lacour": 13, "lacour17": 13, "lagrangian": 12, "lai": 12, "lambd": 12, "lambda": [0, 7], "lame": 7, "landscap": 13, "laplac": [0, 7], "larg": [0, 7, 8, 9, 10, 12, 13], "larger": [0, 7, 8, 12, 13], "largest": 0, "lasso": 0, "last": [0, 7, 8, 12, 13], "latent": [0, 7], "latent_init": 7, "later": [0, 4, 8], "latham": 7, "latter": [7, 10], "lattic": 8, "laumann": 12, "lawrenc": 7, "layer": [0, 7], "lazi": 13, "lb": 0, "lb2": 0, "lba": 13, "lce": 7, "lcea": 13, "lceagp": 7, "lceakernel": 7, "lcem": 13, "lcemgp": 7, "ldot": 7, "le": 12, "lead": [0, 7, 13], "leaf_modul": 7, "learn": [7, 8, 10, 12], "learn_bound": 7, "learn_inducing_point": 7, "learn_latent_par": 7, "learned_pref_obj": 0, "learnedobject": 0, "learning_r": 13, "least": [7, 8, 9, 12, 13], "lee": [7, 12], "lee2018deep": 7, "left": [7, 10, 13], "legaci": 2, "legacy_ei_numerics_warn": 2, "legacy_nam": 2, "legendr": 7, "leggauss": 13, "lemong": 12, "lemonge2010constrain": 12, "len": [7, 8, 13], "length": [0, 7, 8, 12, 13], "lengthscal": [0, 7, 10], "lengthscale_constraint": 7, "lengthscale_constraint_bias": 7, "lengthscale_constraint_unbias": 7, "lengthscale_prior": 7, "lengthscale_prior_bias": 7, "lengthscale_prior_unbias": 7, "lengyel": 0, "lenthscal": 7, "less": [0, 8, 12, 13], "lesser": 7, "let": [0, 8, 13], "letham": [0, 12], "letham2019": 12, "level": [0, 7, 8, 9, 11, 13], "leverag": 0, "levi": 12, "li": 12, "liang": 12, "liang2021": 12, "librari": 12, "lie": 13, "lifetim": 13, "lifetime_sampl": 13, "lightweight": 7, "like": [0, 7, 13], "likelihood": [0, 1, 8, 10, 13], "likelihood_rank": 7, "limit": [7, 8, 13], "lin": 0, "lin2022prefer": 0, "lin_constraint_jac": 8, "lin_ess": 13, "linalg": [7, 13], "lincongauss": 13, "lindauer": 0, "line": [0, 12, 13], "linear": [0, 7, 8, 10, 12], "linear_constraint": 0, "linear_object": 0, "linear_oper": 7, "linear_trunc": 7, "linear_truncated_fidel": 7, "linearellipticalslicesampl": 13, "linearhomotopyschedul": 8, "linearli": [10, 13], "linearmcobject": 0, "linearoper": [7, 9, 10, 13], "lineartruncatedfidelitykernel": 7, "link": [0, 13], "list": [0, 4, 8, 12], "list_gp": 7, "listsampl": [0, 7], "liu": 0, "lkf17": 0, "lkj": 7, "lkjcovarianceprior": 7, "ln": 13, "load": 7, "load_mcmc_sampl": 7, "load_state_dict": [7, 13], "lobato": [0, 12], "loc": 13, "local": [0, 12, 13], "locat": [0, 7, 9, 13], "log": [0, 5, 7, 8, 11, 13], "log10": 7, "log1mexp": 13, "log1pexp": 13, "log_": 0, "log_a": 13, "log_b": 13, "log_cdf_robust": 0, "log_erfc": 13, "log_erfcx": 13, "log_fatmoid": 13, "log_fatplu": 13, "log_level": 11, "log_level_default": 11, "log_ndtr": 13, "log_p": 7, "log_partit": 13, "log_phi": 13, "log_pi": 0, "log_prob": 13, "log_prob_extra": 13, "log_prob_normal_in": 13, "log_softplu": 13, "logarithm": [0, 13], "logcei": 0, "logconstrainedei": 0, "logconstrainedexpectedimprov": 0, "logdiffexp": 13, "logei": [0, 2], "logei_nam": 2, "logexpectedimprov": 0, "logexpit": 13, "logger": 11, "logic": 7, "logimprovementmcacquisitionfunct": 0, "logist": [0, 7], "loglinearhomotopyschedul": 8, "logmeanexp": 13, "lognei": 0, "lognoisyexpectedimprov": 0, "lognorm_to_norm": 7, "lognparego": 0, "logpi": 0, "logplusexp": 13, "logprobabilityofimprov": 0, "logsumexp": 13, "long": [7, 8], "longtensor": [0, 7, 10, 13], "loo": 1, "look": 0, "lookup": [0, 13], "loop": [0, 7, 8, 13], "lopez": 13, "lorentzian": 13, "loss": [0, 4, 8, 13], "lot": 7, "low": [0, 7], "low_rank": 13, "lower": [0, 7, 8, 9, 12, 13], "lower_": 0, "lower_bound": [4, 8], "lower_i": 0, "lowerboundmultiobjectiveentropysearch": 0, "lr_schedul": 8, "lrschedul": 8, "lu": 7, "lu2022addit": 7, "ludkovski": 0, "m": [0, 1, 7, 8, 9, 10, 12, 13], "m1": [0, 7], "m1_c1": 13, "m1_c2": 13, "m2": [0, 7], "m_1": 7, "m_12": 7, "m_2": 7, "m_d": 7, "m_x": 12, "ma": [8, 12], "ma2019": 12, "machin": [0, 7, 10, 12], "maddox": 7, "maddox2021bohdo": 7, "maechler2012accur": 13, "magnifi": 7, "magnitud": 7, "mai": [0, 3, 7, 8, 9, 10, 12, 13], "maimiz": 13, "main": [7, 10], "maintain": 7, "mainten": 13, "make": [0, 7, 8, 10, 11, 13], "make_best_f": 0, "make_differenti": 0, "make_posterior_vari": 7, "make_scipy_bound": 8, "make_scipy_linear_constraint": 8, "make_scipy_nonlinear_inequality_constraint": 8, "maker": 7, "manag": [0, 7], "mani": [0, 4, 7, 12, 13], "manipul": 8, "manner": [0, 13], "manual": [0, 7, 9, 13], "manual_se": 13, "mao": 7, "map": [0, 7, 8, 13], "mapper": 7, "mar": 0, "margin": [0, 7, 9, 13], "marginalize_dim": [0, 13], "marginalloglikelihood": [1, 3, 7, 8], "mark": 7, "markov": [8, 13], "mask": [0, 7, 13], "mass": 9, "master": [7, 12, 13], "match": [0, 7, 8, 9, 13], "match_batch_shap": 13, "materi": 0, "matern": 7, "matern52_kernel": 7, "maternkernel": 7, "math": [7, 12], "mathbb": 10, "mathbf": 7, "mathcal": 10, "mathemat": [7, 13], "matheron": [7, 9, 10], "matheronpath": 10, "matric": [0, 7, 13], "matrix": [0, 7, 9, 10, 13], "max": [4, 7, 8, 10, 13], "max_batch_s": 8, "max_ep_iter": 0, "max_frac": 0, "max_hv": 12, "max_i": 13, "max_iep": 0, "max_length": 7, "max_num_comparison": 10, "max_plate_nest": 7, "max_ref_point": 13, "max_retri": 8, "max_step": 9, "max_tree_depth": 3, "max_tri": [0, 13], "max_value_entropy_search": 0, "maxfev": 7, "maxim": [0, 4, 7, 8, 12, 13], "maximium": 0, "maximize_sampl": 4, "maximum": [0, 3, 4, 7, 8, 9, 12, 13], "maximun": 7, "maxit": [4, 8], "maxposteriorsampl": 4, "maxvaluebas": 0, "mc": [0, 10, 13], "mc_acq": 0, "mc_obj": 0, "mc_point": 0, "mc_reduct": 0, "mc_sampl": [0, 13], "mcacquisitionfunct": 0, "mcacquisitionobject": [0, 4], "mcmc": [3, 7, 9], "mcmc_dim": 9, "mcmc_sampl": 7, "mcmultioutputobject": 0, "mcobject": 0, "mcsampler": [0, 7, 10], "mcsamplermixin": 0, "me": 0, "mean": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13], "mean_cost": 0, "mean_modul": 7, "mean_transform": 9, "measur": [1, 7, 12, 13], "mechan": 12, "mec\u00e1nica": 12, "median": 7, "median_lengthscal": 7, "memori": [0, 1, 3, 8, 13], "merch": 12, "merchan": 0, "merchan2019": 0, "merg": [7, 13], "mesmo": 0, "messag": 8, "metadata": 13, "method": [0, 4, 8, 9, 10, 12, 13], "methodnam": 13, "methodologi": [0, 13], "metric": [0, 13], "metric_decomposit": 13, "mezura": 12, "mf": 0, "mf_gibbon": 0, "mf_me": 0, "mf_qgibbon": 0, "michael": 12, "michalewicz": 12, "might": [0, 13], "million": 7, "min": [0, 7, 8, 13], "min_cost": 0, "min_inferred_noise_level": 7, "min_rang": 7, "min_std": 7, "min_stddv": 7, "min_stdv": 7, "min_x": 0, "minim": [0, 4, 7, 8, 12, 13], "minima": 12, "minimize_with_timeout": 8, "minimum": [0, 4, 7, 8, 12, 13], "mininimum": 12, "miss": [7, 10, 13], "missing_kei": [7, 13], "mitig": 0, "mix": [8, 13], "mixedsingletaskgp": 7, "mixin": [7, 10, 13], "mixtur": [9, 12], "mixture_covariance_matrix": 9, "mixture_mean": 9, "mixture_vari": 9, "mll": [1, 3, 7, 8], "mll_cl": 1, "mlr": 7, "mm": 13, "mo": 7, "mock": 13, "mockacquisitionfunct": 13, "mockmodel": 13, "mockposterior": 13, "mod_batch_shap": 7, "mode": [0, 1, 3, 4, 7, 8, 11, 13], "model": [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13], "model1": 7, "model2": 7, "model_1": 9, "model_2": 9, "model_batch_shap": [7, 13], "model_cl": 1, "model_closur": 8, "model_init_kwarg": 1, "model_list": 7, "model_list_gp_regress": 7, "model_list_to_batch": 7, "model_util": 8, "modeldict": 7, "modelfittingerror": 2, "modellist": [0, 7, 9, 10, 13], "modellistgp": [4, 7, 13], "modellistgpytorchmodel": 7, "modelthatcanfantas": 7, "moder": [0, 13], "modif": [7, 8], "modifi": [0, 7, 12, 13], "modul": [0, 5, 8, 9, 10, 12, 13], "module_rollback_ctx": 13, "moduledict": 7, "moham": 0, "moment": [0, 13], "momf": 0, "momf_val": 0, "momfbranincurrin": 12, "momfpark": 12, "monoton": [0, 13], "mont": [4, 12, 13], "monte_carlo": 0, "more": [0, 4, 7, 8, 10, 12, 13], "moriconi": 0, "morri": 12, "moss": [0, 7], "moss2021gibbon": 0, "moss2023ipa": 7, "most": [0, 7, 8, 12, 13], "mostowski": 10, "move": [7, 8, 13], "mp": 4, "msu": [12, 13], "mt_mvn": 13, "mtgp": 9, "mtmvn": 13, "mtsaas_gp": 7, "mu": [0, 7, 9, 10], "mu_": 7, "mu_k": 0, "mu_ln": 7, "mu_ln_": 7, "mu_n": 7, "mu_n_": 7, "mu_p": 12, "mu_x": 12, "much": [0, 13], "mul": 13, "muller": 10, "multi": [1, 8, 9], "multi_fidel": [0, 12], "multi_obj": 0, "multi_object": [0, 12, 13], "multi_objective_multi_fidel": 12, "multi_output_risk_measur": 0, "multi_step_lookahead": 0, "multicriteria": 12, "multifidel": 0, "multilist": 13, "multinomi": [4, 13], "multiobject": [7, 12, 13], "multiobjectiveanalyticacquisitionfunct": 0, "multiobjectivemcacquisitionfunct": 0, "multiobjectivetestproblem": 12, "multiobjectivetestproblemtestcasemixin": 13, "multioutput": [7, 10], "multioutput_to_batch_mode_transform": 7, "multioutputexpect": 0, "multioutputmcacquisitionobject": 0, "multioutputriskmeasuremcobject": 0, "multioutputworstcas": 0, "multipl": [0, 7, 12, 13], "multipledispatch": 13, "multipli": [0, 7, 10, 13], "multistart": [0, 8], "multitask": 13, "multitaskdataset": [7, 13], "multitaskgaussianlikelihood": 7, "multitaskgp": [4, 7, 13], "multitaskgpposterior": [7, 9], "multitaskgpytorchmodel": 7, "multitaskmultivariatenorm": [7, 9, 13], "multitasksaaspyromodel": 7, "multivari": [0, 7, 9, 10], "multivariant": 13, "multivariatenorm": [7, 9, 13], "multivariatenormalqmcengin": 10, "must": [0, 1, 4, 7, 8, 10, 12, 13], "muthen": 13, "muthen1990mo": 13, "mutual": 0, "mv": 0, "mvar": [0, 13], "mve": 0, "mvn": [7, 9, 13], "mvnxpb": [0, 13], "mvnxpbstate": 13, "mw": 12, "mw7": 12, "mymodul": 13, "m\u00e4chler": 13, "n": [0, 1, 4, 7, 8, 9, 10, 12, 13], "n0": 13, "n_0": 0, "n_box_decomposit": 13, "n_burnin": [8, 13], "n_c": 12, "n_con": 13, "n_constraint": 13, "n_context": 7, "n_discrete_point": 8, "n_eq": 13, "n_eq_con": 13, "n_eval": 13, "n_f": 7, "n_i": 7, "n_ineq": 13, "n_ineq_con": 13, "n_k": 0, "n_nz": 0, "n_p": 7, "n_pareto": [0, 13], "n_pareto_i": 13, "n_sampl": 13, "n_thin": [8, 13], "n_train": [0, 9], "n_w": [0, 7], "n_window": 8, "nadir": [12, 13], "naiv": 13, "name": [0, 2, 7, 8, 13], "name_filt": [8, 13], "named_paramet": 8, "namedtupl": [1, 8, 13], "nan": [0, 7, 8, 11, 13], "nando": 7, "nardi": 0, "narrow_gaussian": 0, "nativ": 8, "ndarrai": [2, 8, 13], "ndarrayoptimizationclosur": 8, "ndtr": 13, "nearbi": 8, "nearest": [12, 13], "necessari": [0, 7, 8, 9, 13], "necessarili": 0, "need": [0, 7, 8, 9, 10, 13], "neg": [0, 7, 8, 12, 13], "negat": [0, 8, 12], "negati": 12, "negative_log_gradient_sum": 7, "negative_log_hessian_sum": 7, "nei": 0, "neighbor": 13, "neil": 7, "network": 7, "neural": [0, 7, 10, 13], "neurip": [0, 7, 12], "neurocomput": 0, "never": 13, "new": [0, 1, 7, 8, 12, 13], "new_batch_shap": 7, "new_i": 7, "new_indic": 7, "new_pareto_i": 13, "new_posterior": 9, "new_valu": 7, "new_x": [7, 13], "next": [8, 13], "nicolo": 7, "nip": 0, "nn": [0, 7, 10, 13], "nnz_approx": 0, "node": [7, 13], "nois": [0, 1, 4, 7, 8, 9, 12, 13], "noise_free_model": 7, "noise_std": 12, "noiseless": 0, "noisi": [0, 7, 12], "noisyexpectedimprov": 0, "noisyinputentropysearch": 12, "nojima": 13, "nomin": 12, "non": [0, 7, 8], "non_domin": 13, "nondominatedpartit": [0, 13], "none": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13], "nonlinear": [4, 8, 12], "nonlinear_constraint_is_feas": 8, "nonlinear_inequality_constraint": [4, 8], "nonmonoton": 12, "nonmyop": 0, "nonneg": [7, 8], "noreturn": [4, 7], "norm": [0, 7, 13], "norm_to_lognorm": 7, "norm_to_lognorm_mean": 7, "norm_to_lognorm_vari": 7, "normal": [0, 1, 7, 8, 9, 10, 11], "normalize_dense_linear_constraint": 13, "normalize_indic": 13, "normalize_sparse_linear_constraint": 13, "normalize_tf": 7, "normalmcsampl": 10, "normalqmcengin": 10, "notabl": 13, "note": [0, 1, 3, 4, 7, 8, 9, 10, 12, 13], "notebook": 7, "novak": 7, "now": [0, 7], "np": 10, "nsample_featur": 13, "nsample_outcom": 13, "nth": 3, "nu": [0, 7], "nugget": 13, "nullcontext": 8, "nullop": 8, "num": 7, "num_categori": 13, "num_cel": [0, 13], "num_choic": 8, "num_constraint": [0, 12], "num_data": 7, "num_dimens": 7, "num_fantasi": [0, 8], "num_induc": 7, "num_inner_restart": 8, "num_input": 10, "num_latent_dim": 7, "num_mcmc_sampl": 7, "num_mv_sampl": 0, "num_object": [0, 12], "num_optima": [0, 13], "num_outcom": [0, 13], "num_output": [7, 9, 10, 13], "num_pareto": [0, 8], "num_pareto_point": 0, "num_pareto_sampl": 0, "num_point": 0, "num_pseudo_point": 8, "num_restart": [0, 4, 8, 13], "num_rff_featur": [0, 13], "num_sampl": [0, 3, 4, 7, 13], "num_step": [8, 13], "num_trace_ob": 0, "num_trace_observ": 0, "num_y_sampl": 0, "number": [0, 1, 3, 4, 7, 8, 9, 10, 12, 13], "numer": [0, 2, 7, 8, 10, 13], "numericswarn": 2, "nummer": 7, "numpi": [2, 4, 13], "numpy_util": 8, "nut": [3, 7], "o": [7, 8, 9, 12, 13], "oak": 7, "ober": 7, "obermay": 0, "obersev": 7, "obj": [0, 7, 13], "object": [3, 4, 7, 8, 9, 10, 11], "objective_index": 0, "objective_threshold": 0, "observ": [0, 1, 4, 7, 8, 9, 11, 12, 13], "observation_nois": [1, 4, 7, 13], "observed_i": 1, "observed_noise_model": 7, "observed_yvar": 1, "obtain": [0, 3, 7, 8, 9, 12, 13], "occasion": 0, "occur": [0, 13], "odd": 13, "off": [0, 8, 13], "offer": 13, "offset": [0, 7, 9, 10], "offset_constraint": 7, "offset_prior": 7, "often": [0, 7, 8], "omit": [0, 3, 7, 8, 10, 13], "onc": 0, "one": [0, 3, 4, 7, 8, 9, 10, 12, 13], "one_hot_bound": 7, "onehotargmaxst": 13, "onehottonumer": 7, "ones": [0, 7, 13], "ones_lik": 7, "onesampleposteriordrawmodel": 0, "oneshotacquisitionfunct": 0, "onli": [0, 1, 7, 8, 9, 10, 11, 13], "onlin": 7, "onto": 0, "oper": [0, 7, 13], "oppos": 0, "opt": 7, "optim": [0, 2, 3, 4, 5, 9, 10, 12, 13], "optimal_input": 0, "optimal_output": 0, "optimal_sobol_indici": 12, "optimal_valu": 12, "optimi": 13, "optimis": 0, "optimist": 0, "optimizationresult": 8, "optimizationstatu": 8, "optimizationtimeouterror": 2, "optimizationwarn": [2, 8], "optimize_acqf": [0, 4, 8, 10], "optimize_acqf_cycl": 8, "optimize_acqf_discret": 8, "optimize_acqf_discrete_local_search": 8, "optimize_acqf_homotopi": 8, "optimize_acqf_list": 8, "optimize_acqf_mix": [7, 8], "optimize_homotopi": 8, "optimize_object": 0, "optimize_objective_kwarg": 0, "optimize_posterior_sampl": 13, "optimizeacqfinput": 8, "optimizer_kwarg": [0, 3], "optimizer_opt": 0, "optimizeresult": 8, "optimum": 0, "optimzi": [2, 8], "option": [0, 4, 7, 8, 9, 10, 12, 13], "ord": 13, "order": [0, 12, 13], "ordereddict": 13, "ordin": 7, "org": [0, 4, 7], "origin": [0, 7, 8, 9, 13], "original_batch_shap": 7, "orthogon": 7, "orthogonal_additive_kernel": 7, "orthogonaladditivekernel": 7, "osborn": [0, 12, 13], "osi": 12, "osyczka": 12, "oszycka1995": 12, "other": [0, 8, 9, 11, 13], "otherwis": [0, 3, 7, 8, 10, 12, 13], "ottoni": 12, "ouf": 12, "ought": 7, "our": [0, 7], "out": [0, 2, 7, 8, 10, 13], "outcom": [0, 1, 8, 9, 10, 12, 13], "outcomd": 0, "outcome_constraint": 13, "outcome_model": 0, "outcome_nam": 13, "outcome_names_per_task": 13, "outcome_transform": [0, 7, 10], "outcometransform": [7, 10], "outcomeuntransform": 10, "outer": [0, 8], "output": [7, 8, 9, 10, 12, 13], "output_indic": [7, 13], "output_shap": [7, 9], "output_task": 7, "output_transform": [1, 10], "outputscal": [7, 10], "outputscaletransform": 10, "outsid": 7, "over": [0, 4, 7, 8, 9, 10, 12, 13], "overal": [7, 13], "overhead": 13, "overrid": [0, 7, 13], "overridden": [7, 10], "overwrit": [9, 13], "overwritten": 10, "owen": 13, "own": [7, 13], "ox": 7, "p": [0, 7, 8, 10, 12, 13], "p1": 12, "p2": 12, "p_1": 9, "p_12": 9, "p_1j": 12, "p_2": 9, "p_ij": 12, "packag": [8, 13], "pad": 0, "pad_to_n_w": 0, "page": [5, 10, 13], "pages2018numprob": 10, "pai": 13, "pair": [0, 7, 12, 13], "pairwis": 0, "pairwise_gp": 7, "pairwise_sampl": 10, "pairwisebayesianactivelearningbydisagr": 0, "pairwisegp": [0, 7, 10], "pairwiseiidnormalsampl": 10, "pairwiselaplacemarginalloglikelihood": 7, "pairwiselikelihood": 7, "pairwiselogitlikelihood": 7, "pairwisemcposteriorvari": 0, "pairwisemcsampl": 10, "pairwiseprobitlikelihood": 7, "pairwisesobolqmcnormalsampl": 10, "palmerin": 7, "paper": [0, 7, 12], "paquet": 13, "parallel": [0, 12, 13], "param": 7, "param_new": 0, "param_old": 0, "paramet": [0, 1, 2, 3, 4, 6, 9, 10, 11, 12, 13], "parameter": 0, "parameter_1": 7, "parameter_2": 7, "parameter_constraint": 8, "parameter_decomposit": 13, "parameter_rollback_ctx": 13, "paranthes": 13, "parego": 13, "parent": 7, "pareto": [0, 12], "pareto_front": 0, "pareto_i": 13, "pareto_set": 0, "pareto_y_sort": 13, "park": 12, "parmet": 7, "parsimoni": 7, "part": [0, 7, 12, 13], "partial": 0, "particular": [0, 7, 8, 11, 13], "particularli": 0, "partit": [0, 7], "pass": [0, 1, 3, 4, 7, 8, 9, 10, 13], "past": 8, "path": [0, 7, 13], "pathdict": 10, "pathlist": 10, "pathwis": 13, "pattern": [0, 8], "pbo": 0, "pdf": [0, 7, 13], "pe": 0, "peculiar": 12, "penalizedacquisitionfunct": 0, "penalizedmcobject": 0, "penalti": 0, "penalty_func": 0, "penalty_object": 0, "pend": [0, 13], "penicillin": 12, "penicillin_vector": 12, "pennington": 7, "penultim": 10, "per": [0, 7, 8, 9], "percent": 0, "percentag": 8, "perform": [0, 1, 4, 7, 8, 10, 11, 12, 13], "perhap": 7, "perm": 13, "permit": 13, "persist": [8, 13], "perspect": [7, 13], "perturb": [0, 7, 8, 12], "perturbation_set": [0, 7], "pg": 10, "phase": 0, "phi": [10, 13], "pi": [0, 12], "pibo": 0, "picheni": 7, "pick": [4, 8], "piec": [7, 10, 13], "piecewis": [7, 13], "pii": 0, "piv_chol": 13, "pivot": [7, 13], "pivot_": 13, "pivotedcholeski": 13, "place": [0, 7, 8, 13], "plai": 7, "plain": 13, "plane": 12, "pleas": [7, 12, 13], "plu": [0, 8], "plug": 13, "plug_in": 13, "pm": 0, "pmlr": [7, 12], "point": [0, 4, 8, 9, 10, 11, 12, 13], "pointwis": 8, "polar": 13, "polici": [0, 7], "poloczek": 7, "polynomi": 7, "polyop": 13, "polytop": [8, 13], "polytopesampl": 13, "poor": 0, "pop": 13, "pop_siz": 0, "popul": [7, 13], "posit": [0, 7, 8, 9, 12, 13], "possibl": [0, 7, 8, 10, 13], "possibli": [0, 2, 7, 8, 10], "post": [0, 7, 8], "post_processing_func": [0, 8], "posterior": [0, 1, 4, 5, 7, 8, 13], "posterior_list": 9, "posterior_sampl": [7, 10], "posterior_transform": [0, 4, 7, 13], "posteriorlist": [0, 7, 9, 10], "posteriormean": [0, 8], "posteriormeanmodel": 7, "posteriorstandarddevi": 0, "posteriortransform": [0, 4, 7, 13], "postprocess_mcmc_sampl": 7, "potenti": [0, 2, 7, 12, 13], "pow": 7, "powel": [0, 12], "power": [7, 8, 10, 13], "power_constraint": 7, "power_prior": 7, "pp": [12, 13], "ppl": 3, "practic": [0, 7, 10, 13], "pre": [7, 13], "precis": [0, 13], "precision_matrix": 13, "precomput": 13, "pred": 13, "predecessor": 13, "predefin": 7, "predict": [4, 7, 9, 12, 13], "predictive_entropy_search": 0, "predictive_mean_cach": 7, "preemptiv": 0, "pref_model": 0, "prefer": 7, "preferenti": 0, "prefix": 13, "prekopa": 0, "prekopa2012mvar": 0, "prepared_sampl": 0, "preprint": [0, 7, 10, 12], "preprocess": [0, 7, 13], "preprocess_transform": 7, "preprocessing_funct": 0, "present": [0, 4, 7, 13], "preserv": 13, "press": [7, 12], "pressur": 12, "pressurevessel": 12, "prevent": [0, 13], "previou": [0, 7, 8, 13], "previous": [0, 7, 13], "previous_winn": 0, "primari": [0, 13], "principl": 0, "print": [3, 11, 12, 13], "prior": [7, 8], "prior_config": 7, "prior_expon": 0, "prior_guid": 0, "prior_modul": 0, "prior_path": 10, "prior_sampl": 10, "priorguidedacquisitionfunct": 0, "priori": 13, "priorit": 13, "prob_perturb": 8, "probabilist": [0, 13], "probabilityofimprov": 0, "probabl": [0, 7, 8, 9, 10], "probit": [0, 7], "probl": 12, "problem": [0, 1, 4, 8, 12, 13], "proc": 13, "procedur": [0, 4], "proceed": [0, 7, 12], "process": [0, 7, 8, 9, 10, 12, 13], "prod_": 12, "prod_i": 0, "produc": [0, 7, 9, 10, 13], "product": [7, 12], "product_i": 0, "program": 13, "programmat": 0, "progress": [3, 13], "project": [0, 8], "project_to_sample_point": 0, "project_to_target_fidel": 0, "projectedacquisitionfunct": 0, "promis": 7, "propag": [0, 11], "propagate_grad": 11, "propat": 11, "proper": 8, "properli": [7, 13], "properti": [0, 7, 8, 9, 10, 12, 13], "proport": [8, 13], "propos": [0, 7, 12, 13], "protocol": 0, "provid": [0, 2, 3, 4, 7, 8, 9, 10, 12, 13], "proxi": 0, "proximal_weight": 0, "proximalacquisitionfunct": 0, "prune": [0, 8], "prune_baselin": 0, "prune_candid": 8, "prune_inferior_point": 0, "prune_inferior_points_multi_object": 0, "prune_toler": 8, "psd_safe_choleski": 7, "pseudorandom": 13, "psi": 0, "pstd": 0, "psychologi": 13, "public": 8, "publish": 10, "pull": 7, "pure": 0, "purpos": [0, 8], "put": [7, 10], "py": [7, 12, 13], "pymoo": [12, 13], "pyro": [3, 7], "pyro_model": 7, "pyromodel": 7, "python": 13, "pytorch": [4, 7, 9, 13], "pytorch_ess": 13, "q": [0, 4, 7, 8, 9, 12, 13], "q_0": 0, "q_1": 0, "q_2": 0, "q_aug": 0, "q_e": 0, "q_i": 0, "q_k": 0, "q_out": 13, "q_reduct": 0, "q_subset_indic": 13, "q_term": 0, "qanalyticprobabilityofimprov": 0, "qehvi": 0, "qei": [0, 4, 8], "qei_ff": 0, "qeubo": 0, "qexpectedhypervolumeimprov": 0, "qexpectedimprov": [0, 4, 8, 13], "qexpectedutilityofbestopt": 0, "qgibbon": 0, "qhvkg": 8, "qhypervolumeknowledgegradi": [0, 8], "qjointentropysearch": 0, "qknowledgegradi": [0, 8, 10], "qld": 13, "qlogei": 0, "qlogexpectedhypervolumeimprov": 0, "qlogexpectedimprov": 0, "qlognei": 0, "qlognoisyexpectedhypervolumeimprov": 0, "qlognoisyexpectedimprov": 0, "qlognparego": 0, "qlowerboundmaxvalueentropi": 0, "qlowerboundmultiobjectivejointentropysearch": 0, "qlowerboundmultiobjectivemaxvalueentropysearch": 0, "qmaxvalueentropi": 0, "qmc": [0, 8, 13], "qmultifidelityhypervolumeknowledgegradi": 0, "qmultifidelityknowledgegradi": 0, "qmultifidelitylowerboundmaxvalueentropi": 0, "qmultifidelitymaxvalueentropi": 0, "qmultiobjectivemaxvalueentropi": 0, "qmultiobjectivepredictiveentropysearch": 0, "qmultisteplookahead": 0, "qnegintegratedposteriorvari": 0, "qnehvi": [0, 8], "qnei": 0, "qnoisyexpectedhypervolumeimprov": 0, "qnoisyexpectedimprov": [0, 7], "qnparego": 0, "qpi": 0, "qpredictiveentropysearch": 0, "qprobabilityofimprov": 0, "qsimpleregret": 0, "qsr": 0, "quad_deg": 7, "quadrat": 7, "quadratur": [7, 13], "qualiti": 7, "quality_scor": 7, "qualityfunct": 7, "quantifi": 0, "quantil": [0, 9], "quasi": [0, 10, 13], "qucb": [0, 8], "queri": 13, "quickli": 8, "quit": 0, "qupperconfidencebound": [0, 8], "r": [0, 1, 7, 8, 10, 12, 13], "r1": 12, "r2": 12, "radial": 8, "rahimi": 10, "rahimi2007random": 10, "rais": [0, 2, 7, 8, 11, 13], "raise_on_fail": 7, "raise_on_viol": 8, "rand": [0, 1, 4, 7, 8, 9, 13], "rand_lik": [1, 7], "randint": 7, "randn": [7, 13], "random": [0, 7, 8, 9, 10, 12, 13], "random_search_optim": 0, "randomfourierfeatur": 13, "randomli": [0, 12], "randperm": 13, "rang": [7, 8, 9, 12, 13], "ranjan": 12, "rank": [0, 7], "rankingdataset": [7, 13], "rare": 8, "rasmussen": 7, "rastrigin": 12, "rate": [0, 7, 12], "rather": [0, 4, 7, 8, 9, 13], "raw": [0, 7, 8, 13], "raw_acqf": 0, "raw_inner_sampl": 8, "raw_sampl": [0, 4, 8, 13], "rbf": 7, "re": [7, 13], "reach": 8, "real": [0, 12], "realiz": 0, "reason": [0, 7, 11], "receiv": 8, "recent": 0, "recevi": 0, "recht": 10, "recip": [7, 10], "recommend": [0, 7, 13], "recomput": 13, "rectangl": [0, 13], "rectangular": 13, "recurs": 7, "reduc": [0, 8, 12, 13], "ref": 13, "ref_point": [0, 8, 13], "refer": [0, 7, 8, 10, 12, 13], "reference_tensor": 0, "refit": 7, "regardless": [0, 9, 13], "regener": 13, "regi": 8, "region": [0, 7, 12], "regist": [0, 7, 8, 10, 13], "registri": 0, "regress": [0, 13], "regret": 0, "regular": [0, 7, 8, 13], "regularization_paramet": 0, "regularli": 12, "reinforc": 7, "reiniti": [7, 8], "reinsert": 13, "reject": 0, "rel": [0, 7, 8, 13], "rel_tol": 8, "relat": [0, 2, 7], "relationship": [7, 12], "relax": [0, 13], "releas": [7, 13], "relev": [0, 8, 13], "reli": [0, 13], "relu": [0, 7, 13], "remain": [8, 13], "remedi": 13, "rememb": 13, "remov": [0, 7, 13], "reparameter": [0, 13], "repeat": [0, 8, 10, 13], "repeat_to_match_aug_dim": 0, "repeatedli": 13, "replac": [0, 2, 4, 8, 10, 13], "replic": [0, 10], "report": 13, "repres": [0, 2, 4, 7, 8, 9, 10, 12, 13], "represent": [0, 7, 8, 10, 13], "request": 0, "requir": [0, 7, 8, 13], "require_grad": 8, "requires_grad": [8, 13], "rescal": [10, 12], "research": [0, 7, 10, 13], "reserv": 13, "reset": [7, 8], "reshap": [0, 7], "reshape_and_detach": 7, "resolv": 13, "resp": 0, "respect": [0, 4, 7, 8, 9, 12, 13], "respons": [3, 7, 8, 9], "rest": 7, "restart": 8, "restrict": [0, 7], "result": [0, 3, 7, 8, 10, 12, 13], "retain": [0, 3, 8, 13], "retri": 8, "retriev": [0, 13], "retry_on_optimization_warn": 8, "return": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13], "return_best_onli": [0, 8], "return_full_tre": [0, 8], "return_numer": 7, "revers": 7, "reversibleinputtransform": 7, "revert": 7, "review": 0, "revisit": 7, "reward": 0, "reweight": 0, "rezend": 0, "rezende2014reparam": 0, "rff": [0, 13], "rh": [4, 8, 13], "rhokg": 7, "right": [7, 8, 10, 13], "risk": 7, "risk_averse_bo_with_environmental_vari": 7, "risk_averse_bo_with_input_perturb": 7, "risk_measur": [0, 7], "risk_measure_sampl": 7, "riskmeasuremcobject": [0, 7], "rmpfr": 13, "rng": [10, 13], "robust": [0, 12, 13], "robustli": 0, "roll": 13, "rollback": 13, "root": [0, 10, 13], "rosenbrock": 12, "rough": 3, "round": [0, 7, 8, 12], "round_nearest": 12, "round_tf": 7, "roundingor": 8, "roundst": 13, "routin": [3, 4, 8, 13], "row": [7, 8], "rsampl": [7, 9, 10, 13], "rsample_from_base_sampl": [9, 10, 13], "rtol": [7, 13], "rubric": 7, "rule": [7, 9, 10, 13], "run": [0, 7, 8, 10, 13], "runtest": 13, "runtim": [2, 3, 8, 13], "runtimeerror": 13, "ryan": 12, "ryoji": 12, "s0925231219308525": 0, "s10898": 13, "s_i": 12, "saa": [7, 10], "saas_gp": 7, "saasfullybayesianmultitaskgp": [3, 7], "saasfullybayesiansingletaskgp": [3, 7], "saaspyromodel": 7, "sac": 7, "sacgp": 7, "sackernel": 7, "safe_math": 13, "sai": 7, "sake": 0, "same": [0, 7, 8, 9, 12, 13], "sampl": [0, 2, 3, 5, 7, 8, 12], "sample_all_prior": 8, "sample_around_best": 8, "sample_cached_choleski": 13, "sample_dim": 10, "sample_hyperspher": 13, "sample_latent_featur": 7, "sample_lengthscal": 7, "sample_mean": 7, "sample_multipli": 0, "sample_nois": 7, "sample_optimal_point": 0, "sample_outputscal": 7, "sample_pareto_fronti": 0, "sample_perturbed_subset_dim": 8, "sample_pf": 0, "sample_point": 0, "sample_points_around_best": 8, "sample_polytop": 13, "sample_q_batches_from_polytop": 8, "sample_reduct": 0, "sample_s": 0, "sample_shap": [0, 9, 10, 13], "sample_simplex": 13, "sample_task_lengthscal": 7, "sample_transform": 9, "sample_truncated_normal_perturb": 8, "sample_valu": 10, "sampled_x": 4, "samplepath": [10, 13], "sampler": [0, 3, 7, 8, 9], "samplereducingacquisitionfunct": 0, "samplereducingmcacquisitionfunct": 0, "samplereductionprotocol": 0, "samplerlist": 10, "samplingstrategi": 4, "samplingwarn": 2, "saniti": 13, "santo": 12, "satisfi": [0, 4, 8, 9, 10, 13], "saul": 7, "save": 13, "scalabl": [0, 7, 12], "scalar": [4, 7, 8, 9], "scalarization_weight": 0, "scalarize_posterior": 9, "scalarize_posterior_gpytorch": 9, "scalarizedposteriormean": 0, "scalarizedposteriortransform": 0, "scale": [0, 7, 10, 13], "scale_max_ref_point": 13, "scale_tril": 13, "scalekernel": [7, 10], "schedul": 8, "scheme": [0, 13], "schneider": 10, "schoenholz": 7, "scienc": [0, 12], "sciencedirect": 0, "scipi": [0, 4, 7, 8], "scipy_bound": 8, "scipy_minim": 8, "scipy_opt": 0, "score": 7, "scrambl": 13, "scratch": 7, "script": 7, "scriptmodul": [0, 7, 10, 13], "sd_prior": 7, "se": 7, "search": [4, 5, 7, 8, 12, 13], "sebastian": 7, "second": [2, 4, 7, 8, 10, 12, 13], "second_ord": 7, "section": [12, 13], "see": [0, 4, 7, 8, 10, 12, 13], "seed": [0, 8, 10, 13], "seed_inn": 0, "seek": 0, "seem": 0, "select": [0, 4, 7, 8, 12, 13], "select_pivot": 13, "self": [0, 7, 9, 13], "semant": [4, 7], "semi": 0, "sens": 0, "sensit": [0, 13], "sensitivity_analysi": 12, "seo": 0, "seo2014activedata": 0, "separ": [7, 12, 13], "separate_mtmvn": 13, "seper": 4, "sequenc": [0, 3, 7, 8, 10, 13], "sequenti": [0, 7, 8], "serv": 13, "set": [0, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13], "set_attribut": 7, "set_baseline_i": 0, "set_input": 7, "set_stat": 8, "set_tensors_from_ndarray_1d": 8, "set_train_data": 7, "set_x_pend": [0, 13], "setattr": 7, "setup": 13, "seven": 12, "seventh": 7, "sever": [7, 12, 13], "sfu": 12, "shafei": 0, "shallow": 13, "shape": [0, 1, 4, 6, 7, 8, 9, 10, 13], "shape_to_str": 6, "shapex": 8, "share": [0, 7, 8, 10, 13], "sharp": 0, "sharper": 13, "shekel": 12, "shift": [0, 13], "shiga": 0, "shoemak": 8, "shot": 8, "should": [0, 2, 7, 8, 9, 10, 12, 13], "should_stop": 8, "shown": 8, "shrinkag": 7, "siam": 0, "sibl": 10, "side": [8, 12, 13], "sigma": [0, 7, 8, 9, 10], "sigma_k": 0, "sigma_sq": 13, "sigmoid": [0, 7, 13], "sign": 13, "signal": 13, "signatur": [0, 7, 8, 13], "significantli": 0, "silent": [7, 10], "silva": 12, "sim": 10, "similar": [0, 4, 7, 8, 12, 13], "similarli": 13, "simon": 13, "simpl": [0, 7, 12, 13], "simplex": [0, 13], "simpli": [7, 8, 10, 13], "simplic": 0, "simplifi": [7, 12, 13], "simul": [0, 7, 12], "simulaten": 4, "simultan": [0, 12], "sin": [0, 7, 12], "sinc": [0, 7, 8, 10, 13], "sine": 10, "sinecosinetransform": 10, "sing": 7, "singl": [0, 4, 7, 8, 9, 12, 13], "single_q_method": 13, "singletaskgp": [0, 1, 7], "singletaskmultifidelitygp": 7, "singletaskvariationalgp": 7, "sinusoid": 12, "situat": 13, "six": 12, "sixhumpcamel": 12, "size": [0, 1, 4, 6, 7, 8, 9, 10, 13], "skip": 13, "skip_expand": 7, "skip_task_features_in_dataset": 13, "slack": [12, 13], "slicecontain": 13, "slow": 13, "slsqp": [4, 8], "small": [0, 1, 7, 8, 13], "smaller": [0, 7, 13], "smallest": 0, "smart": 8, "smooth": [0, 7, 12, 13], "smooth_amax": 13, "smooth_amin": 13, "smoothed_constraint_ind": 0, "smoother": 12, "smoothli": [0, 13], "snoek": [7, 12], "so": [0, 4, 7, 9, 12, 13], "sobol": [10, 12, 13], "sobolengin": 10, "sobolqmcnormalsampl": [0, 8, 10], "soft": [0, 12], "softmax": [4, 8], "softplu": [0, 13], "softwar": 7, "sole": [7, 8], "solut": [0, 4, 8, 12], "solv": [0, 7, 8, 12, 13], "solver": [4, 8, 13], "some": [0, 7, 11, 13], "someth": 7, "sometim": [0, 3], "somewhat": [0, 12], "sort": [7, 13], "sort_by_dimens": 13, "sourc": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13], "souza": 0, "space": [0, 4, 8, 9, 12, 13], "spars": [7, 13], "sparse_to_dense_constraint": 13, "sparsiti": 7, "spatial": 7, "special": [0, 7, 13], "specif": [0, 7, 8, 12], "specifi": [0, 3, 7, 8, 9, 12, 13], "speed": [7, 12, 13], "speedreduc": 12, "sphere": 13, "split": 0, "springer": [10, 12, 13], "sqrt": [0, 7, 12], "squar": [0, 10, 12, 13], "squeez": 7, "srn": 12, "ssurjano": 12, "stabil": [7, 13], "stabl": 13, "stack": [7, 13], "stage": [0, 8, 13], "standard": [0, 1, 2, 4, 7, 8, 9, 10, 11, 12, 13], "standard_normal_log_hazard": 13, "standardize_mo": 13, "standardized_rang": 13, "start": [0, 4, 7, 8, 13], "stat": 7, "state": [0, 7, 8, 10, 11, 12, 13], "state_dict": [7, 13], "statement": [11, 13], "static": [0, 13], "stationari": 10, "statist": [0, 7, 12], "statu": 8, "std": [0, 7, 8], "std_nois": 0, "std_normal_cdf": 7, "stderr": 11, "steadi": 12, "step": [3, 7, 8, 9, 13], "step_limit": 8, "still": [0, 7], "stipul": 13, "stochast": [0, 7], "stochastic_sampl": 10, "stochasticsampl": [0, 10], "stoll": 0, "stop": [4, 7], "stopping_criterion": 8, "stoppingcriterion": 8, "store": [0, 7, 13], "str": [0, 1, 2, 3, 4, 6, 7, 8, 10, 13], "straight": [7, 13], "strategi": [0, 2, 7, 8, 13], "stratifi": 7, "stream": 7, "strict": [7, 13], "strictli": 13, "string": [0, 8, 10, 12, 13], "strong": [0, 7, 12], "stronger": 7, "strongli": 0, "structur": [7, 9, 12, 13], "styblinski": 12, "styblinskitang": 12, "sub": [0, 7, 13], "sub_modul": 7, "subclass": [7, 10, 13], "subject": [0, 12, 13], "submit": 0, "submodel": [4, 7], "subroutin": 3, "subset": [0, 7, 8, 10, 13], "subset_output": 7, "subset_sigma": 8, "subset_transform": 7, "subsetindexcachingmixin": [0, 13], "subspac": 7, "substanti": 0, "substitut": 7, "substrat": 12, "subtre": 0, "succeed": 3, "success": [0, 8], "successor": 13, "suffici": 7, "suffix": 7, "suggest": [0, 7, 13], "suit": 12, "suitabl": [7, 10], "sum": [0, 7, 8, 12, 13], "sum_": [0, 7, 12], "sum_i": [0, 4, 8, 12, 13], "sum_j": [7, 8], "summar": 8, "super": [7, 13], "superviseddataset": [0, 7, 13], "supplementari": 0, "support": [0, 1, 7, 8, 9, 10, 12, 13], "supports_cache_root": 0, "suppress": 13, "suppress_input_warn": 13, "sure": 11, "surfac": 0, "surjanov": 12, "surrog": [0, 8], "sutherland": 10, "sutherland2015error": 10, "svgp": 7, "swap": 13, "swap_along_dim_": 13, "swarm": 12, "sweep": 13, "swerski": 7, "swersky2013mtbo": 7, "switch": 13, "synthetictestfunct": 12, "synthetictestfunctiontestcasemixin": 13, "synthtet": 12, "system": [0, 7, 10, 13], "t": [0, 1, 4, 7, 8, 9, 10, 12, 13], "t1": 12, "t2": 12, "t_1": 12, "t_2": 12, "t_batch_mode_transform": 13, "t_o": 12, "t_v": 12, "tabl": [0, 12], "tacqfargconstructor": 0, "tail": [0, 13], "take": [0, 4, 7, 8, 9, 10, 13], "taken": [0, 7, 12, 13], "takeno": 0, "takeno2020mfmv": 0, "takeuchi": 0, "tanab": 12, "tanabe2020": 12, "tang": 12, "tangent": [7, 13], "tapproxmodel": 7, "target": [0, 7, 8, 9, 11, 13], "target_batch_shap": 7, "target_fidel": 0, "target_outcome_nam": 13, "target_point": 0, "target_task_valu": 13, "target_tensor": 0, "task": [0, 1, 4, 7, 8, 9], "task_": 13, "task_covar_modul": 7, "task_covar_prior": 7, "task_featur": [7, 13], "task_feature_index": 13, "task_idc": 7, "task_rank": 7, "task_valu": [7, 13], "tau": [0, 7, 13], "tau_max": 0, "tau_relu": 0, "tausq": 7, "taylor": 13, "technic": 13, "technometr": 12, "temper": 4, "temperatur": [0, 4, 7, 8, 12, 13], "temporari": 7, "temporarili": 13, "tension": 12, "tensioncompressionstr": 12, "tensor": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 13], "tensorbas": 8, "tensorcheckpoint": 13, "tensorflow": 13, "tensoro": 13, "tensortransform": 10, "terenin": 10, "term": [0, 7, 13], "termin": [0, 2, 8], "termniat": 9, "tessel": 13, "tesselampl": 13, "test": [0, 1, 7, 8, 9], "test_attribut": 13, "test_batch_shap": [7, 13], "test_evaluate_slack": 13, "test_forward": 13, "test_funct": 5, "test_help": 13, "test_i": 1, "test_jitt": 0, "test_max_hv": 13, "test_mean": 9, "test_nois": 9, "test_num_constraint": 13, "test_obs_covar": 9, "test_optim": 13, "test_optimal_valu": 13, "test_ref_point": 13, "test_train_covar": 9, "test_x": [0, 1, 7, 9, 10], "test_yvar": 1, "testcas": 13, "tf": 7, "tf1": 7, "tf2": 7, "tf3": 7, "tfantasizemixin": 7, "th": [0, 4, 7, 8, 13], "than": [0, 4, 7, 8, 9, 11, 12, 13], "thee": 0, "thei": [0, 7, 8, 13], "them": [0, 7, 9, 10, 13], "theoret": 0, "theori": 0, "therefor": 0, "thereof": 13, "theta": [7, 12, 13], "theta_0": 12, "theta_i": 12, "thi": [0, 1, 3, 4, 7, 8, 9, 10, 11, 12, 13], "thiel": 12, "thin": [3, 8, 13], "thing": 7, "thinn": 13, "third": [7, 12], "thirti": 7, "thirtieth": 12, "thoroughli": 8, "those": [0, 7, 13], "though": [0, 7], "thought": 0, "three": [7, 8, 12], "threehumpcamel": 12, "threshold": [0, 8, 13], "thresold": 13, "through": [0, 3, 7, 8, 11, 12, 13], "throughput": 7, "thu": [0, 8], "ti": 13, "tie": 13, "tiger": 7, "tight": 13, "tighter": 13, "time": [0, 2, 7, 8, 9, 12, 13], "timeout": 4, "timeout_sec": [4, 8], "tini": 13, "tinputtransform": 10, "tkwarg": [0, 7, 13], "todo": [0, 7, 8, 12, 13], "togeth": [7, 10], "toggl": [0, 7, 13], "tol": [8, 9], "toler": [7, 8, 11], "too": [0, 7], "top": [7, 9, 10], "topic": 0, "torch": [0, 1, 4, 7, 10], "torch_minim": 8, "torchattr": 8, "torchposterior": [9, 10], "toscano": 7, "total": [0, 2, 7, 8, 13], "tournament": 12, "toutputtransform": 10, "toward": [0, 13], "toyrobust": 12, "trace": 0, "track": [0, 8, 13], "trade": 0, "tradeoff": 0, "trail": [0, 7], "train": [0, 1, 3, 7, 8, 9, 11, 13], "train_comp": 0, "train_diff": 9, "train_embed": 7, "train_full_covar": 7, "train_i": [0, 1, 3, 7, 11], "train_input": [0, 7, 8], "train_nois": 9, "train_obj": 0, "train_target": 9, "train_train_covar": 9, "train_x": [0, 1, 3, 7, 11, 13], "train_x1": 7, "train_x2": 7, "train_y1": 7, "train_y2": 7, "train_y_var": 11, "train_yvar": [0, 1, 7, 13], "training_data": [0, 7], "transact": [0, 12, 13], "transfer": 7, "transfomr": 7, "transform": [0, 1, 8, 10], "transform_constraint": 8, "transform_input": [7, 13], "transform_inter_point_constraint": 8, "transform_intra_point_constraint": 8, "transform_on_ev": 7, "transform_on_fantas": 7, "transform_on_train": 7, "transformed_weight": 0, "transformedmodulemixin": 10, "transformedposterior": [7, 9], "transfrom": 7, "translat": 7, "travers": 13, "treat": [7, 13], "treatment": 0, "tree": [0, 3], "tri": [0, 8, 13], "triangl": 13, "triangul": 13, "triangular": 13, "trick": [0, 13], "trikalino": 13, "trikalinos2014polytop": 13, "tril": 13, "tring": 13, "trinh": 13, "trinh2015bivari": [0, 13], "trip": [0, 8], "tripl": 13, "trivari": 13, "trivial": 0, "true": [0, 4, 7, 8, 10, 11, 12, 13], "trunc": 13, "truncat": [7, 8], "truncated_multivariate_norm": 13, "truncatedmultivariatenorm": 13, "trust": 0, "try": [0, 4], "tsukada": 0, "tu": 0, "tu2022": 0, "tu2022joint": 0, "tunabl": 7, "tune": 7, "tupl": [0, 1, 3, 4, 7, 8, 9, 10, 12, 13], "turbo": 12, "turn": [3, 7], "tutori": 7, "twenti": 12, "twice": 13, "two": [0, 4, 7, 8, 9, 12, 13], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 12], "type_bypassing_encod": 13, "typeddict": 13, "typic": [0, 7, 8, 9, 12, 13], "u": [0, 3, 7, 13], "u_": 0, "u_1": 0, "u_2": 0, "u_3": 0, "u_idx": 13, "u_n": 0, "uai": 12, "ucb": [0, 4], "uk": 7, "un": [0, 7, 13], "unalt": 0, "unbound": 13, "unbserver": 7, "uncertainti": [0, 7, 12], "unclaim": 13, "unconsolid": 7, "unconsolidated_util": 7, "unconstrain": 0, "uncorrel": 7, "undefin": 13, "under": [0, 4, 8, 10, 12, 13], "underflow": 13, "underli": [4, 7, 10, 13], "unexpect": [0, 3, 13], "unexpected_kei": [7, 13], "unexpectedli": 7, "unified_skew_norm": 13, "unifiedskewnorm": 13, "uniform": [4, 7, 13], "uniformli": [12, 13], "uninform": 7, "union": [0, 4, 7, 8, 9, 10, 12, 13], "uniqu": [7, 8, 12, 13], "unit": [0, 4, 7, 11, 12, 13], "unitqualityfunct": 7, "univers": 13, "universitext": 10, "unknown": [0, 7, 8, 12], "unless": [0, 7, 9, 12, 13], "unlik": [0, 7, 13], "unnorm": [7, 13], "unnormalize_tf": 7, "unord": 13, "unreach": 7, "unsqueez": 7, "unstabl": 0, "unsuccessfulli": 2, "unsupport": 2, "unsupportederror": 2, "until": [0, 7, 8], "untransform": [7, 10], "untransform_posterior": 7, "unus": [0, 7], "up": [0, 7, 8, 11, 12, 13], "updat": [0, 7, 8], "update_": 13, "update_local_upper_bounds_increment": 13, "update_model": 7, "update_path": 10, "update_strategi": 10, "upon": [0, 8, 13], "upper": [0, 7, 8, 9, 12, 13], "upper_": 0, "upper_bound": [4, 8], "upper_i": 0, "upperconfidencebound": [0, 4], "upstream": 7, "us": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13], "usa": 12, "usag": [0, 3, 7, 8], "use_count": 0, "use_gumbel": 0, "use_lkj_prior": 7, "use_mean": 0, "use_posterior_mean": 0, "user": [0, 2, 3, 7, 8, 9, 13], "userinputwarn": 2, "usual": [0, 7, 12], "util": [1, 5], "util_diff": 7, "v": [4, 7, 8, 10, 12], "v0": [7, 13], "v130": 7, "v21": 7, "v_i": 12, "v_max": 12, "val": 7, "valfunc_argfac": 0, "valfunc_cl": 0, "valid": [0, 1, 7, 8, 11, 13], "validate_arg": 13, "validate_init": 13, "validate_input_sc": [7, 11], "valkenhoef": 13, "valu": [3, 4, 7, 8, 9, 10, 11, 12, 13], "value_funct": 8, "valueerror": [8, 13], "van": [7, 13], "vancouv": 13, "vanilla": 13, "vanish": 7, "var": [0, 7, 11, 13], "vari": [0, 12], "variabl": [0, 7, 8, 9, 13], "varianc": [0, 4, 7, 9, 11, 13], "variance_transform": 9, "variant": [0, 13], "variat": [9, 13], "variational_distribut": 7, "variational_strategi": 7, "variationalelbo": 7, "variationalstrategi": 7, "varieti": 7, "variou": 7, "vector": [0, 7, 8, 9, 10, 12, 13], "vectorof": 7, "vehicl": 12, "vehiclesafeti": 12, "vendor": 13, "verbatim": 8, "verbos": [11, 13], "veri": [0, 1, 7, 13], "verlag": 12, "version": [0, 2, 7, 10, 12, 13], "vertex": 13, "vertic": 13, "vessel": 12, "via": [0, 4, 7, 8, 9, 10], "victor": 7, "vinogradska": 12, "violat": [2, 4, 12], "virginia": 12, "virtual": [0, 2, 12], "visibl": 13, "visual": 13, "vlad": 7, "vol": [12, 13], "volum": [7, 12], "w": [0, 1, 4, 7, 8, 9, 12, 13], "w_1": 12, "w_2": 12, "w_3": 12, "w_4": 12, "w_d": 12, "w_i": [12, 13], "w_j": 12, "w_l": 12, "w_set": 0, "wa": [0, 8, 12, 13], "wai": [0, 7, 13], "wait": 8, "wall": 0, "wallat": 0, "wan": 13, "wang": [0, 12], "wang2017mv": 0, "want": [0, 7, 8, 13], "warm": [0, 13], "warmstart_multistep": 0, "warmup_step": 3, "warn": [0, 1, 7, 11, 13], "warp": 7, "we": [0, 4, 7, 8, 9, 13], "wei": 7, "weigh": 0, "weight": [0, 4, 7, 8, 9, 10, 13], "weighted_object": 0, "weighted_util": 0, "weightedmcmultioutputobject": 0, "weld": 12, "welded_beam": 12, "weldedbeam": 12, "weldedbeamso": 12, "well": [0, 7, 8, 9, 12, 13], "were": [0, 7, 12], "wess": 13, "wether": 0, "what": [0, 7, 8], "when": [0, 2, 3, 4, 7, 8, 9, 10, 11, 13], "whenev": 8, "where": [0, 1, 4, 7, 8, 9, 10, 12, 13], "whether": [0, 3, 7, 8, 12, 13], "which": [0, 2, 4, 7, 8, 9, 10, 12, 13], "while": [0, 4, 7, 8, 9, 10, 12, 13], "whiten": 7, "whole": [0, 7, 8, 13], "whose": [0, 8, 10, 13], "widespread": 12, "width": 7, "wierstra": 0, "wild": 12, "wilk": 7, "william": 7, "wilson": [0, 7, 10], "wilson2017reparam": 0, "wilson2020sampl": 10, "wilson2021pathwis": 10, "window": 8, "winner": 0, "winter": 0, "wise": [0, 7, 8, 13], "with_grad": 4, "within": [0, 7, 8, 9, 10, 12, 13], "without": [0, 7, 8, 9, 13], "wjmaddox": 13, "word": [0, 13], "work": [0, 7, 9, 13], "workshop": [0, 12], "world": 12, "worst": 0, "worstcas": 0, "worthi": 12, "would": [0, 7, 13], "wrap": [0, 7, 8, 10, 13], "wrapper": [7, 8, 13], "write": 13, "written": [7, 13], "wrt": 13, "wu": [0, 7], "wu2016parallelkg": 0, "wu2019mf": 7, "www": [0, 7, 12], "x": [0, 1, 4, 7, 8, 9, 10, 12, 13], "x0": [8, 13], "x1": [7, 12], "x2": [7, 12], "x3": 12, "x4": 12, "x_": [7, 12], "x_0": 12, "x_1": [0, 7, 12], "x_11": 7, "x_1d": 7, "x_2": [7, 12], "x_21": 7, "x_2d": 7, "x_3": 12, "x_7": 12, "x_actual": 0, "x_avoid": 8, "x_base": 0, "x_baselin": [0, 7, 8, 13], "x_d": 12, "x_evaluation_mask": 0, "x_expand": 0, "x_fantasi": 0, "x_full": 0, "x_i": [0, 12], "x_input": 12, "x_j": [0, 12], "x_k": 0, "x_m": 12, "x_m1": 7, "x_match": 13, "x_md": 7, "x_n": 0, "x_normal": 13, "x_observ": 0, "x_opt": 13, "x_p": 0, "x_pend": [0, 8, 13], "x_pending_evaluation_mask": 0, "x_proj": 0, "x_q": 0, "x_shape": 0, "xception": 13, "xdoctest": 13, "xi": 7, "xing": 7, "xinit": [4, 8], "xl": 13, "xrnd": 8, "xtol": 7, "xu": 13, "xxix": 12, "y": [0, 4, 7, 8, 10, 12, 13], "y1": 13, "y2": 13, "y_base": 0, "y_baselin": 0, "y_i": [0, 13], "y_p": 12, "y_pmean": 0, "y_sampl": 0, "y_standard": 13, "y_tild": 0, "y_x": 12, "yang": [0, 12], "yang2019": [0, 12, 13], "yang2019a": 12, "yet": [0, 13], "yield": [0, 12, 13], "yl": 13, "you": [0, 7, 8, 13], "your": [7, 13], "yu": 13, "yvar": [7, 13], "z": [0, 7, 8, 10, 12, 13], "z_1": [12, 13], "z_2": 12, "z_3": 12, "z_4": 12, "z_i": 12, "zdt": 12, "zdt1": 12, "zdt2": 12, "zdt3": 12, "zeiling": 12, "zero": [0, 4, 7, 8, 11, 12, 13], "zero_grad_ctx": [8, 13], "zero_on_ent": 13, "zero_on_exit": 13, "zeta": 0, "zhang": 7, "zhe": 7, "zhe2019hogp": [7, 9], "zhou": [0, 7, 12], "zitzler": 12, "zitzler2000": 12, "zoo": 7, "zoubin": 7, "\u03b5": 10, "\u03c3": 13}, "titles": ["botorch.acquisition", "botorch.cross_validation", "botorch.exceptions", "botorch.fit", "botorch.generation", "BoTorch API Reference", "botorch.logging", "botorch.models", "botorch.optim", "botorch.posteriors", "botorch.sampling", "botorch.settings", "botorch.test_functions", "botorch.utils"], "titleterms": {"For": 12, "One": 0, "The": 0, "abstract": [0, 9, 12, 13], "acquisit": [0, 4, 8], "activ": 0, "aggreg": 7, "algebra": 13, "alloc": 7, "analysi": 12, "analyt": 0, "api": [0, 5, 7, 9, 10, 12], "argument": 0, "awar": [0, 7], "base": [7, 9, 10], "bayesian": [7, 9], "bivari": 13, "botorch": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], "box": 13, "cach": 0, "candid": 4, "carlo": [0, 10], "chebyshev": 0, "choleski": [0, 13], "closur": 8, "compon": 7, "condit": 13, "constant": 13, "constraint": [8, 13], "constructor": [0, 7], "contain": 13, "context": [7, 13], "contextu": 7, "convers": [7, 8], "core": 8, "cost": [0, 7], "criteria": 8, "cross_valid": 1, "dataset": 13, "decomposit": 13, "decoupl": 0, "determinist": 7, "dispatch": 13, "distribut": 13, "domin": 13, "ellipt": 13, "ensembl": [7, 9], "entropi": 0, "error": 2, "except": 2, "factori": [0, 7], "feasibl": 13, "featur": [0, 10], "fidel": [0, 7, 12], "fit": [3, 8], "fix": 0, "from": 13, "fulli": [7, 9], "function": [0, 4, 8, 10, 12], "gaussian": [10, 13], "gener": [0, 4, 8, 10], "get": 10, "gp": [7, 9, 13], "gpytorch": [7, 9], "gradient": 0, "guid": 0, "helper": [8, 10, 13], "higher": [7, 9], "hint": 13, "homotopi": 8, "hypervolum": [0, 13], "index": 10, "indic": 5, "induc": 7, "initi": 8, "input": [0, 7], "joint": 0, "kernel": 7, "knowledg": 0, "learn": 0, "likelihood": 7, "linear": 13, "list": [7, 9, 10, 13], "log": 6, "lookahead": 0, "low": 13, "manag": 13, "map": 10, "math": 13, "max": 0, "measur": 0, "method": 7, "mix": 7, "model": [7, 8], "modul": 7, "mont": [0, 10], "multi": [0, 7, 12, 13], "multitask": [7, 9], "multivari": 13, "non": 13, "normal": 13, "numpi": 8, "object": [0, 12, 13], "optim": [7, 8], "order": [7, 9], "other": 7, "outcom": 7, "output": 0, "pairwis": [7, 10], "paramet": [7, 8], "parego": 0, "pareto": 13, "partit": 13, "path": 10, "pathwis": 10, "penal": 0, "point": 7, "posterior": [9, 10], "predict": 0, "prefer": 0, "prior": [0, 10, 13], "probabl": 13, "proxim": 0, "qmc": 10, "rank": 13, "refer": 5, "regress": 7, "reward": 7, "risk": 0, "round": 13, "safe": 13, "sampl": [4, 9, 10, 13], "sampler": [10, 13], "scalar": [0, 13], "search": 0, "sensit": 12, "set": 11, "shot": 0, "skew": 13, "slice": 13, "space": 7, "statist": 13, "step": 0, "stochast": 10, "stop": 8, "strategi": [4, 10], "synthet": 12, "tabl": 5, "task": 13, "test": [12, 13], "test_funct": 12, "timeout": 8, "tool": 8, "torch": [8, 9, 13], "transform": [7, 9, 13], "truncat": 13, "type": 13, "unifi": 13, "updat": [10, 13], "util": [0, 4, 7, 8, 9, 10, 12, 13], "utilti": 7, "valu": 0, "variat": 7, "via": 13, "volum": 13, "warn": 2, "wrapper": 0}})