Search.setIndex({"docnames": ["acquisition", "cross_validation", "exceptions", "fit", "generation", "index", "logging", "models", "optim", "posteriors", "sampling", "settings", "test_functions", "utils"], "filenames": ["acquisition.rst", "cross_validation.rst", "exceptions.rst", "fit.rst", "generation.rst", "index.rst", "logging.rst", "models.rst", "optim.rst", "posteriors.rst", "sampling.rst", "settings.rst", "test_functions.rst", "utils.rst"], "titles": ["botorch.acquisition", "botorch.cross_validation", "botorch.exceptions", "botorch.fit", "botorch.generation", "BoTorch API Reference", "botorch.logging", "botorch.models", "botorch.optim", "botorch.posteriors", "botorch.sampling", "botorch.settings", "botorch.test_functions", "botorch.utils"], "terms": {"base": [0, 1, 2, 4, 8, 11, 12, 13], "modul": [0, 5, 7, 8, 9, 10, 12, 13], "all": [0, 4, 7, 8, 9, 10, 11, 12, 13], "class": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13], "analyticacquisitionfunct": 0, "model": [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13], "posterior_transform": [0, 4, 7, 13], "none": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13], "kwarg": [0, 2, 3, 4, 7, 8, 10, 13], "sourc": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13], "acquisitionfunct": [0, 4, 8, 13], "abc": [0, 7, 10, 12], "paramet": [0, 1, 2, 3, 4, 9, 10, 11, 12, 13], "option": [0, 1, 3, 4, 7, 8, 9, 10, 12, 13], "posteriortransform": [0, 4, 7, 13], "A": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 13], "fit": [0, 2, 4, 5, 7], "singl": [0, 4, 7, 8, 9, 12, 13], "outcom": [0, 8, 9, 10, 12, 13], "If": [0, 3, 4, 7, 8, 9, 10, 12, 13], "us": [0, 1, 3, 4, 7, 8, 9, 10, 11, 12, 13], "transform": [0, 8, 10], "posterior": [0, 1, 4, 5, 7, 8, 13], "i": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13], "requir": [0, 7, 8, 13], "set_x_pend": [0, 13], "x_pend": [0, 8, 13], "inform": [0, 7, 8, 9, 10, 13], "about": [0, 7], "pend": [0, 13], "design": [0, 7, 8, 12, 13], "point": [0, 4, 8, 9, 10, 11, 12, 13], "tensor": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 13], "n": [0, 1, 4, 7, 8, 9, 10, 12, 13], "x": [0, 1, 3, 4, 7, 8, 9, 10, 12, 13], "d": [0, 1, 4, 7, 8, 10, 12, 13], "dim": [0, 4, 7, 8, 9, 10, 12, 13], "have": [0, 4, 7, 8, 9, 10, 12, 13], "been": [0, 7, 8, 13], "submit": 0, "evalu": [0, 1, 3, 4, 7, 8, 10, 12, 13], "yet": [0, 13], "return": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 13], "type": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12], "train": [0, 1, 3, 4, 7, 8, 9, 10, 11, 12, 13], "bool": [0, 1, 3, 4, 7, 8, 10, 11, 12, 13], "leverag": 0, "decomposit": [0, 7], "covaianc": 0, "over": [0, 4, 7, 8, 9, 10, 12, 13], "f": [0, 7, 9, 10, 12, 13], "x_baselin": [0, 7, 8, 13], "cached_choleski": 0, "supports_cache_root": 0, "check": [0, 7, 8, 11, 13], "support": [0, 1, 7, 8, 9, 10, 12, 13], "cache_root": 0, "two": [0, 4, 7, 8, 9, 12, 13], "criteria": 0, "ar": [0, 1, 3, 4, 7, 8, 9, 10, 11, 12, 13], "task": [0, 1, 4, 7, 8, 9, 13], "produc": [0, 7, 9, 10, 13], "gpytorchposterior": [0, 1, 7, 9, 13], "monte_carlo": 0, "mcacquisitionfunct": 0, "sampler": [0, 3, 7, 9], "mcsamplermixin": 0, "batch": [0, 1, 4, 7, 8, 9, 10, 13], "mcsampler": [0, 7, 10], "draw": [0, 4, 7, 9, 10, 13], "sampl": [0, 2, 3, 5, 7, 8, 12], "given": [0, 4, 7, 8, 10, 11, 12, 13], "get_sampl": [0, 10], "note": [0, 1, 3, 4, 7, 8, 9, 10, 12, 13], "For": [0, 3, 7, 8, 9, 10, 11, 13], "do": [0, 4, 7, 8, 13], "compat": [0, 4, 7, 9, 10, 13], "intend": [0, 7, 9, 10, 13], "case": [0, 4, 7, 8, 9, 10, 13], "must": [0, 1, 4, 7, 8, 10, 12, 13], "provid": [0, 3, 4, 7, 8, 9, 10, 12, 13], "see": [0, 3, 7, 8, 10, 12, 13], "forkedrngsampl": [0, 10], "stochasticsampl": [0, 10], "exampl": [0, 1, 3, 4, 7, 8, 9, 10, 13], "mcacquisitionobject": [0, 4], "under": [0, 4, 8, 10, 12, 13], "which": [0, 2, 4, 7, 8, 9, 10, 12, 13], "default": [0, 4, 7, 8, 9, 10, 11, 12, 13], "identitymcobject": [0, 4], "batch_shap": [0, 1, 4, 7, 8, 9, 10, 12, 13], "m": [0, 1, 7, 9, 10, 12, 13], "forward": [0, 3, 4, 7, 8, 10, 12, 13], "take": [0, 4, 7, 8, 9, 10, 13], "q": [0, 4, 7, 8, 9, 12, 13], "t": [0, 1, 4, 7, 8, 9, 10, 12, 13], "each": [0, 4, 7, 8, 9, 10, 12, 13], "shape": [0, 1, 4, 7, 8, 9, 10, 13], "where": [0, 1, 4, 7, 8, 9, 10, 12, 13], "broadcast": [0, 4, 7, 8, 13], "should": [0, 3, 7, 8, 9, 10, 12, 13], "result": [0, 3, 7, 8, 10, 12, 13], "need": [0, 7, 8, 9, 10, 13], "account": [0, 7], "multi_object": [0, 12, 13], "multiobjectiveanalyticacquisitionfunct": 0, "analyticmultioutputobject": 0, "an": [0, 4, 7, 8, 9, 10, 12, 13], "1": [0, 1, 4, 7, 8, 9, 10, 12, 13], "multiobjectivemcacquisitionfunct": 0, "constraint": [0, 4, 7, 12], "eta": [0, 4, 7, 8, 13], "0": [0, 1, 4, 7, 8, 9, 10, 12, 13], "001": [0, 7, 12, 13], "thi": [0, 1, 3, 4, 7, 8, 9, 10, 11, 12, 13], "doe": [0, 2, 7, 8, 9, 10, 13], "inherit": [0, 7], "from": [0, 3, 4, 7, 8, 9, 10, 12], "avoid": [0, 7, 8, 13], "circular": 0, "import": [0, 7], "_default_sample_shap": 0, "sample_shap": [0, 9, 10, 13], "mcmultioutputobject": 0, "list": [0, 4, 8, 12], "callabl": [0, 3, 4, 7, 8, 9, 10, 13], "union": [0, 3, 4, 7, 8, 9, 10, 13], "float": [0, 2, 4, 7, 8, 9, 12, 13], "identitymultioutputobject": 0, "map": [0, 7, 8, 13], "dimens": [0, 4, 7, 8, 9, 10, 12, 13], "neg": [0, 7, 8, 12, 13], "impli": [0, 13], "feasibl": [0, 8, 12], "temperatur": [0, 4, 7, 8, 12, 13], "sigmoid": [0, 7, 13], "differenti": [0, 7], "approxim": [0, 7, 8, 9, 10, 12, 13], "In": [0, 4, 7, 8, 9, 12, 13], "same": [0, 7, 8, 9, 12, 13], "everi": [0, 3, 7, 10, 13], "length": [0, 7, 8, 12, 13], "match": [0, 7, 8, 9, 13], "number": [0, 1, 3, 4, 7, 8, 9, 10, 12, 13], "th": [0, 4, 7, 8, 13], "estim": [0, 3, 4, 7, 12, 13], "without": [0, 7, 8, 9], "perform": [0, 1, 4, 7, 8, 10, 11, 12, 13], "logprobabilityofimprov": 0, "best_f": [0, 4, 8], "maxim": [0, 4, 7, 8, 12, 13], "true": [0, 4, 7, 8, 10, 11, 12, 13], "log": [0, 5, 7, 11, 13], "probabl": [0, 7, 8, 9, 10], "improv": [0, 7, 12, 13], "logarithm": [0, 13], "current": [0, 1, 2, 4, 7, 8, 13], "best": [0, 4, 7, 8, 10, 13], "observ": [0, 1, 4, 7, 8, 9, 11, 12, 13], "comput": [0, 4, 7, 8, 9, 10, 12, 13], "formula": 0, "normal": [0, 7, 8, 9, 10, 11], "distribut": [0, 4, 7, 9, 10, 12], "onli": [0, 1, 7, 8, 9, 10, 11, 13], "gaussian": [0, 7, 8, 9, 12], "numer": [0, 7, 8, 10, 13], "better": [0, 4, 7, 13], "behav": 0, "than": [0, 4, 7, 8, 9, 11, 12, 13], "origin": [0, 7, 9, 13], "can": [0, 4, 7, 8, 9, 10, 12, 13], "lead": [0, 7, 13], "significantli": 0, "optim": [0, 2, 3, 4, 5, 9, 10, 12, 13], "analog": 0, "common": [0, 7, 8, 12, 13], "practic": [0, 7, 10, 13], "likelihood": [0, 1, 8, 10, 13], "probabilist": [0, 13], "rather": [0, 4, 7, 8, 9, 13], "sake": 0, "maximium": 0, "logpi": 0, "p": [0, 7, 8, 10, 12, 13], "y": [0, 4, 7, 8, 10, 12, 13], "singletaskgp": [0, 1, 7, 8], "train_x": [0, 1, 3, 7, 8, 11], "train_i": [0, 1, 3, 7, 8, 11], "2": [0, 1, 4, 7, 8, 9, 10, 12, 13], "log_pi": 0, "test_x": [0, 1, 7, 9, 10], "either": [0, 4, 7, 8, 9, 13], "scalar": [0, 7, 8, 9], "b": [0, 4, 7, 8, 9, 10, 12, 13], "mode": [0, 1, 3, 4, 7, 8, 11, 13], "repres": [0, 2, 4, 7, 8, 9, 10, 13], "so": [0, 4, 7, 8, 9, 12, 13], "far": [0, 4, 7, 8, 13], "assum": [0, 4, 7, 8, 9, 10, 12, 13], "noiseless": 0, "consid": [0, 4, 7, 8, 12, 13], "problem": [0, 1, 4, 8, 12, 13], "candid": [0, 2, 7, 8, 9, 10, 13], "set": [0, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13], "b1": [0, 7, 9], "bk": [0, 7, 9], "probabilityofimprov": 0, "pi": [0, 12], "qanalyticprobabilityofimprov": 0, "mvnxpb": [0, 13], "implement": [0, 7, 9, 10, 12, 13], "bivari": 0, "condit": [0, 7, 8, 10], "algorithm": [0, 3, 7, 12, 13], "multivari": [0, 7, 9, 10], "trinh2015bivari": [0, 13], "approx": 0, "qpi": 0, "x_1": [0, 7, 12], "x_q": 0, "expectedimprov": 0, "expect": [0, 4, 7, 8, 10, 12, 13], "classic": 0, "unlik": [0, 7, 13], "mc": [0, 10, 13], "reli": [0, 13], "test": [0, 1, 7, 8, 9], "being": [0, 7, 12, 13], "mean": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13], "varianc": [0, 4, 7, 9, 11, 13], "properti": [0, 7, 8, 9, 10, 12, 13], "ei": 0, "e": [0, 3, 4, 7, 8, 9, 10, 12, 13], "taken": [0, 7, 13], "stochast": [0, 7, 8], "It": [0, 7, 9, 10, 12, 13], "strongli": 0, "recommend": [0, 7, 8, 13], "logexpectedimprov": 0, "instead": [0, 7, 8, 9, 10, 13], "regular": [0, 7, 8, 13], "becaus": [0, 7, 9, 12, 13], "solv": [0, 7, 8, 12, 13], "vanish": [0, 7], "special": [0, 7, 13], "care": [0, 7, 10, 13], "substanti": 0, "bo": [0, 7], "individu": [0, 4, 7, 8, 9, 13], "what": [0, 7, 8], "margin": [0, 7, 9], "robust": [0, 12, 13], "manner": [0, 13], "particular": [0, 7, 8, 11], "issu": [0, 2, 3, 7, 8, 13], "its": [0, 4, 7, 8, 9, 10, 12, 13], "region": [0, 7, 12], "virtual": 0, "imposs": 0, "logei": 0, "logconstrainedexpectedimprov": 0, "objective_index": 0, "constrain": [0, 4, 7, 8, 12, 13], "weight": [0, 4, 7, 8, 9, 10, 13], "independ": [0, 7, 8, 9, 13], "non": [0, 4, 7, 8], "index": [0, 5, 7, 8, 13], "pass": [0, 1, 3, 4, 7, 8, 9, 10, 13], "logconstrainedei": 0, "sum_i": [0, 4, 8, 12, 13], "y_i": [0, 13], "lower_i": 0, "upper_i": 0, "constraint_i": 0, "lower": [0, 7, 8, 9, 12, 13], "upper": [0, 7, 8, 9, 12, 13], "bound": [0, 4, 7, 8, 9, 12, 13], "respect": [0, 4, 7, 8, 9, 12, 13], "0th": [0, 13], "ha": [0, 1, 4, 7, 8, 9, 12, 13], "1st": 0, "logcei": 0, "cei": 0, "int": [0, 3, 4, 7, 8, 9, 10, 11, 12, 13], "dict": [0, 1, 3, 4, 7, 8, 10, 13], "tupl": [0, 1, 3, 4, 7, 8, 9, 10, 12, 13], "dictionari": [0, 3, 4, 7, 8, 10, 13], "form": [0, 4, 7, 8, 10, 12, 13], "resp": 0, "interpret": 0, "inf": [0, 7, 8, 13], "constrainedexpectedimprov": 0, "constrained_ei": 0, "product_i": 0, "lognoisyexpectedimprov": 0, "x_observ": 0, "num_fantasi": [0, 8], "20": [0, 7, 8, 10, 12, 13], "noisi": [0, 7, 12], "via": [0, 4, 7, 8, 9, 10], "fantasi": [0, 7, 8, 11], "averag": [0, 8, 9, 10, 12, 13], "lognei": 0, "y_base": 0, "x_base": 0, "previous": [0, 7, 13], "fixednoisegp": [0, 7], "train_yvar": [0, 1, 7], "nei": 0, "gpytorchmodel": [0, 1, 7, 8, 10], "like": [0, 4, 7, 13], "higher": [0, 4], "more": [0, 3, 7, 8, 10, 12, 13], "accur": [0, 7, 13], "expens": [0, 7, 8, 13], "complex": [0, 13], "noisyexpectedimprov": 0, "y_baselin": 0, "upperconfidencebound": [0, 4], "beta": [0, 4, 7, 8, 12], "confid": 0, "ucb": [0, 4], "compris": 0, "plu": [0, 8], "addit": [0, 7, 8, 10, 12, 13], "term": [0, 7, 13], "standard": [0, 2, 4, 7, 8, 9, 10, 11, 12, 13], "deviat": [0, 7, 8, 12], "trade": 0, "off": [0, 8, 13], "greedi": [0, 7, 8], "select": [0, 4, 7, 8], "mu": [0, 7, 9, 10], "sqrt": [0, 7, 12], "sigma": [0, 7, 8, 9, 10], "gp": [0, 1, 3, 4, 8, 10], "one": [0, 3, 4, 7, 8, 9, 10, 12, 13], "element": [0, 4, 7, 8, 9, 13], "between": [0, 7, 8, 9, 12, 13], "covari": [0, 7, 9, 10, 13], "posteriormean": [0, 8], "": [0, 4, 7, 8, 9, 10, 12, 13], "pm": 0, "fals": [0, 1, 3, 4, 7, 8, 10, 12, 13], "negat": [0, 8, 12], "As": [0, 4, 7, 8, 9, 10, 13], "consequ": 0, "optimize_acqf": [0, 8, 10], "actual": 0, "minimum": [0, 4, 7, 12], "scalarizedposteriormean": 0, "across": [0, 4, 7, 8, 9, 10], "vector": [0, 7, 8, 9, 10, 12, 13], "order": [0, 8, 12, 13], "minim": [0, 4, 7, 8, 12, 13], "reparameter": [0, 13], "trick": [0, 13], "combin": [0, 7, 8, 10, 12, 13], "quasi": [0, 10, 13], "rezende2014reparam": 0, "wilson2017reparam": 0, "balandat2020botorch": 0, "j": [0, 7, 8, 10, 12, 13], "rezend": 0, "moham": 0, "wierstra": 0, "backpropag": 0, "infer": [0, 7], "deep": [0, 9], "icml": 0, "2014": [0, 12, 13], "wilson": [0, 7, 10], "r": [0, 1, 7, 8, 10, 12, 13], "moriconi": 0, "hutter": 0, "deisenroth": [0, 10], "arxiv": [0, 4, 7, 10, 12], "2017": [0, 13], "qexpectedimprov": [0, 4, 8, 13], "qei": [0, 4, 8], "3": [0, 1, 4, 7, 8, 10, 12, 13], "4": [0, 1, 7, 8, 12, 13], "sobolqmcnormalsampl": [0, 8, 10], "1024": [0, 8, 10], "specifi": [0, 3, 7, 8, 9, 12, 13], "potenti": [0, 7, 12], "differ": [0, 4, 7, 8, 9, 10, 13], "detail": [0, 3, 7, 8, 10, 12, 13], "concaten": [0, 10, 13], "upon": [0, 8], "call": [0, 3, 4, 7, 8, 9, 10, 11, 12, 13], "copi": [0, 7, 13], "ani": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 13], "qnoisyexpectedimprov": [0, 7], "prune_baselin": 0, "cachedcholeskymcacquisitionfunct": 0, "known": [0, 7, 8], "would": [0, 7, 13], "qnei": 0, "alreadi": [0, 7, 8, 12], "These": [0, 7, 8, 12, 13], "remov": [0, 7, 13], "highli": [0, 7, 9, 13], "custom": [0, 7, 8, 12, 13], "prune": 0, "manual": [0, 7, 9, 13], "prune_inferior_point": 0, "befor": [0, 4, 7, 8, 13], "instanti": [0, 7], "boolean": [0, 3, 7, 8, 12, 13], "indic": [0, 3, 4, 7, 8, 9, 10, 12, 13], "whether": [0, 3, 7, 8, 12, 13], "root": [0, 10, 13], "low": [0, 7], "rank": [0, 7], "updat": [0, 7, 8], "todo": [0, 7, 8, 12, 13], "similar": [0, 4, 7, 8, 12, 13], "qnehvi": 0, "when": [0, 2, 3, 4, 7, 8, 9, 10, 11, 13], "we": [0, 4, 7, 8, 9, 13], "sequenti": [0, 7, 8], "could": [0, 7], "incorpor": [0, 7], "increment": [0, 13], "new": [0, 1, 7, 8, 12, 13], "greatli": 0, "increas": [0, 3, 13], "effici": [0, 7, 10, 12, 13], "larg": [0, 7, 8, 9, 10, 12, 13], "qprobabilityofimprov": 0, "tau": [0, 7, 13], "involv": [0, 13], "auto": 0, "differnti": 0, "replac": [0, 4, 8, 10, 13], "smaller": [0, 13], "yield": [0, 12, 13], "qsimpleregret": 0, "simpl": [0, 7, 12, 13], "regret": 0, "qsr": 0, "qupperconfidencebound": [0, 8], "extend": [0, 9, 13], "qucb": [0, 8], "appendix": 0, "y_tild": 0, "control": [0, 4], "tradeoff": 0, "batch_sahp": 0, "bayesian": [0, 3, 10, 12, 13], "refer": [0, 7, 8, 10, 12, 13], "yang2019": [0, 12, 13], "yang": [0, 12], "k": [0, 7, 10, 12, 13], "emmerich": [0, 12], "deutz": [0, 12], "et": 0, "al": 0, "hypervolum": [0, 12], "box": [0, 4, 8, 10, 12], "glob": 0, "75": [0, 13], "34": 0, "2019": [0, 7, 12], "expectedhypervolumeimprov": 0, "ref_point": [0, 13], "partit": [0, 7], "ehvi": 0, "addition": [0, 8, 13], "propos": [0, 7, 12, 13], "daulton2020qehvi": [0, 13], "ineffici": [0, 1], "wai": [0, 7, 13], "due": [0, 7, 13], "binari": [0, 8, 13], "our": [0, 7], "last": [0, 7, 8, 12, 13], "hypercel": [0, 13], "reduc": [0, 8], "dklv17": 0, "lkf17": 0, "greater": [0, 7], "add": [0, 7, 8, 12, 13], "space": [0, 4, 8, 9, 12, 13], "w": [0, 1, 4, 7, 8, 9, 12, 13], "after": [0, 2, 4, 7, 8, 13], "appli": [0, 7, 8, 9, 10, 11, 12, 13], "nondominatedpartit": [0, 13], "domin": 0, "front": [0, 12, 13], "hyper": [0, 7, 13], "rectangl": [0, 13], "psi": 0, "cell": [0, 13], "lower_": 0, "upper_": 0, "mu_k": 0, "sigma_k": 0, "pdf": [0, 7, 13], "cdf": [0, 7, 13], "equat": [0, 7, 12, 13], "19": [0, 7, 12], "num_cel": [0, 13], "clamp": [0, 4, 7, 8], "nu": [0, 7], "25": [0, 4, 8, 9, 10, 12, 13], "je": 0, "tu2022": 0, "tu": 0, "gandi": 0, "kanta": 0, "shafei": 0, "advanc": [0, 7, 10, 13], "neural": [0, 7, 10, 13], "process": [0, 7, 8, 9, 10, 12, 13], "system": [0, 7, 10, 13], "35": [0, 12, 13], "2022": [0, 12, 13], "joint_entropy_search": 0, "lowerboundmultiobjectiveentropysearch": 0, "pareto_set": 0, "pareto_front": 0, "hypercell_bound": 0, "estimation_typ": 0, "lb": 0, "num_sampl": [0, 3, 4, 13], "64": [0, 8], "num_pareto_sampl": 0, "num_pareto_point": 0, "contain": [0, 4, 7, 8, 9, 11], "pareto": [0, 12], "integr": [0, 12, 13], "unconstrain": 0, "give": 0, "infeas": [0, 13], "str": [0, 1, 3, 4, 7, 8, 10, 13], "string": [0, 8, 10, 13], "determin": [0, 13], "lb2": 0, "qlowerboundmultiobjectivejointentropysearch": 0, "through": [0, 3, 7, 11, 13], "formul": [0, 7], "mutual": 0, "pair": [0, 7, 12, 13], "discuss": [0, 7], "procedur": 0, "ii": [0, 7, 11, 13], "might": 0, "monoton": 0, "sens": 0, "ad": [0, 7, 8, 10, 12, 13], "necessarili": 0, "specif": [0, 7, 8, 12], "becom": [0, 13], "mesmo": 0, "belakaria2019": 0, "belakaria": 0, "deshwal": 0, "doppa": 0, "32": [0, 9, 12, 13], "max_value_entropy_search": 0, "qmultiobjectivemaxvalueentropi": 0, "sample_pareto_fronti": 0, "16": [0, 3, 7, 8, 10, 12, 13], "qmaxvalueentropi": 0, "frontier": [0, 12, 13], "cyclic": [0, 8], "gain": 0, "nois": [0, 1, 4, 7, 8, 9, 12, 13], "c": [0, 4, 7, 8, 12, 13], "takeno2020mfmv": 0, "sample_pf": 0, "construct": [0, 7, 8, 9, 10, 12, 13], "wall": [0, 8], "time": [0, 2, 7, 8, 9, 12, 13], "memori": [0, 1, 3, 8, 13], "ignor": [0, 3, 7, 8, 10], "fantas": [0, 7, 8], "mve": 0, "qlowerboundmultiobjectivemaxvalueentropysearch": 0, "daulton": [0, 12, 13], "balandat": [0, 7, 12, 13], "bakshi": [0, 7, 12, 13], "parallel": [0, 12, 13], "33": [0, 12], "2020": [0, 7, 10, 12, 13], "daulton2021nehvi": 0, "multipl": [0, 7, 13], "2021": [0, 7, 10, 12], "qexpectedhypervolumeimprov": 0, "qehvi": 0, "present": [0, 4, 7, 13], "includ": [0, 4, 7, 8, 12, 13], "acqusit": [0, 7], "qnoisyexpectedhypervolumeimprov": 0, "alpha": [0, 7, 8, 12, 13], "cache_pend": 0, "max_iep": 0, "incremental_nehvi": 0, "creat": [0, 1, 7, 8, 13], "computation": [0, 7], "intens": [0, 7, 13], "prune_inferior_points_multi_object": 0, "hyperparamet": [0, 7, 8, 13], "exact": [0, 7, 10, 12, 13], "limit": [0, 8, 13], "cbd": 0, "handl": [0, 7, 8, 9, 13], "maximum": [0, 3, 4, 8, 9, 12, 13], "recomput": 0, "nehvi": 0, "full": [0, 7, 10], "augment": [0, 12, 13], "irshad2021momf": 0, "irshad": [0, 12], "karsch": [0, 12], "d\u00f6pp": [0, 12], "simultan": [0, 12], "preprint": [0, 7, 10, 12], "2112": [0, 12], "13901": [0, 12], "multi_fidel": [0, 12], "momf": 0, "cost_cal": 0, "train_obj": 0, "append": [0, 7, 13], "end": [0, 7, 9, 13], "follow": [0, 1, 7, 8, 10, 13], "3d": 0, "cost_func": 0, "lambda": [0, 7], "5": [0, 1, 4, 7, 8, 9, 12, 13], "momf_val": 0, "There": [0, 7, 12], "assumpt": [0, 13], "data": [0, 2, 7, 8, 9, 10, 11, 13], "trust": 0, "affinecostmodel": 0, "pe": 0, "code": [0, 7], "finit": [0, 4, 8, 9, 10, 13], "garrido": [0, 12], "merchan2019": 0, "merchan": 0, "hernandez": 0, "lobato": [0, 12], "neurocomput": 0, "describ": [0, 4, 7, 9, 13], "supplementari": 0, "materi": 0, "http": [0, 3, 4, 7, 12, 13], "www": [0, 7, 12], "sciencedirect": 0, "com": [0, 3, 7, 12, 13], "scienc": [0, 12], "articl": 0, "ab": [0, 7, 8], "pii": 0, "s0925231219308525": 0, "predictive_entropy_search": 0, "qmultiobjectivepredictiveentropysearch": 0, "max_ep_iter": 0, "250": [0, 12], "ep_jitt": 0, "0001": [0, 8, 12, 13], "test_jitt": 0, "threshold": [0, 8, 13], "01": [0, 7, 12], "both": [0, 7, 8, 9, 10, 12, 13], "well": [0, 7, 8, 9, 13], "moment": [0, 13], "propag": [0, 11], "ep": [0, 7, 13], "descript": [0, 7], "sometim": [0, 3], "therefor": 0, "advis": 0, "oppos": 0, "identifi": [0, 7, 9, 13], "automat": [0, 4, 7, 8, 9, 13], "occasion": 0, "nan": [0, 7, 8, 11, 13], "_update_damp": 0, "find": [0, 8, 13], "damp": 0, "factor": [0, 8, 13], "param_new": 0, "param_old": 0, "ensur": [0, 7, 9, 13], "matric": [0, 7, 13], "cov_f_new": 0, "cov_f_old": 0, "posit": [0, 7, 8, 9, 12, 13], "semi": 0, "definit": [0, 10], "paper": [0, 7, 12], "success": [0, 8], "halv": 0, "scheme": [0, 13], "etc": 0, "fail": [0, 7, 8], "reason": [0, 7, 11], "x_p": 0, "poor": 0, "compar": [0, 13], "x_n": 0, "close": [0, 8, 12, 13], "converg": [0, 7, 8], "too": [0, 7], "small": [0, 1, 7, 8, 13], "occur": [0, 13], "variabl": [0, 7, 8, 9, 13], "std": [0, 7, 8], "veri": [0, 1, 7, 13], "high": [0, 7, 8, 13], "error": [0, 3, 7, 8, 10, 13], "pre": [0, 7, 13], "emptiv": 0, "some": [0, 7, 11, 13], "depend": [0, 7, 12], "mitig": 0, "matrix": [0, 7, 9, 10, 13], "invers": [0, 7, 10, 13], "dimension": [0, 7, 8, 10, 12, 13], "To": [0, 7, 8, 9, 10, 11, 13], "address": 0, "jitter": [0, 7, 13], "diagon": [0, 7, 13], "choic": [0, 7, 8, 13], "alwai": [0, 7, 8, 13], "appropri": [0, 7, 8, 9, 13], "precis": [0, 13], "scale": [0, 7, 10, 13], "come": [0, 7, 12, 13], "up": [0, 7, 8, 11, 12, 13], "strategi": [0, 2, 7, 8, 13], "adapt": [0, 12, 13], "usual": [0, 7, 12], "iter": [0, 2, 3, 4, 7, 8, 10, 13], "run": [0, 7, 8, 10, 13], "mani": [0, 4, 7, 12, 13], "invert": 0, "larger": [0, 7, 12, 13], "allevi": 0, "discret": [0, 7, 8, 9, 12, 13], "otherwis": [0, 3, 7, 8, 10, 13], "amount": [0, 3, 7, 8, 13], "dure": [0, 2, 3, 7, 8, 9, 10, 13], "phase": 0, "assess": [0, 13], "rel": [0, 7, 8, 13], "chang": [0, 7, 13], "percent": 0, "1e": [0, 7, 8, 9, 12, 13], "log_cdf_robust": 0, "cumul": 0, "densiti": [0, 9, 13], "robustli": 0, "z": [0, 7, 8, 10, 12, 13], "els": [0, 7, 10, 13], "x_shape": 0, "kg": [0, 8], "introduc": [0, 7, 12], "broader": 0, "also": [0, 3, 4, 7, 8, 9, 13], "frazier2008knowledg": 0, "wu2016parallelkg": 0, "karrer": 0, "jiang": 0, "letham": 0, "g": [0, 3, 7, 8, 10, 12, 13], "framework": 0, "frazier": [0, 7], "powel": [0, 12], "dayanik": 0, "polici": 0, "collect": [0, 7, 8], "siam": 0, "journal": [0, 7, 10, 13], "2008": 0, "wu": [0, 7], "method": [0, 3, 4, 8, 9, 10, 12, 13], "nip": 0, "2016": [0, 13], "knowledge_gradi": 0, "qknowledgegradi": [0, 8, 10], "inner_sampl": 0, "current_valu": 0, "oneshotacquisitionfunct": 0, "outer": [0, 8], "inner": [0, 8], "part": [0, 7, 12], "fashion": [0, 7, 8, 13], "unus": [0, 7], "omit": [0, 3, 7, 8, 10, 13], "u": [0, 3, 7, 13], "split": 0, "first": [0, 7, 8, 12, 13], "solut": [0, 4, 8, 12], "x_fantasi": 0, "x_actual": 0, "chosen": [0, 8, 13], "final": [0, 8, 10], "column": [0, 4, 7, 8, 13], "keyword": [0, 3, 7, 8, 13], "num_restart": [0, 4, 8], "raw_sampl": [0, 4, 8], "helper": [0, 7, 9], "scipy_opt": 0, "scipi": [0, 4, 8], "get_augmented_q_batch_s": 0, "get": [0, 7, 8, 13], "size": [0, 1, 4, 7, 8, 9, 10, 13], "jointli": [0, 4, 7, 8, 13], "parameter": 0, "extract_candid": 0, "x_full": 0, "post": [0, 7, 8], "qmultifidelityknowledgegradi": 0, "cost_aware_util": [0, 7], "project": [0, 8], "expand": [0, 7, 9, 13], "valfunc_cl": 0, "valfunc_argfac": 0, "version": [0, 7, 10, 12, 13], "costawareutil": 0, "oper": [0, 7, 13], "termin": [0, 2, 8], "q_term": 0, "desir": [0, 7, 10, 13], "target": [0, 7, 8, 9, 11], "basic": [0, 13], "q_e": 0, "correspond": [0, 7, 8, 9, 12, 13], "trace": 0, "factori": [0, 8, 13], "cost_sampl": 0, "mai": [0, 3, 7, 8, 9, 10, 12, 13], "thee": 0, "projectedacquisitionfunct": 0, "base_value_funct": 0, "defin": [0, 7, 8, 9, 10, 12, 13], "around": [0, 8, 13], "typic": [0, 7, 8, 9, 12, 13], "look": 0, "ahead": 0, "wrap": [0, 7, 8, 10, 13], "acquist": 0, "configur": [0, 7], "jiang2020multistep": 0, "gardner": 0, "garnett": 0, "nonmyop": 0, "tree": [0, 3], "multi_step_lookahead": 0, "qmultisteplookahead": 0, "batch_siz": [0, 7, 8, 13], "inner_mc_sampl": 0, "collapse_fantasy_base_sampl": 0, "repeat": [0, 8, 10, 13], "allow": [0, 7, 8, 9, 13], "stage": [0, 8, 13], "By": [0, 4, 7, 8, 10], "knowledgegradi": 0, "q_1": 0, "warn": [0, 1, 7, 11, 13], "exponenti": [0, 7, 8], "q_k": 0, "f_1": [0, 7, 12], "f_k": 0, "except": [0, 5, 7, 8, 12, 13], "zero": [0, 4, 7, 8, 9, 11, 12, 13], "tacqfargconstructor": 0, "n_0": 0, "n_k": 0, "collapse_batch_dim": 0, "subtre": 0, "start": [0, 4, 7, 8, 13], "level": [0, 7, 8, 9, 11], "q_0": 0, "f_2": [0, 7, 12], "q_2": 0, "here": [0, 7, 8, 12, 13], "q_i": 0, "f_i": [0, 7, 12], "optimz": 0, "get_split_shap": 0, "q_aug": 0, "get_multi_step_tree_input_represent": 0, "represent": [0, 7, 8, 10, 13], "x_j": [0, 12], "x_k": 0, "x_i": [0, 12], "get_induced_fantasy_model": 0, "induc": 0, "warmstart_multistep": 0, "acq_funct": [0, 8], "full_optim": 0, "warm": 0, "initi": [0, 1, 2, 4, 7, 10, 13], "now": [0, 7], "multistart": [0, 8], "raw": [0, 7, 8, 13], "heurist": [0, 8, 12], "previou": [0, 7, 8, 13], "obtain": [0, 3, 7, 8, 9, 13], "return_best_onli": [0, 8], "return_full_tre": [0, 8], "sub": [0, 7, 13], "closest": [0, 12], "make_best_f": 0, "extract": [0, 4, 7, 8, 13], "me": 0, "gibbon": 0, "moss2021gibbon": 0, "moss": [0, 7], "h": [0, 12, 13], "purpos": [0, 8], "optimis": 0, "machin": [0, 7, 10, 12], "research": [0, 7, 10, 13], "takeno": 0, "fukuoka": 0, "tsukada": 0, "koyama": 0, "shiga": 0, "takeuchi": 0, "karasuyama": 0, "proceed": [0, 7, 12], "37th": 0, "intern": [0, 1, 3, 7, 8, 9, 10, 12, 13], "confer": [0, 7, 10, 12], "wang2017mv": 0, "wang": [0, 12], "jegelka": 0, "discretemaxvaluebas": 0, "candidate_set": 0, "num_mv_sampl": 0, "10": [0, 1, 4, 7, 8, 12, 13], "use_gumbel": 0, "train_input": [0, 7, 8], "maxvaluebas": 0, "surrog": [0, 4, 8], "gumbel": 0, "mv": 0, "n_train": [0, 9], "Not": [0, 7, 8], "instanc": [0, 1, 3, 7, 8, 10, 11, 13], "gpytorch": [0, 1, 3, 8], "exactgp": [0, 7], "num_y_sampl": 0, "128": 0, "torch": [0, 1, 4, 7, 10], "rand": [0, 1, 4, 7, 8, 9, 13], "1000": [0, 10, 12, 13], "qlowerboundmaxvalueentropi": 0, "cheap": 0, "unless": [0, 7, 9, 12, 13], "fill": [0, 8], "qgibbon": 0, "_": [0, 7, 13], "qmultifidelitymaxvalueentropi": 0, "idea": 0, "somewhat": 0, "mf_me": 0, "mf": 0, "qmultifidelitylowerboundmaxvalueentropi": 0, "mf_qgibbon": 0, "mf_gibbon": 0, "qlowerboundjointentropysearch": 0, "optimal_input": 0, "optimal_output": 0, "simplic": 0, "infti": [0, 4, 13], "equival": [0, 7, 13], "qpredictiveentropysearch": 0, "unstabl": 0, "howev": [0, 7, 13], "happen": [0, 7, 13], "much": [0, 13], "fewer": [0, 7], "prevent": [0, 13], "failur": [0, 8], "seo2014activedata": 0, "seo": 0, "wallat": 0, "graepel": 0, "obermay": 0, "regress": [0, 13], "reject": 0, "ijcnn": 0, "2000": [0, 8, 12], "chen2014seqexpdesign": 0, "chen": [0, 7], "zhou": [0, 7, 12], "experiment": [0, 7], "krige": 0, "winter": 0, "simul": [0, 7, 12], "binois2017repexp": 0, "binoi": 0, "huang": 0, "gramaci": 0, "ludkovski": 0, "replic": [0, 10], "explor": 0, "experi": 0, "active_learn": 0, "qnegintegratedposteriorvari": 0, "mc_point": 0, "quantifi": 0, "exclud": [0, 3, 8], "proxi": 0, "global": [0, 7, 12], "uncertainti": [0, 7, 12], "thu": [0, 8], "pure": 0, "focus": 0, "exploit": [0, 7, 9], "qmc": [0, 8, 13], "whole": [0, 7, 13], "bias": [0, 7, 10], "directli": [0, 7], "dummi": [0, 7, 10, 13], "sinc": [0, 7, 8, 10, 13], "pairwisemcposteriorvari": 0, "calcul": [0, 7, 8, 13], "pairwis": 0, "pairwisegp": [0, 7, 10], "link": [0, 13], "logist": [0, 7], "probit": [0, 7], "genericmcobject": 0, "hope": 0, "eubo": 0, "lin2022prefer": 0, "lin": 0, "astudillo": 0, "artifici": [0, 7, 12], "intellig": [0, 7, 12], "statist": [0, 7, 12], "aistat": [0, 13], "analyticexpectedutilityofbestopt": 0, "pref_model": 0, "outcome_model": 0, "previous_winn": 0, "prefenti": 0, "laplac": [0, 7], "determinist": [0, 9, 13], "onesampleposteriordrawmodel": 0, "zeta": 0, "winner": 0, "deterministicmodel": [0, 7, 10], "scalarizedposteriortransform": 0, "offset": [0, 7, 9, 10], "affin": [0, 7, 9], "linear": [0, 4, 7, 8, 10, 12], "posteriorlist": [0, 7, 9, 10], "self": [0, 7, 9, 13], "scalarizedobject": 0, "acquisitionobject": 0, "deprec": [0, 4, 9, 10, 13], "expectationposteriortransform": 0, "n_w": [0, 7], "consecut": 0, "block": [0, 7, 13], "inputperturb": [0, 7], "appendfeatur": [0, 7], "feature_set": [0, 7], "perturbation_set": [0, 7], "arg": [0, 2, 4, 7, 8, 10, 13], "trivial": 0, "identity_object": 0, "state": [0, 7, 8, 10, 11, 13], "share": [0, 7, 8, 10, 13], "nn": [0, 7, 8, 10, 13], "scriptmodul": [0, 7, 10, 13], "relev": [0, 8, 13], "explicitli": [0, 9], "__call__": [0, 10, 13], "mc_obj": 0, "linearmcobject": 0, "sum_": [0, 7, 12], "linear_object": 0, "arbitrari": [0, 7, 8, 12, 13], "abl": [0, 7], "possibl": [0, 7, 8, 10, 13], "generic_object": 0, "sum": [0, 4, 7, 8, 12, 13], "weigth": 0, "constrainedmcobject": 0, "infeasible_cost": [0, 13], "scalabl": [0, 7, 12], "subject": [0, 13], "feasibilti": 0, "mc_acq": 0, "prod_i": 0, "apply_constraint": [0, 13], "constrained_object": 0, "associ": [0, 4, 7, 8, 12, 13], "learnedobject": 0, "again": [0, 13], "latent": [0, 7], "train_comp": 0, "longtensor": [0, 10, 13], "learned_pref_obj": 0, "sample_s": 0, "preferec": 0, "iidnormalsampl": [0, 10], "_is_mo": 0, "denot": [0, 7, 10, 13], "multi_obj": 0, "genericmcmultioutputobject": 0, "identitymcmultioutputobject": 0, "num_outcom": [0, 13], "unalt": 0, "total": [0, 2, 7, 8, 13], "weightedmcmultioutputobject": 0, "reweight": 0, "weighted_object": 0, "feasibilityweightedmcmultioutputobject": 0, "constraint_idc": 0, "ident": [0, 7, 9, 12, 13], "accord": [0, 4, 7, 8, 13], "unstandardizemcmultioutputobject": 0, "y_mean": 0, "y_std": 0, "unstandard": 0, "multitask": 0, "unstd_object": 0, "moo": 0, "analy": 0, "identityanalyticmultioutputobject": 0, "unstandardizeanalyticmultioutputobject": 0, "unstd_posterior": 0, "context": [0, 2, 10], "cost_awar": [0, 7], "genericcostawareutil": 0, "delta": [0, 7, 12], "inversecostweightedutil": [0, 7], "cost_model": [0, 7], "use_mean": 0, "cost_object": 0, "min_cost": 0, "u_1": 0, "u_n": 0, "mean_cost": 0, "c_1": [0, 7, 12], "c_n": 0, "utiltii": 0, "un": [0, 7, 13], "often": [0, 7, 8], "done": [0, 8], "thei": [0, 7, 8, 13], "caus": [0, 8], "cakmak2020risk": [0, 7], "var": [0, 7, 11, 13], "cvar": 0, "hong2014review": 0, "cakmak": [0, 12], "l": [0, 4, 8, 12, 13], "hong": 0, "hu": 0, "liu": 0, "review": 0, "acm": 0, "transact": [0, 12, 13], "risk_measur": [0, 7], "preprocessing_funct": 0, "riskmeasuremcobject": [0, 7], "worst": 0, "reward": 0, "loss": [0, 4, 8], "commonli": [0, 7, 12], "below": [0, 7, 13], "w_set": 0, "possibli": [0, 2, 7, 8, 10], "preprocess": [0, 7, 13], "smallest": 0, "largest": 0, "financi": 0, "manag": [0, 7], "quantil": [0, 9], "random": [0, 7, 8, 9, 10, 12, 13], "worstcas": 0, "extens": 0, "mvar": 0, "contrast": [0, 7, 13], "prekopa2012mvar": 0, "prekopa": 0, "relat": [0, 2, 7], "topic": 0, "annal": 0, "2012": [0, 13], "cousin2013mvar": 0, "cousin": 0, "di": 0, "bernardino": 0, "On": [0, 10], "analysi": 0, "2013": [0, 7, 8], "daulton2022mar": 0, "osborn": [0, 12, 13], "39th": [0, 12], "multi_output_risk_measur": 0, "multioutputexpect": 0, "multioutputriskmeasuremcobject": 0, "align": [0, 7, 13], "independentcvar": 0, "were": [0, 7, 12], "perturb": [0, 7, 8, 12], "optimist": 0, "suggest": [0, 7, 13], "independentvar": 0, "multioutputworstcas": 0, "pad_to_n_w": 0, "filter_domin": 0, "domain": [0, 8, 12, 13], "equal": [0, 4, 7, 8, 9, 10, 13], "realiz": 0, "altern": [0, 7, 13], "flag": [0, 7, 11], "fraction": [0, 8, 13], "pad": 0, "subset": [0, 7, 8, 10, 13], "disabl": [0, 7, 8], "make": [0, 7, 10, 11, 13], "faster": [0, 3, 13], "filter": [0, 7, 8, 13], "out": [0, 2, 7, 8, 10, 13], "later": [0, 4, 8], "while": [0, 4, 7, 8, 9, 10, 12], "get_mvar_set_cpu": 0, "cpu": [0, 13], "slower": 0, "gpu": 0, "empir": [0, 12], "evid": [0, 7], "grid": [0, 7], "round": [0, 7, 8], "necessari": [0, 7, 9], "restrict": 0, "get_mvar_set_gpu": 0, "poorli": 0, "avail": [0, 13], "v": [0, 7, 8, 10, 12], "get_mvar_set_": 0, "mar": 0, "chebyshev_weight": 0, "baseline_i": 0, "chebyshev": [0, 13], "within": [0, 7, 8, 9, 10, 13], "baselin": [0, 7, 8, 13], "set_baseline_i": 0, "y_sampl": 0, "attach": 0, "indetermin": 0, "chebyshev_object": 0, "aquisitionfunct": 0, "certain": 0, "contextu": 0, "fixed_featur": [0, 4, 8], "fixedfeatureacquisitionfunct": 0, "qei_ff": 0, "deriv": [0, 12, 13], "d_f": [0, 7], "sequenc": [0, 3, 7, 8, 10, 13], "arrai": [0, 2, 8, 13], "trail": [0, 7], "place": [0, 7, 8, 13], "_construct_x_ful": 0, "registri": 0, "programmat": 0, "consist": [0, 7, 9, 12, 13], "format": [0, 13], "input_constructor": 0, "get_acqf_input_constructor": 0, "acqf_cl": 0, "retriev": [0, 13], "acqf_input_constructor": 0, "decor": [0, 7, 13], "regist": [0, 7, 8, 10, 13], "construct_inputs_analytic_bas": 0, "training_data": [0, 7], "superviseddataset": [0, 7, 13], "hashabl": [0, 7, 13], "dataset": 0, "name": [0, 3, 7, 8, 13], "construct_inputs_best_f": 0, "abov": [0, 11, 13], "construct_inputs_ucb": 0, "construct_inputs_constrained_ei": 0, "construct_inputs_noisy_ei": 0, "construct_inputs_mc_bas": 0, "construct_inputs_qei": 0, "construct_inputs_qnei": 0, "construct_inputs_qpi": 0, "construct_inputs_qucb": 0, "construct_inputs_ehvi": 0, "objective_threshold": 0, "construct_inputs_qehvi": 0, "construct_inputs_qnehvi": 0, "construct_inputs_qm": 0, "candidate_s": 0, "construct_inputs_mf_bas": 0, "target_fidel": 0, "fidelity_weight": [0, 7], "cost_intercept": 0, "num_trace_observ": 0, "multifidel": 0, "construct_inputs_qkg": 0, "construct_inputs_qmfkg": 0, "construct_inputs_qmfm": 0, "construct_inputs_analytic_eubo": 0, "get_best_f_analyt": 0, "get_best_f_mc": 0, "optimize_object": 0, "linear_constraint": 0, "mc_sampl": [0, 13], "512": [0, 3, 8, 12, 13], "seed_inn": 0, "optimizer_opt": 0, "post_processing_func": [0, 8], "batch_initial_condit": [0, 8], "cardin": [0, 7], "assign": [0, 8, 13], "feature_index": [0, 8], "hold": [0, 13], "toggl": 0, "enabl": [0, 7, 8, 9, 10, 13], "integ": [0, 7, 8, 13], "seed": [0, 10, 13], "mcobject": 0, "tabl": [0, 12], "lookup": [0, 13], "trip": [0, 8], "locat": [0, 7, 9, 13], "l2penalti": 0, "init_point": 0, "l2": 0, "penalti": 0, "penalizedacquisitionfunct": 0, "against": [0, 7], "want": [0, 7, 8], "acqfn": 0, "l1penalti": 0, "l1": 0, "gaussianpenalti": 0, "grouplassopenalti": 0, "group": 0, "lasso": 0, "raw_acqf": 0, "penalty_func": 0, "regularization_paramet": 0, "usag": [0, 3, 7, 8], "acqf": [0, 13], "go": [0, 8], "group_lasso_regular": 0, "bxd": 0, "norm": [0, 7], "l1penaltyobject": 0, "penalizedmcobject": 0, "penalty_object": 0, "penalt": 0, "l1_penalty_object": 0, "l1_penalized_object": 0, "proximalacquisitionfunct": 0, "proximal_weight": 0, "transformed_weight": 0, "squar": [0, 10, 12, 13], "center": [0, 7, 10], "vari": [0, 12], "lengthscal": [0, 7, 10], "softplu": 0, "strong": [0, 7, 12], "toward": [0, 13], "recent": 0, "smooth": [0, 7], "decres": 0, "rate": [0, 7, 12], "ones": [0, 7, 13], "ei_proxim": 0, "eip": 0, "bia": [0, 7, 10, 13], "local": [0, 12, 13], "along": [0, 1, 7, 8, 10, 13], "axi": [0, 7, 13], "input_transform": [0, 7, 10], "real": [0, 12], "multipli": [0, 7, 10, 13], "get_acquisition_funct": 0, "acquisition_function_nam": 0, "conveni": [0, 3, 7, 13], "m1": [0, 7], "m2": [0, 7], "whose": [0, 8, 10, 13], "request": [0, 9], "obj": [0, 7, 13], "get_infeasible_cost": 0, "min_x": 0, "almost": 0, "cover": 0, "is_nonneg": 0, "behavior": [0, 8, 13], "unknown": [0, 12], "2048": [0, 8], "max_frac": 0, "marginalize_dim": 0, "retain": [0, 3, 8], "satisfi": [0, 8, 9, 10, 13], "exce": 0, "ceil": 0, "fulli": [0, 3, 8], "min": [0, 7, 8, 13], "n_nz": 0, "project_to_target_fidel": 0, "onto": 0, "just": [0, 4, 7, 8, 9], "x_proj": 0, "expand_trace_observ": 0, "fidelity_dim": [0, 7], "num_trace_ob": 0, "though": [0, 7], "let": [0, 8, 13], "Then": [0, 7, 13], "besid": 0, "additon": 0, "f_i1": 0, "f_ik": 0, "f_ij": 0, "That": [0, 8], "expans": [0, 13], "incl": 0, "x_expand": 0, "project_to_sample_point": 0, "sample_point": 0, "get_default_partitioning_alpha": 0, "num_object": [0, 12], "fastnondominatedpartit": [0, 13], "compute_sample_box_decomposit": 0, "box_decomposit": [0, 13], "dominatedpartit": [0, 13], "num_constraint": [0, 12], "advantag": 0, "boxdecomposit": [0, 13], "random_search_optim": 0, "num_point": 0, "pop_siz": 0, "max_tri": [0, 13], "genericdeterministicmodel": [0, 7, 13], "per": [0, 7, 9], "try": 0, "tri": [0, 8, 13], "sample_optimal_point": 0, "num_rff_featur": [0, 13], "optimizer_kwarg": [0, 3], "fourier": [0, 7, 10, 13], "rff": [0, 13], "accommod": 0, "other": [0, 8, 9, 11, 13], "decoupl": 0, "cross": [1, 7, 13], "valid": [1, 7, 8, 11], "util": [1, 5, 12], "cvfold": 1, "test_i": 1, "test_yvar": 1, "namedtupl": [1, 8, 13], "alia": [1, 8, 13], "field": [1, 8, 13], "cvresult": 1, "observed_i": 1, "observed_yvar": 1, "gen_loo_cv_fold": 1, "gener": [1, 2, 5, 7, 9, 12, 13], "loo": 1, "cv": 1, "fold": 1, "featur": [1, 2, 4, 7, 8, 13], "measur": [1, 7, 12, 13], "sin": [1, 7, 12], "6": [1, 3, 7, 8, 12, 13], "rand_lik": [1, 7], "cv_fold": 1, "batch_cross_valid": 1, "model_cl": 1, "mll_cl": 1, "fit_arg": 1, "observation_nois": [1, 4, 7, 13], "multi": [1, 8, 9], "marginalloglikelihood": [1, 3, 7, 8], "argument": [1, 3, 4, 7, 8, 10, 13], "fit_gpytorch_ml": [1, 3, 7], "cv_result": 1, "exactmarginalloglikelihood": [1, 7, 8], "function": [1, 7, 9, 13], "botorcherror": 2, "candidategenerationerror": 2, "rais": [2, 7, 8, 11, 13], "inputdataerror": [2, 7], "input": [2, 4, 8, 9, 10, 11, 12, 13], "compli": 2, "convent": [2, 13], "unsupportederror": 2, "unsupport": 2, "botorchtensordimensionerror": 2, "violat": [2, 4, 12], "modelfittingerror": 2, "attempt": [2, 8], "unsuccessfulli": 2, "optimizationtimeouterror": 2, "current_x": 2, "runtim": [2, 3, 8, 13], "ndarrai": [2, 8, 13], "numpi": [2, 4, 13], "The": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13], "second": [2, 4, 7, 8, 10, 12, 13], "botorchwarn": 2, "badinitialcandidateswarn": 2, "optimzi": [2, 8], "bad": [2, 8], "inputdatawarn": 2, "costawarewarn": 2, "cost": 2, "awar": 2, "acquisit": [2, 5, 7, 9, 10, 13], "optimizationwarn": [2, 8], "releat": 2, "samplingwarn": 2, "botorchtensordimensionwarn": 2, "routin": [3, 4, 8], "mll": [3, 7, 8], "closur": 3, "closure_kwarg": [3, 8], "clear": [3, 8, 13], "hous": [3, 8, 13], "backward": [3, 8, 9, 13], "object": [3, 4, 7, 8, 9, 10, 11], "valu": [3, 4, 7, 8, 9, 10, 11, 12, 13], "gradient": [3, 4, 7, 8, 9, 11, 12, 13], "respons": [3, 7, 8, 9], "grad": [3, 8], "attribut": [3, 7, 8, 9, 12, 13], "get_loss_closure_with_grad": [3, 8], "user": [3, 7, 8, 9, 13], "dispatch": [3, 8], "down": [3, 7, 10], "subroutin": 3, "unexpect": [3, 13], "succeed": 3, "fit_gpytorch_model": [3, 7], "max_retri": [3, 8], "legaci": [3, 8], "api": [3, 8], "insid": [3, 7], "held": 3, "fix": [3, 4, 7, 8, 9, 12, 13], "temporarili": [3, 13], "requires_grad": [3, 8, 13], "max_attempt": 3, "fit_fully_bayesian_model_nut": [3, 7], "max_tree_depth": 3, "warmup_step": 3, "256": [3, 8], "thin": [3, 13], "disable_progbar": 3, "jit_compil": 3, "No": [3, 7, 11], "turn": [3, 7], "nut": [3, 7], "saasfullybayesiansingletaskgp": [3, 7, 13], "saasfullybayesianmultitaskgp": [3, 7], "depth": 3, "burn": [3, 13], "step": [3, 7, 8, 9, 13], "mcmc": [3, 7, 9], "nth": 3, "print": [3, 11, 12, 13], "progress": [3, 13], "bar": 3, "diagnost": [3, 8], "jit": 3, "2x": 3, "rough": 3, "github": [3, 7, 12, 13], "pyro": [3, 7], "ppl": 3, "3136": 3, "gen": 4, "gen_candidates_scipi": [4, 8], "initial_condit": 4, "acquisition_funct": 4, "lower_bound": [4, 8], "upper_bound": [4, 8], "inequality_constraint": [4, 8, 13], "equality_constraint": [4, 8, 13], "nonlinear_inequality_constraint": [4, 8], "timeout_sec": [4, 8], "convert": [4, 7, 8, 13], "coeffici": [4, 8, 13], "rh": [4, 8, 13], "encod": [4, 7, 8, 13], "inequ": [4, 8, 13], "slsqp": [4, 8], "maxit": [4, 8], "kei": [4, 7, 8, 10, 13], "bfg": [4, 8], "with_grad": 4, "timeout": 4, "stop": 4, "found": [4, 7, 8, 12], "xinit": [4, 8], "gen_batch_initial_condit": [4, 8], "500": [4, 8, 12], "batch_candid": 4, "batch_acq_valu": 4, "gen_candidates_torch": [4, 8, 10], "adam": [4, 8, 12], "callback": [4, 8], "pytorch": [4, 7, 9, 13], "search": [4, 5, 7, 8, 12], "noreturn": [4, 7], "accept": [4, 7, 13], "execut": [4, 13], "get_best_candid": 4, "batch_valu": 4, "highest": 4, "best_candid": 4, "minimize_with_timeout": [4, 8], "samplingstrategi": 4, "semant": [4, 7], "joint": [4, 7, 8, 9, 13], "maxposteriorsampl": 4, "max": [4, 7, 8, 10, 13], "mp": 4, "100": [4, 8, 12, 13], "sampled_x": 4, "constructor": [4, 7, 12], "maximize_sampl": 4, "boltzmannsampl": 4, "acq_func": 4, "temper": 4, "multinomi": [4, 13], "exp": [4, 7, 8, 12, 13], "unit": [4, 7, 11, 12, 13], "approach": [4, 7, 10, 13], "uniform": [4, 7, 13], "bmucb": 4, "boltzmann": 4, "analyt": [4, 7], "mont": [4, 13], "carlo": [4, 13], "softmax": [4, 8, 13], "underli": [4, 7, 10, 13], "constrainedmaxposteriorsampl": 4, "constraint_model": 4, "minimize_constraints_onli": 4, "meet": 4, "c1": [4, 7], "c2": [4, 7], "cm": 4, "black": [4, 8], "seper": 4, "doi": 4, "org": [4, 7], "48550": 4, "2002": 4, "08526": 4, "cmp": 4, "modellistgp": [4, 7, 13], "cmodel1": 4, "cmodel2": 4, "cmodelm": 4, "multitaskgp": [4, 7], "submodel": [4, 7], "predict": [4, 7, 9, 12], "pick": [4, 8], "reguardless": 4, "cross_valid": 5, "test_funct": 5, "page": [5, 10, 13], "abstract": [7, 8, 10], "modellist": [7, 9, 10, 13], "cannot": 7, "subclass": [7, 10, 13], "most": [7, 8, 12, 13], "encount": [7, 13], "network": 7, "layer": 7, "document": [7, 8], "sever": [7, 12, 13], "piec": [7, 10, 13], "move": [7, 8, 13], "cast": 7, "cuda": 7, "_has_transformed_input": 7, "store": [7, 13], "_original_train_input": 7, "_revert_to_original_input": 7, "untransform": [7, 10], "cycl": [7, 8], "upstream": 7, "output_indic": [7, 13], "output": [7, 8, 9, 10, 13], "transform_input": [7, 13], "eval": [7, 8, 13], "speed": [7, 13], "o": [7, 8, 9, 12, 13], "perspect": [7, 13], "batchedmultioutputgpytorchmodel": [7, 13], "test_batch_shap": [7, 13], "num_output": [7, 9, 10, 13], "subset_output": 7, "idc": 7, "condition_on_observ": 7, "miss": [7, 10, 13], "classmethod": [7, 12, 13], "construct_input": 7, "botorchdataset": [7, 13], "put": [7, 10], "revert": 7, "fantasizemixin": [7, 13], "mixin": [7, 10], "basemodel": 7, "def": [7, 13], "__init__": [7, 13], "modelthatcanfantas": 7, "super": [7, 13], "tfantasizemixin": 7, "fake": 7, "Will": 7, "flexibl": 7, "One": [7, 8], "m_1": 7, "m_2": 7, "m_12": 7, "overal": 7, "drop": 7, "constitut": 7, "them": [7, 9, 10], "degener": [7, 9, 13], "sing": 7, "load_state_dict": [7, 13], "state_dict": [7, 13], "strict": [7, 13], "load": 7, "modeldict": 7, "moduledict": 7, "lightweight": 7, "your": [7, 13], "own": [7, 13], "simpli": [7, 8, 10, 13], "wrapper": [7, 8, 13], "express": [7, 8, 12], "relationship": [7, 12], "architectur": 7, "heterogen": 7, "affinefidelitycostmodel": 7, "path": 7, "get_gp_sampl": [7, 13], "substitut": 7, "keep_dim": 7, "explicit": [7, 8], "even": 7, "affinedeterministicmodel": 7, "posteriormeanmodel": 7, "fixedsinglesamplemodel": 7, "f_mean": 7, "f_stddev": 7, "uncorrel": 7, "work": [7, 8, 9, 13], "tutori": 7, "continu": [7, 8, 13], "fixed_cost": 7, "sum_j": [7, 8], "good": 7, "further": [7, 8], "heteroskedasticsingletaskgp": 7, "how": [7, 8], "treat": [7, 13], "prior": [7, 8], "cube": [7, 11, 13], "correl": [7, 13], "gp_regress": 7, "covar_modul": 7, "mean_modul": 7, "outcome_transform": [7, 10], "you": [7, 8, 13], "keepdim": 7, "gaussianlikelihood": 7, "maternkernel": 7, "constantmean": 7, "outcometransform": [7, 10], "inputtransform": [7, 10], "overridden": [7, 10], "although": [7, 10], "recip": [7, 10], "afterward": [7, 10], "former": [7, 10], "hook": [7, 10, 13], "latter": [7, 10], "silent": [7, 10], "multivariatenorm": [7, 9, 13], "onlin": 7, "arm": 7, "outsid": 7, "softwar": 7, "anoth": [7, 13], "perhap": 7, "bootstrap": 7, "free": 7, "arbitrarili": 7, "full_lik": 7, "transfrom": 7, "drawn": [7, 9, 10, 13], "heteroskedast": 7, "se": 7, "__": 7, "cat": 7, "co": [7, 12], "new_x": 7, "new_i": 7, "access": [7, 9, 13], "cheaper": 7, "togeth": [7, 10], "help": [7, 10, 13], "wu2019mf": 7, "toscano": 7, "palmerin": 7, "tune": 7, "gp_regression_fidel": 7, "singletaskmultifidelitygp": 7, "iteration_fidel": 7, "data_fidel": 7, "linear_trunc": 7, "downsamplingkernel": 7, "exponentialdecaykernel": 7, "pow": 7, "downsampl": 7, "lineartruncatedfidelitykernel": 7, "matern": 7, "fidelity_featur": 7, "fixednoisemultifidelitygp": 7, "analogu": 7, "gp_regression_mix": 7, "mixedsingletaskgp": 7, "cat_dim": 7, "cont_kernel_factori": 7, "sole": [7, 8], "categoricalkernel": 7, "ham": 7, "distanc": [7, 12], "x1": [7, 12], "x2": [7, 12], "k_cont_1": 7, "k_cat_1": 7, "k_cont_2": 7, "k_cat_2": 7, "xi": 7, "ci": 7, "categor": [7, 13], "suffix": 7, "_i": 7, "product": [7, 12], "properli": [7, 13], "optimize_acqf_mix": [7, 8], "randint": 7, "ard_num_dim": 7, "active_dim": 7, "ordin": 7, "onehottonumer": 7, "transform_on_train": 7, "categorical_featur": 7, "constuct": 7, "model_list_gp_regress": 7, "gp_model": 7, "independentmodellist": 7, "modellistgpytorchmodel": 7, "interfac": [7, 8], "structur": [7, 9, 12, 13], "honor": 7, "model1": 7, "train_x1": 7, "train_y1": 7, "model2": 7, "train_x2": 7, "train_y2": 7, "get_fantasy_model": 7, "n_i": 7, "cach": [7, 13], "doucet2010sampl": [7, 9], "doucet": 7, "stat": 7, "ox": 7, "ac": 7, "uk": 7, "doucet_simulationconditionalgaussian": 7, "apr": [7, 12], "2010": 7, "maddox2021bohdo": 7, "maddox": 7, "2106": 7, "12997": 7, "jun": 7, "task_featur": 7, "task_covar_prior": 7, "output_task": 7, "multitaskgpytorchmodel": 7, "icm": [7, 9], "pleas": [7, 12, 13], "fixednoisemultitaskgp": 7, "lkj": 7, "i1": 7, "i2": 7, "f1": 7, "f2": 7, "unsqueez": 7, "get_all_task": 7, "prior_config": 7, "embed": 7, "parse_training_data": 7, "inter": 7, "use_lkj_prior": 7, "kroneckermultitaskgp": [7, 9], "data_covar_modul": 7, "kroneck": [7, 9], "matheron": [7, 9, 10], "rule": [7, 9, 10, 13], "k_f": 7, "rest": 7, "k_i": [7, 12], "sai": 7, "parameter_1": 7, "fidelity_1": 7, "parameter_2": 7, "fidelity_2": 7, "n_f": 7, "codifi": 7, "parsimoni": 7, "multitaskgaussianlikelihood": 7, "gammaprior": 7, "05": [7, 8, 12, 13], "lkjcovarianceprior": 7, "overrid": [7, 13], "uninform": 7, "favor": 7, "stronger": 7, "magnitud": 7, "sd_prior": 7, "nonneg": [7, 8], "likelihood_rank": 7, "multitaskmultivariatenorm": [7, 9, 13], "train_full_covar": 7, "predictive_mean_cach": 7, "multitaskgpposterior": [7, 9], "val": 7, "zhe2019hogp": [7, 9], "zhe": 7, "xing": 7, "kirbi": 7, "learn": [7, 10, 12], "volum": [7, 12], "89": [7, 12], "higher_order_gp": 7, "flattenedstandard": 7, "output_shap": [7, 9], "min_stdv": 7, "08": [7, 13], "reshap": 7, "squeez": [7, 13], "min_stddv": 7, "de": 7, "yvar": [7, 13], "constant": [7, 12], "applic": [7, 10, 13], "untransform_posterior": 7, "higherordergpposterior": [7, 9], "transformedposterior": [7, 9], "higherordergp": [7, 9], "num_latent_dim": 7, "learn_latent_par": 7, "latent_init": 7, "least": [7, 8, 9, 12, 13], "imag": 7, "algebra": 7, "imagin": 7, "30": 7, "000": 7, "36": 7, "million": 7, "entri": [7, 8, 13], "10x10": 7, "20x20": 7, "30x30": 7, "400": 7, "linear_oper": 7, "_fast_solv": 7, "fit_gpytorch_mll_torch": [7, 8], "rsampl": [7, 9, 10, 13], "set_train_data": 7, "scratch": 7, "lesser": 7, "label": [7, 13], "m_d": 7, "make_posterior_vari": 7, "joint_covariance_matrix": [7, 9], "stack": [7, 13], "linearoper": [7, 9, 10, 13], "prefer": 7, "chu2005prefer": 7, "wei": 7, "chu": 7, "zoubin": 7, "ghahramani": 7, "22nd": 7, "2005": [7, 12], "brochu2010tutori": 7, "eric": 7, "brochu": 7, "vlad": 7, "cora": 7, "nando": 7, "freita": 7, "activ": [7, 12], "hierarch": 7, "reinforc": 7, "1012": 7, "2599": 7, "pairwise_gp": 7, "datapoint": 7, "comparison": [7, 10, 12], "rbf": 7, "left": [7, 10, 13], "frac": 7, "x_2": [7, 12], "right": [7, 8, 10, 13], "denomin": 7, "maintain": 7, "elsewher": 7, "implicitli": [7, 9, 13], "scalekernel": [7, 10], "decis": [7, 13], "maker": 7, "item": [7, 8, 10, 13], "third": [7, 12], "7": [7, 12, 13], "8": [7, 8, 12, 13], "9": [7, 12], "pairwiselikelihood": 7, "update_model": 7, "f_j": 7, "exact_gp": 7, "refit": 7, "_updat": 7, "re": [7, 13], "buffer": [7, 8, 13], "_load_from_state_dict": 7, "_incompatiblekei": 7, "missing_kei": [7, 13], "unexpected_kei": [7, 13], "hyperparam": 7, "opt": 7, "essenti": 7, "f_map": 7, "parent": 7, "deepcopi": 7, "pairwiselaplacemarginalloglikelihood": 7, "12": [7, 12], "comp": 7, "theta": [7, 12], "sacgp": 7, "sac": 7, "belong": 7, "lceagp": 7, "train_embed": 7, "cat_feature_dict": 7, "embs_feature_dict": 7, "embs_dim_list": 7, "context_weight_dict": 7, "lce": 7, "context_nam": 7, "cat_0": 7, "cat_k": 7, "popul": [7, 13], "contextual_multioutput": 7, "lcemgp": 7, "context_cat_featur": 7, "context_emb_featur": 7, "multioutput": [7, 10], "n_context": 7, "hot": [7, 13], "row": 7, "task_covar_matrix": 7, "task_idc": 7, "fixednoiselcemgp": 7, "burt2020svgp": 7, "david": 7, "burt": 7, "carl": 7, "edward": 7, "rasmussen": 7, "mark": 7, "van": [7, 13], "der": 7, "wilk": 7, "spars": [7, 13], "jmlr": 7, "v21": 7, "1015": 7, "html": [7, 12], "hensman2013svgp": 7, "jame": 7, "hensman": 7, "nicolo": 7, "fusi": 7, "neil": 7, "lawrenc": 7, "big": 7, "29th": 7, "1309": 7, "6835": 7, "moss2023ipa": 7, "henri": 7, "sebastian": 7, "ober": 7, "victor": 7, "picheni": 7, "throughput": 7, "25th": 7, "2023": 7, "2301": 7, "10123": 7, "approximate_gp": 7, "approximategpytorchmodel": 7, "variou": 7, "svgp": 7, "approximategp": 7, "_singletaskvariationalgp": 7, "singletaskvariationalgp": 7, "learn_inducing_point": 7, "variational_distribut": 7, "variational_strategi": 7, "variationalstrategi": 7, "inducing_point": 7, "inducing_point_alloc": 7, "greedyvariancereduct": 7, "effect": [7, 10, 13], "build": [7, 8, 13], "stream": 7, "greedyimprovementreduct": 7, "goal": [7, 12, 13], "suitabl": [7, 10], "those": [7, 13], "lot": 7, "variationalelbo": 7, "num_data": 7, "abil": 7, "_variationaldistribut": 7, "choleskyvariationaldistribut": 7, "encourag": 7, "eas": 7, "_variationalstrategi": 7, "whiten": 7, "easier": 7, "inducingpointalloc": 7, "init_inducing_point": 7, "reiniti": 7, "reset": 7, "calibr": 7, "eriksson2021saasbo": 7, "top": [7, 9, 10], "eriksson": [7, 13], "jankowiak": 7, "subspac": 7, "thirti": 7, "seventh": 7, "fully_bayesian": [7, 9], "matern52_kernel": 7, "compute_dist": 7, "reshape_and_detach": 7, "new_valu": 7, "detach": [7, 13], "saaspyromodel": 7, "pyromodel": 7, "saa": [7, 10], "sparsiti": 7, "hundr": 7, "tunabl": 7, "modifi": [7, 12, 13], "set_input": 7, "outputscal": [7, 10], "sample_outputscal": 7, "concentr": [7, 12], "15": [7, 8, 12], "tkwarg": [7, 13], "sample_mean": 7, "sample_nois": 7, "sample_lengthscal": 7, "postprocess_mcmc_sampl": 7, "mcmc_sampl": 7, "tausq": 7, "shrinkag": 7, "load_mcmc_sampl": 7, "pyro_model": 7, "isn": [7, 8], "saas_gp": 7, "median_lengthscal": 7, "median": 7, "num_mcmc_sampl": 7, "logic": 7, "doesn": 7, "plai": 7, "aren": [7, 8], "until": 7, "don": [7, 8], "know": 7, "itself": 7, "ought": 7, "unreach": 7, "check_if_fit": 7, "fullybayesianposterior": [7, 9], "fully_bayesian_multitask": 7, "multitasksaaspyromodel": 7, "task_rank": 7, "num": 7, "sample_latent_featur": 7, "sample_task_lengthscal": 7, "stratifi": 7, "ones_lik": 7, "mtsaas_gp": 7, "saasfullybayesianfixednoisemultitaskgp": 7, "lengthscale_prior": 7, "lengthscale_constraint": 7, "06": [7, 9], "dist": 7, "NOT": 7, "interv": 7, "power_prior": 7, "offset_prior": 7, "power_constraint": 7, "offset_constraint": 7, "mathbf": 7, "power": [7, 8, 10, 13], "len": [7, 8], "num_dimens": 7, "exponential_decai": 7, "decai": [7, 8], "lenthscal": 7, "linear_truncated_fidel": 7, "lengthscale_prior_unbias": 7, "lengthscale_prior_bias": 7, "lengthscale_constraint_unbias": 7, "lengthscale_constraint_bias": 7, "covar_module_unbias": 7, "covar_module_bias": 7, "truncat": [7, 8], "parmet": 7, "k_0": 7, "k_1": [7, 12], "c_2": 7, "k_2": [7, 12], "c_3": 7, "k_3": 7, "decompos": 7, "determist": [7, 8], "polynomi": 7, "interact": 7, "four": 7, "randn": [7, 13], "covar": 7, "batch_x": 7, "gamma": 7, "separ": [7, 12], "contextual_lcea": 7, "lceakernel": 7, "devic": [7, 8, 9, 13], "sackernel": 7, "breakdown": 7, "unbserver": 7, "spatial": 7, "empti": [7, 8, 13], "indictor": 7, "contextual_sac": 7, "obersev": 7, "written": [7, 13], "x_11": 7, "x_1d": 7, "x_21": 7, "x_2d": 7, "x_m1": 7, "x_md": 7, "comppon": 7, "begin": 7, "x_": [7, 12], "cdot": 7, "k_m": 7, "math": [7, 12], "act": [7, 8, 10], "ith": [7, 13], "pairwiseprobitlikelihood": 7, "max_plate_nest": 7, "std_normal_cdf": 7, "util_diff": 7, "negative_log_gradient_sum": 7, "negative_log_hessian_sum": 7, "hessian": 7, "pairwiselogitlikelihood": 7, "log_p": 7, "back": [7, 13], "eriksson2021scal": 7, "poloczek": 7, "pmlr": [7, 12], "mlr": 7, "press": [7, 12], "v130": 7, "eriksson21a": 7, "chainedoutcometransform": 7, "chain": [7, 13], "transfomr": 7, "bilog": 7, "magnifi": 7, "flatten": 7, "extrem": [7, 9, 13], "varieti": 7, "warp": 7, "chainedinputtransform": 7, "tf1": 7, "tf2": 7, "tf": 7, "transform_on_ev": 7, "transform_on_fantas": 7, "revers": 7, "preprocess_transform": 7, "main": [7, 10], "min_rang": 7, "affineinputtransform": 7, "rang": [7, 8, 9, 12, 13], "divis": 7, "learn_bound": 7, "inputstandard": 7, "min_std": 7, "asssum": 7, "integer_indic": 7, "conjunct": [7, 8, 9, 10], "unnorm": [7, 13], "straight": [7, 13], "daulton2022bopr": [7, 13], "wise": [7, 8, 13], "hyperbol": [7, 13], "tangent": [7, 13], "unnormalize_tf": 7, "round_tf": 7, "normalize_tf": 7, "tf3": 7, "log10": 7, "reversibleinputtransform": 7, "07": [7, 12], "concentration1_prior": 7, "concentration0_prior": 7, "kumaraswami": 7, "clip": [7, 13], "concentration1": 7, "concentration0": 7, "fkwarg": 7, "skip_expand": 7, "beforehand": 7, "fly": 7, "predefin": 7, "risk": 7, "notebook": 7, "rhokg": 7, "risk_averse_bo_with_environmental_vari": 7, "environment": 7, "built": [7, 8], "mathemat": [7, 13], "script": 7, "engin": [7, 8, 10], "transfer": 7, "loop": [7, 8, 13], "1d": [7, 12], "posterior_sampl": [7, 10], "risk_measure_sampl": 7, "is_one_to_mani": 7, "translat": 7, "filterfeatur": 7, "feature_indic": 7, "multiobject": [7, 12, 13], "impact": [7, 12], "kept": [7, 13], "fed": 7, "keep": [7, 8, 13], "risk_averse_bo_with_input_perturb": 7, "n_p": 7, "heteroscedast": 7, "subset_transform": 7, "_expanded_perturb": 7, "inaccess": 7, "get_rounding_input_transform": 7, "one_hot_bound": 7, "return_numer": 7, "contigu": [7, 13], "interior": [7, 13], "nummer": 7, "downstream": [7, 8], "lognorm_to_norm": 7, "cov": [7, 9, 10, 13], "mvn": [7, 9, 13], "mu_ln": 7, "cov_ln": 7, "mu_n": 7, "cov_n": 7, "cov_n_": 7, "ij": 7, "cov_ln_": 7, "mu_ln_": 7, "mu_n_": 7, "norm_to_lognorm": 7, "suffici": 7, "mu_": 7, "cov_": 7, "jj": 7, "norm_to_lognorm_mean": 7, "vectorof": 7, "norm_to_lognorm_vari": 7, "expand_and_copy_tensor": 7, "input_batch_shap": 7, "new_batch_shap": 7, "consum": [7, 9], "prepar": 7, "consumpt": 7, "thereof": [7, 13], "model_list_to_batch": 7, "model_list": 7, "list_gp": 7, "gp1": 7, "gp2": 7, "batch_gp": 7, "set_attribut": 7, "attr": [7, 13], "setattr": 7, "zoo": 7, "tiger": 7, "ag": 7, "three": [7, 8, 12], "get_attribut": 7, "getattr": 7, "batched_to_model_list": 7, "batch_model": 7, "batched_multi_output_to_single_output": 7, "batch_mo_model": 7, "_aug_batch_shap": 7, "still": 7, "_input_batch_shap": 7, "thing": 7, "mo": 7, "hopefulli": 7, "temporari": 7, "cornelliu": 7, "pull": 7, "1083": 7, "batched_mo_model": 7, "batch_mo_gp": 7, "batch_so_gp": 7, "batched_multioutput_to_single_output": 7, "chen2018dpp": 7, "lame": 7, "guoxin": 7, "zhang": 7, "han": 7, "fast": 7, "determinant": 7, "divers": [7, 13], "32nd": 7, "2018": [7, 10], "1709": 7, "05135": 7, "allocate_inducing_point": 7, "num_induc": 7, "someth": 7, "qualiti": 7, "maximun": 7, "qualityfunct": 7, "score": 7, "criterion": [7, 8, 12, 13], "unitqualityfunct": 7, "aim": 7, "expectedimprovementqualityfunct": 7, "conserv": 7, "justif": 7, "greedili": 7, "choos": [7, 12, 13], "promis": 7, "_pivoted_cholesky_init": 7, "kernel_matrix": 7, "max_length": 7, "quality_scor": 7, "epsilon": [7, 10], "pivot": [7, 13], "choleski": 7, "dpp": 7, "blob": [7, 12, 13], "master": [7, 12, 13], "py": [7, 12, 13], "modif": 7, "stabil": 7, "assort": 7, "multioutput_to_batch_mode_transform": 7, "target_batch_shap": 7, "add_output_dim": 7, "original_batch_shap": 7, "insert": [7, 13], "correct": 7, "extra": [7, 13], "check_no_nan": 7, "check_min_max_sc": 7, "atol": [7, 13], "raise_on_fail": 7, "ignore_dim": 7, "toler": [7, 8, 11], "boundari": [7, 13], "check_standard": 7, "atol_mean": 7, "atol_std": 7, "validate_input_sc": [7, 11], "ignore_x_dim": 7, "emit": 7, "iii": [7, 11], "mod_batch_shap": 7, "recurs": 7, "sub_modul": 7, "leaf_modul": 7, "gpt_posterior_set": 7, "_flag": [7, 11], "optimizationstatu": 8, "enum": 8, "enumer": [8, 13], "optimizationresult": 8, "fval": 8, "statu": 8, "messag": 8, "scipy_minim": 8, "x0": [8, 13], "ndarrayoptimizationclosur": 8, "solver": [8, 13], "wait": 8, "abort": 8, "summar": 8, "torch_minim": 8, "schedul": 8, "step_limit": 8, "stopping_criterion": 8, "lrschedul": 8, "lr_schedul": 8, "_lrschedul": 8, "stoppingcriterion": 8, "optimizeacqfinput": 8, "gen_candid": 8, "ic_gener": 8, "retry_on_optimization_warn": 8, "ic_gen_kwarg": 8, "docstr": [8, 13], "explan": 8, "full_tre": 8, "get_ic_gener": 8, "batch_limit": 8, "restart": 8, "gen_one_shot_kg_initial_condit": 8, "nonlinear": [8, 12], "retri": 8, "acq_valu": 8, "acq_value_list": 8, "optimize_acqf_cycl": 8, "cyclic_opt": 8, "optimize_acqf_list": 8, "acq_function_list": 8, "fixed_features_list": 8, "invok": [8, 9, 13], "mix": [8, 13], "proper": 8, "noth": 8, "optimize_acqf_discret": 8, "max_batch_s": 8, "uniqu": [8, 12, 13], "quickli": 8, "explod": 8, "num_choic": 8, "excess": 8, "optimize_acqf_discrete_local_search": 8, "discrete_choic": 8, "4096": 8, "x_avoid": 8, "lattic": 8, "thoroughli": 8, "fit_gpytorch_mll_scipi": 8, "fit_gpytorch_scipi": 8, "track_iter": 8, "approx_ml": 8, "scipy_object": 8, "_scipy_objective_and_grad": 8, "module_to_array_func": 8, "module_to_arrai": 8, "module_from_array_func": 8, "set_params_with_arrai": 8, "train_target": [8, 9], "torchattr": 8, "fopt": 8, "wall_tim": 8, "optimizeresult": 8, "fit_gpytorch_torch": 8, "optimizer_cl": 8, "preced": 8, "disp": 8, "displai": 8, "regi": 8, "shoemak": 8, "radial": 8, "basi": [8, 10, 13], "dynam": 8, "coordin": [8, 13], "sample_around_best": 8, "initialize_q_batch": 8, "initialize_q_batch_nonneg": 8, "init_batch_limit": 8, "smart": 8, "shot": 8, "intut": 8, "fact": 8, "initit": 8, "frac_random": 8, "remain": 8, "num_inner_restart": 8, "raw_inner_sampl": 8, "qkg": 8, "gen_value_function_initial_condit": 8, "current_model": 8, "draw_sobol_sampl": [8, 13], "wa": [8, 12, 13], "fant_x": 8, "fantasy_model": 8, "value_funct": 8, "proport": [8, 13], "acquisiton": 8, "area": 8, "less": [8, 12, 13], "xrnd": 8, "sample_points_around_best": 8, "n_discrete_point": 8, "best_pct": 8, "subset_sigma": 8, "prob_perturb": 8, "nearbi": 8, "percentag": 8, "sample_truncated_normal_perturb": 8, "sample_perturbed_subset_dim": 8, "shown": 8, "beneifici": 8, "expmastoppingcriterion": 8, "10000": [8, 13], "n_window": 8, "rel_tol": 8, "window": 8, "decreas": [8, 13], "ma": [8, 12], "whenev": 8, "forwardbackwardclosur": 8, "context_manag": [8, 13], "fuse": 8, "contextmanag": [8, 13], "zero_grad_ctx": [8, 13], "as_arrai": 8, "as_tensor": 8, "get_stat": 8, "set_stat": 8, "fill_valu": 8, "persist": [8, 13], "get_tensors_as_ndarray_1d": 8, "set_tensors_from_ndarray_1d": 8, "model_closur": 8, "get_loss_closur": 8, "data_load": 8, "public": 8, "getlossclosur": 8, "signatur": [8, 13], "dataload": 8, "_c": 8, "_tensorbas": 8, "getlossclosurewithgrad": 8, "nullcontext": 8, "acquisition_util": 8, "columnwise_clamp": 8, "raise_on_viol": 8, "packag": [8, 13], "nativ": 8, "fanci": 8, "descent": 8, "funtion": 8, "accuraci": 8, "elment": 8, "impos": 8, "fix_featur": 8, "get_x_baselin": 8, "manipul": 8, "model_util": 8, "dtype": [8, 9, 10, 13], "get_data_load": 8, "get_paramet": 8, "name_filt": [8, 13], "require_grad": 8, "get_parameters_and_bound": 8, "default_bound": 8, "get_name_filt": 8, "pattern": 8, "bank": 8, "named_paramet": 8, "sample_all_prior": 8, "numpy_util": 8, "as_ndarrai": 8, "inplac": 8, "get_bounds_as_ndarrai": 8, "fun": 8, "jac": 8, "hess": 8, "hessp": 8, "tol": [8, 9], "verbatim": 8, "reach": 8, "achiev": 8, "inject": 8, "track": [8, 13], "np": [8, 10], "hessianupdatestrategi": 8, "simplifi": [8, 12], "numpy_convert": 8, "meant": 8, "named_parameters_and_constraint": 8, "n_param": 8, "parameter_arrai": 8, "property_dict": 8, "bounds_out": 8, "parameter_constraint": 8, "make_scipy_bound": 8, "scipy_bound": 8, "make_scipy_linear_constraint": 8, "shapex": 8, "long": 8, "jacobian": 8, "eq": 8, "ineq": 8, "accordingli": 8, "enforc": [8, 13], "eval_lin_constraint": 8, "flat_idxr": 8, "coeff": 8, "hand": [8, 13], "side": [8, 12, 13], "evalut": [8, 10], "lin_constraint_jac": 8, "appear": 8, "make_scipy_nonlinear_inequality_constraint": 8, "f_np_wrapper": 8, "autograd": [8, 13], "rare": 8, "posterior_list": 9, "p_1": 9, "model_1": 9, "p_2": 9, "model_2": 9, "p_12": 9, "base_sampl": [9, 13], "_extended_shap": [9, 10, 13], "torchposterior": [9, 10], "easi": [9, 12], "expos": 9, "variat": [9, 13], "mass": 9, "base_sample_shap": [9, 13], "batch_rang": [9, 13], "compon": [9, 13], "regardless": [9, 13], "rsample_from_base_sampl": [9, 10, 13], "scalarize_posterior_gpytorch": 9, "scalarize_posterior": 9, "new_posterior": 9, "deterministicposterior": [9, 10], "ensembleposterior": [9, 10], "eagerli": 9, "forest": 9, "ensemble_s": 9, "indexsampl": [9, 10], "higher_ord": 9, "train_train_covar": 9, "test_train_covar": 9, "overwrit": [9, 13], "hogp": 9, "grow": 9, "At": 9, "entir": [9, 13], "difficult": 9, "correctli": 9, "train_diff": 9, "test_mean": 9, "train_nois": 9, "test_nois": 9, "kernel": [9, 10, 13], "mtgp": 9, "test_obs_covar": 9, "sample_transform": 9, "mean_transform": 9, "variance_transform": 9, "batched_bisect": 9, "max_step": 9, "bisect": 9, "termniat": 9, "mixtur": [9, 12], "mcmc_dim": 9, "file": 9, "mixture_mean": 9, "mixture_vari": 9, "deterministicsampl": 10, "signal": 10, "safe": 10, "catch": 10, "ensembl": 10, "index_sampl": 10, "samplerlist": 10, "normalmcsampl": 10, "_construct_base_sampl": 10, "iid": [10, 13], "1234": [10, 13], "sobol": [10, 12, 13], "pairwise_sampl": 10, "pairwisemcsampl": 10, "max_num_comparison": 10, "overwritten": 10, "sibl": 10, "pairwiseiidnormalsampl": 10, "rng": [10, 13], "pairwisesobolqmcnormalsampl": 10, "pages2018numprob": 10, "introduct": 10, "financ": 10, "universitext": 10, "springer": [10, 12, 13], "publish": 10, "normalqmcengin": 10, "inv_transform": 10, "i_d": [10, 13], "muller": 10, "pg": 10, "123": 10, "sobolengin": 10, "float32": [10, 13], "multivariatenormalqmcengin": 10, "driven": 10, "stochastic_sampl": 10, "fork_rng": 10, "hood": 10, "featuremap": 10, "transformedmodulemixin": 10, "tinputtransform": 10, "output_transform": 10, "toutputtransform": 10, "kernelevaluationmap": 10, "feature_map": 10, "kernelfeaturemap": 10, "mathcal": 10, "mathbb": 10, "phi": [10, 13], "linearli": 10, "rahimi2007random": 10, "rahimi": 10, "recht": 10, "2007": 10, "sutherland2015error": 10, "sutherland": 10, "schneider": 10, "1506": 10, "02785": 10, "2015": [10, 13], "gen_kernel_featur": 10, "num_input": 10, "stationari": 10, "samplepath": 10, "pathdict": 10, "join": 10, "pathlist": 10, "generalizedlinearpath": 10, "bias_modul": 10, "prior_sampl": 10, "draw_kernel_feature_path": 10, "sample_dim": 10, "batch_dim": 10, "joint_dim": 10, "penultim": 10, "wilson2020sampl": 10, "borovitskii": 10, "terenin": 10, "mostowski": 10, "wilson2021pathwis": 10, "matheronpath": 10, "prior_path": 10, "update_path": 10, "\u03b5": 10, "_______________________________________": 10, "sim": 10, "draw_matheron_path": 10, "update_strategi": 10, "gaussian_upd": 10, "sample_valu": 10, "arithmet": [10, 13], "exist": [10, 13], "tensortransform": 10, "chainedtransform": 10, "composit": 10, "sinecosinetransform": 10, "sine": 10, "cosin": [10, 12], "rescal": [10, 12], "inverselengthscaletransform": 10, "divid": [10, 13], "outputscaletransform": 10, "featureselector": 10, "outcomeuntransform": 10, "bridg": 10, "get_input_transform": 10, "get_output_transform": 10, "get_train_input": 10, "get_train_target": 10, "propagate_grad": 11, "propat": 11, "debug": 11, "verbos": [11, 13], "sure": 11, "train_y_var": 11, "log_level": 11, "50": [11, 12, 13], "statement": [11, 13], "getlogg": 11, "info": 11, "logger": 11, "stderr": 11, "log_level_default": 11, "benchmark": 12, "basetestproblem": [12, 13], "noise_std": 12, "ouf": 12, "evaluate_tru": 12, "constrainedbasetestproblem": 12, "c_i": 12, "n_c": 12, "evaluate_slack": 12, "slack": [12, 13], "c_": 12, "is_feas": 12, "iff": 12, "evaluate_slack_tru": 12, "multiobjectivetestproblem": 12, "max_hv": 12, "gen_pareto_front": 12, "sfu": 12, "ca": [12, 13], "ssurjano": 12, "synthetictestfunct": 12, "optimal_valu": 12, "acklei": 12, "768": 12, "z_1": [12, 13], "beal": 12, "branin": 12, "275": 12, "z_2": 12, "z_3": 12, "42478": 12, "475": 12, "z_i": 12, "397887": 12, "bukin": 12, "cosine8": 12, "dropwav": 12, "dixonpric": 12, "egghold": 12, "47": 12, "r1": 12, "r2": 12, "griewank": 12, "hartmann": 12, "six": 12, "alpha_i": 12, "a_ij": 12, "p_ij": 12, "minima": 12, "20169": 12, "150011": 12, "476874": 12, "275332": 12, "311652": 12, "6573": 12, "32237": 12, "holdert": 12, "holder": 12, "2085": 12, "05502": 12, "66459": 12, "z_4": 12, "levi": 12, "w_1": 12, "w_i": [12, 13], "w_d": 12, "michalewicz": 12, "hypercub": 12, "rastrigin": 12, "rosenbrock": 12, "shekel": 12, "synthtet": 12, "a_": 12, "ji": 12, "5363": 12, "sixhumpcamel": 12, "styblinskitang": 12, "styblinski": 12, "tang": 12, "mininimum": 12, "39": 12, "166166": 12, "903534": 12, "threehumpcamel": 12, "augmentedbranin": 12, "x_3": 12, "infinit": 12, "3pi": 12, "b_min": 12, "augmentedhartmann": 12, "alpha_1": 12, "x_7": 12, "a_1j": 12, "p_1j": 12, "h_min": 12, "augmentedrosenbrock": 12, "x_d": 12, "daulton2022": 12, "deb2005dtlz": 12, "deb": 12, "thiel": 12, "laumann": 12, "zitzler": 12, "abraham": 12, "jain": 12, "goldberg": 12, "evolutionari": [12, 13], "verlag": 12, "pp": [12, 13], "105": 12, "145": 12, "deb2005robust": 12, "gupta": 12, "berlin": 12, "150": 12, "164": 12, "frohlich2020": 12, "frohlich": 12, "klensk": 12, "vinogradska": 12, "daniel": 12, "zeiling": 12, "entropi": 12, "twenti": 12, "108": 12, "2262": 12, "2272": 12, "garridomerchan2020": 12, "merch": 12, "hern": 12, "andez": 12, "2004": [12, 13], "00601": 12, "gelbart2014": 12, "michael": 12, "gelbart": 12, "jasper": 12, "snoek": 12, "ryan": 12, "thirtieth": 12, "uai": 12, "14": 12, "auai": 12, "arlington": 12, "virginia": 12, "usa": 12, "259": 12, "liang2021": 12, "liang": 12, "lai": 12, "acceler": 12, "penicillin": 12, "neurip": 12, "ai": 12, "workshop": 12, "ma2019": 12, "suit": 12, "ieee": [12, 13], "23": 12, "972": 12, "986": 12, "decemb": 12, "oszycka1995": 12, "osyczka": 12, "kundu": 12, "multicriteria": 12, "genet": [12, 13], "94": 12, "99": 12, "1995": 12, "tanabe2020": 12, "ryoji": 12, "tanab": 12, "hisao": 12, "ishibuchi": [12, 13], "world": 12, "soft": [12, 13], "yang2019a": 12, "b\u00e4ck": 12, "swarm": 12, "44": 12, "945": 12, "956": 12, "zitzler2000": 12, "vol": [12, 13], "173": 12, "195": 12, "branincurrin": 12, "compos": [12, 13], "currin": 12, "x_0": 12, "2300": 12, "1900": 12, "2092": 12, "60": 12, "dh": 12, "uniformli": [12, 13], "edg": 12, "delta_0": 12, "delta_i": 12, "dh1": 12, "dh2": 12, "03": 12, "dh3": 12, "dh4": 12, "f_0": 12, "infer_reference_point": [12, 13], "85": 12, "dtlz": 12, "dtlz1": 12, "dltz1": 12, "line": [12, 13], "hyperplan": 12, "randomli": 12, "dtlz2": 12, "dltz2": 12, "hyperspher": [12, 13], "complet": 12, "concav": 12, "section": [12, 13], "dtlz3": 12, "3k": 12, "x_m": 12, "dtlz4": 12, "expon": 12, "dens": [12, 13], "f_m": 12, "plane": 12, "dtlz5": 12, "theta_0": 12, "theta_i": 12, "dtlz7": 12, "f_": 12, "2m": 12, "disconnect": 12, "gmm": 12, "boschresearch": 12, "noisyinputentropysearch": 12, "core": 12, "harryql": 12, "turbo": 12, "ferment": 12, "co2": 12, "byproduct": 12, "y_x": 12, "45": 12, "y_p": 12, "000000000000001e": 12, "m_x": 12, "014": 12, "143": 12, "alpha_2": 12, "4e": 12, "alpha_3": 12, "mu_x": 12, "092": 12, "k_x": 12, "mu_p": 12, "005": 12, "k_p": 12, "0002": 12, "04": 12, "k_g": 12, "7000": 12, "e_g": 12, "5100": 12, "k_d": 12, "e_d": 12, "50000": 12, "lambd": 12, "00025": 12, "t_v": 12, "273": 12, "t_o": 12, "373": 12, "9872": 12, "v_max": 12, "180": 12, "penicillin_vector": 12, "x_input": 12, "cultur": 12, "biomass": 12, "glucos": 12, "substrat": 12, "feed": [12, 13], "toyrobust": 12, "nomin": 12, "sinusoid": 12, "vehiclesafeti": 12, "vehicl": 12, "crash": 12, "worthi": 12, "nadir": [12, 13], "zdt": 12, "zdt1": 12, "convex": [12, 13], "zdt2": 12, "zdt3": 12, "discontinu": 12, "carsideimpact": 12, "car": 12, "ideal": 12, "bnh": 12, "constr": 12, "constrainedbranincurrin": 12, "disk": 12, "c2dtlz2": 12, "discbrak": 12, "disc": 12, "brake": 12, "mw7": 12, "anyoptim": 12, "pymoo": [12, 13], "mw": 12, "la2": 12, "osi": 12, "msu": [12, 13], "coinlab": [12, 13], "srn": 12, "weldedbeam": 12, "weld": 12, "beam": 12, "welded_beam": 12, "irshad2021": 12, "multi_objective_multi_fidel": 12, "momfbranincurrin": 12, "21": 12, "22": 12, "momfpark": 12, "park": 12, "p1": 12, "t1": 12, "t2": 12, "p2": 12, "x4": 12, "x3": 12, "t_1": 12, "t_2": 12, "sensitivity_analysi": 12, "ishigami": 12, "exhibit": 12, "nonmonoton": 12, "peculiar": 12, "compute_dgsm": 12, "dgsm": 12, "dgsm_gradient": 12, "dgsm_gradient_ba": 12, "dgsm_gradient_squar": 12, "absolut": [12, 13], "gsobol": 12, "prod_": 12, "4x_i": 12, "a_i": 12, "s_i": 12, "v_i": 12, "negati": 12, "optimal_sobol_indici": 12, "morri": 12, "beta_i": 12, "beta_ij": 12, "w_j": 12, "beta_ijl": 12, "w_l": 12, "5w_1": 12, "w_2": 12, "w_3": 12, "w_4": 12, "get_outcome_constraint_transform": 13, "outcome_constraint": 13, "kind": 13, "densecontain": 13, "event_shap": 13, "botorchcontain": 13, "slicecontain": 13, "tensorcheckpoint": 13, "delattr_ctx": 13, "enforce_hasattr": 13, "delet": 13, "requires_grad_ctx": 13, "parameter_rollback_ctx": 13, "checkpoint": 13, "exit": 13, "roll": 13, "metadata": 13, "rollback": 13, "adher": 13, "module_rollback_ctx": 13, "zero_on_ent": 13, "zero_on_exit": 13, "superviseddatasetmeta": 13, "src": 13, "assert": 13, "dict_from_it": 13, "fixednoisedataset": 13, "stipul": 13, "rankingdataset": 13, "ari": 13, "ground": 13, "sort": 13, "ti": 13, "skip": 13, "tie": 13, "randperm": 13, "type_bypassing_encod": 13, "doc": 13, "multipledispatch": 13, "__getitem__": 13, "dedic": 13, "travers": 13, "encode_arg": 13, "func": 13, "low_rank": 13, "extract_batch_covar": 13, "mt_mvn": 13, "mtmvn": 13, "lazi": 13, "sample_cached_choleski": 13, "baseline_l": 13, "triangular": 13, "get_objective_weights_transform": 13, "direct": 13, "apply_constraints_nonnegative_soft": 13, "n_sampl": 13, "soft_eval_constraint": 13, "lh": 13, "heavisid": 13, "shift": 13, "wan": 13, "approximate_round": 13, "diffenti": 13, "piecewis": 13, "nearest": 13, "identitystefunct": 13, "static": 13, "ctx": 13, "grad_output": 13, "roundst": 13, "onehotargmaxst": 13, "relax": 13, "argmax": 13, "trikalinos2014polytop": 13, "trikalino": 13, "valkenhoef": 13, "polytop": 13, "technic": 13, "report": 13, "brown": 13, "univers": 13, "manual_se": 13, "owen": 13, "scrambl": 13, "draw_sobol_normal_sampl": 13, "primari": 13, "sample_hyperspher": 13, "sphere": 13, "sample_simplex": 13, "simplex": 13, "sample_polytop": 13, "n0": 13, "hit": 13, "ax": 13, "save": 13, "batched_multinomi": 13, "num_categori": 13, "pseudorandom": 13, "find_interior_point": 13, "a_eq": 13, "b_eq": 13, "program": 13, "n_ineq": 13, "n_eq": 13, "valueerror": 13, "unbound": 13, "hitandrunpolytopesampl": 13, "interior_point": 13, "n_burnin": 13, "polytopesampl": 13, "polyop": 13, "n_ineq_con": 13, "n_eq_con": 13, "delaunaypolytopesampl": 13, "delaunai": 13, "triangul": 13, "vertic": 13, "tessel": 13, "hull": 13, "hypertriangl": 13, "triangl": 13, "exactli": 13, "gertvv": 13, "tesselampl": 13, "vertex": 13, "costli": 13, "similarli": 13, "moder": 13, "normalize_linear_constraint": 13, "get_polytope_sampl": 13, "markov": 13, "sparse_to_dense_constraint": 13, "tripl": 13, "n_constraint": 13, "gp_sampl": 13, "gpdraw": 13, "n_eval": 13, "never": 13, "randomfourierfeatur": 13, "input_dim": 13, "kernel_batch_shap": 13, "word": 13, "added_batch_shap": 13, "paranthes": 13, "get_deterministic_model_multi_sampl": 13, "batch_shape_input": 13, "get_eval_gp_sample_cal": 13, "get_deterministic_model": 13, "get_deterministic_model_list": 13, "get_weights_posterior": 13, "sigma_sq": 13, "bogu": 13, "agre": 13, "botorchtestcas": 13, "methodnam": 13, "runtest": 13, "testcas": 13, "suppress": 13, "setup": 13, "fixtur": 13, "exercis": 13, "assertallclos": 13, "rtol": 13, "equal_nan": 13, "assert_clos": 13, "allclos": 13, "assertionerror": 13, "0000034868717194": 13, "8348668001940709": 13, "basetestproblembasetestcas": 13, "test_forward": 13, "synthetictestfunctionbasetestcas": 13, "test_optimal_valu": 13, "test_optim": 13, "mockposterior": 13, "base_shap": 13, "mock": 13, "_sampl": 13, "mockmodel": 13, "shallow": 13, "destin": 13, "prefix": 13, "keep_var": 13, "futur": 13, "releas": 13, "ordereddict": 13, "xdoctest": 13, "undefin": 13, "descend": 13, "strictli": 13, "runtimeerror": 13, "mockacquisitionfunct": 13, "multiobjectivetestproblembasetestcas": 13, "test_attribut": 13, "test_max_hv": 13, "test_ref_point": 13, "constrainedmultiobjectivetestproblembasetestcas": 13, "test_num_constraint": 13, "test_evaluate_slack_tru": 13, "bufferdict": 13, "python": 13, "visibl": 13, "merg": 13, "unord": 13, "plain": 13, "preserv": 13, "mymodul": 13, "mm": 13, "pop": 13, "extra_repr": 13, "squeeze_last_dim": 13, "y_squeez": 13, "y_standard": 13, "x_normal": 13, "normalize_indic": 13, "is_fully_bayesian": 13, "t_batch_mode_transform": 13, "expected_q": 13, "assert_output_shap": 13, "exampleclass": 13, "single_q_method": 13, "arbitrary_q_method": 13, "concatenate_pending_point": 13, "exampleacquisitionfunct": 13, "match_batch_shap": 13, "batch_shape_x": 13, "batch_shape_i": 13, "x_match": 13, "convert_to_target_pre_hook": 13, "feasible_volum": 13, "get_feasible_sampl": 13, "get_outcome_feasibility_prob": 13, "nsample_outcom": 13, "estimate_feasible_volum": 13, "nsample_featur": 13, "wrt": 13, "get_const": 13, "expedit": 13, "get_constants_lik": 13, "ref": 13, "naiv": 13, "maechler2012accur": 13, "m\u00e4chler": 13, "rmpfr": 13, "safe_math": 13, "div": 13, "mul": 13, "log1mexp": 13, "logdiffexp": 13, "log_a": 13, "log_b": 13, "logmeanexp": 13, "lacour17": 13, "lacour": 13, "klamroth": 13, "fonseca": 13, "79": 13, "box_decomposition_list": 13, "boxdecompositionlist": 13, "bd1": 13, "y1": 13, "bd2": 13, "y2": 13, "bd": 13, "pareto_i": 13, "n_pareto_i": 13, "n_box_decomposit": 13, "get_hypercell_bound": 13, "compute_hypervolum": 13, "fronit": 13, "compute_local_upper_bound": 13, "alg": 13, "get_partition_bound": 13, "u_idx": 13, "definin": 13, "update_local_upper_bounds_increment": 13, "new_pareto_i": 13, "compute_non_dominated_hypercell_bounds_2d": 13, "pareto_y_sort": 13, "n_pareto": 13, "compute_dominated_hypercell_bounds_2d": 13, "hyperrectangl": 13, "fastpartit": 13, "fonseca2006": 13, "paquet": 13, "lopez": 13, "ibanez": 13, "sweep": 13, "congress": 13, "1157": 13, "1163": 13, "vancouv": 13, "canada": 13, "juli": 13, "2006": 13, "ishibuchi2011": 13, "akedo": 13, "nojima": 13, "visual": 13, "examin": 13, "mainten": 13, "proc": 13, "13th": 13, "annual": 13, "conf": 13, "evol": 13, "2011": 13, "max_ref_point": 13, "scale_max_ref_point": 13, "simon": 13, "wess": 13, "variant": 13, "vendor": 13, "hv": 13, "write": 13, "sort_by_dimens": 13, "node": 13, "multilist": 13, "doubli": 13, "predecessor": 13, "successor": 13, "reinsert": 13, "next": 13, "couckuyt2012": 13, "couckuyt": 13, "deschrijv": 13, "dhaen": 13, "brisban": 13, "qld": 13, "non_domin": 13, "encapsul": 13, "discard": 13, "figur": 13, "tensorflow": 13, "gpflow": 13, "gpflowopt": 13, "content": 13, "1007": 13, "s10898": 13, "019": 13, "00798": 13, "thresold": 13, "is_non_domin": 13, "dedupl": 13, "methodologi": 13, "slow": 13, "5mb": 13, "footprint": 13, "knowles2005": 13, "knowl": 13, "parego": 13, "hybrid": 13, "landscap": 13, "66": 13, "feb": 13, "get_chebyshev_scalar": 13, "max_i": 13, "sign": 13, "govern": 13, "influenc": 13, "get_aug_chebyshev_scalar": 13, "genz2016numer": 13, "trinh": 13, "genz": 13, "tring": 13, "gibson1994mont": 13, "gj": 13, "gibson": 13, "galsbei": 13, "da": 13, "elston": 13, "sensit": 13, "1994": 13, "mvnxpbstate": 13, "typeddict": 13, "perm": 13, "piv_chol": 13, "pivotedcholeski": 13, "plug_in": 13, "log_prob": 13, "log_prob_extra": 13, "covariance_matrix": 13, "standardized_rang": 13, "plug": 13, "odd": 13, "num_step": 13, "\u03c3": 13, "select_pivot": 13, "gge": 13, "priorit": 13, "attain": 13, "argmin_": 13, "pivot_": 13, "swap": 13, "concat": 13, "cross_covariance_matrix": 13, "disable_pivot": 13, "clone": 13, "asdict": 13, "truncated_multivariate_norm": 13, "truncatedmultivariatenorm": 13, "loc": 13, "precision_matrix": 13, "scale_tril": 13, "validate_arg": 13, "everywher": 13, "linearellipticalslicesampl": 13, "log_partit": 13, "_instanc": 13, "alloc": 13, "unified_skew_norm": 13, "unifiedskewnorm": 13, "trunc": 13, "gauss": 13, "hasten": 13, "pai": 13, "arg_constraint": 13, "ln": 13, "genz2004bvnt": 13, "rectangular": 13, "trivari": 13, "muthen1990mo": 13, "muthen": 13, "censor": 13, "british": 13, "psychologi": 13, "1990": 13, "bvn": 13, "xl": 13, "yl": 13, "xu": 13, "yu": 13, "flip": 13, "bvnu": 13, "branch": 13, "goe": 13, "finfo": 13, "epsneg": 13, "tini": 13, "situat": 13, "2pi": 13, "int_": 13, "dy": 13, "dx": 13, "2a": 13, "2rxy": 13, "incur": 13, "5e": 13, "doubl": 13, "925": 13, "quadratur": 13, "5th": 13, "taylor": 13, "polar": 13, "bvnmom": 13, "gessner2020": 13, "gessner": 13, "kanjil": 13, "hennig": 13, "optimi": 13, "alpig": 13, "lincongauss": 13, "wjmaddox": 13, "pytorch_ess": 13, "lin_ess": 13, "covariance_root": 13, "clean": 13, "mayb": 13, "crucial": 13, "lie": 13, "invalid": 13, "multivariant": 13, "intersect": 13, "linalg": 13, "block_matrix_concat": 13, "augment_choleski": 13, "laa": 13, "kbb": 13, "kba": 13, "lba": 13, "kaa": 13, "kab": 13, "precomput": 13, "nugget": 13, "tril": 13, "diag": 13, "validate_init": 13, "initvar": 13, "update_": 13, "case_dispatch": 13, "switch": 13, "booltensor": 13, "pred": 13, "mask": 13, "resolv": 13, "serv": 13, "unclaim": 13, "gen_positional_indic": 13, "build_positional_indic": 13, "leggauss": 13, "deg": 13, "ndtr": 13, "log_phi": 13, "log_ndtr": 13, "remedi": 13, "float64": 13, "log_erfc": 13, "complementari": 13, "stabl": 13, "31945": 13, "erfc": 13, "log_prob_normal_in": 13, "permit": 13, "1e100": 13, "1e20": 13, "beyond": 13, "swap_along_dim_": 13, "xception": 13}, "objects": {"botorch": [[0, 0, 0, "-", "acquisition"], [1, 0, 0, "-", "cross_validation"], [2, 0, 0, "-", "exceptions"], [3, 0, 0, "-", "fit"], [4, 0, 0, "-", "generation"], [6, 0, 0, "-", "logging"], [7, 0, 0, "-", "models"], [8, 0, 0, "-", "optim"], [9, 0, 0, "-", "posteriors"], [10, 0, 0, "-", "sampling"], [11, 0, 0, "-", "settings"], [12, 0, 0, "-", "test_functions"], [13, 0, 0, "-", "utils"]], "botorch.acquisition": [[0, 0, 0, "-", "acquisition"], [0, 0, 0, "-", "active_learning"], [0, 0, 0, "-", "analytic"], [0, 0, 0, "-", "cached_cholesky"], [0, 0, 0, "-", "cost_aware"], [0, 0, 0, "-", "fixed_feature"], [0, 0, 0, "-", "input_constructors"], [0, 0, 0, "-", "joint_entropy_search"], [0, 0, 0, "-", "knowledge_gradient"], [0, 0, 0, "-", "max_value_entropy_search"], [0, 0, 0, "-", "monte_carlo"], [0, 0, 0, "-", "multi_step_lookahead"], [0, 0, 0, "-", "objective"], [0, 0, 0, "-", "penalized"], [0, 0, 0, "-", "predictive_entropy_search"], [0, 0, 0, "-", "preference"], [0, 0, 0, "-", "proximal"], [0, 0, 0, "-", "risk_measures"], [0, 0, 0, "-", "utils"]], "botorch.acquisition.active_learning": [[0, 1, 1, "", "PairwiseMCPosteriorVariance"], [0, 1, 1, "", "qNegIntegratedPosteriorVariance"]], "botorch.acquisition.active_learning.PairwiseMCPosteriorVariance": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "objective"], [0, 3, 1, "", "training"]], "botorch.acquisition.active_learning.qNegIntegratedPosteriorVariance": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.analytic": [[0, 1, 1, "", "AnalyticAcquisitionFunction"], [0, 1, 1, "", "ConstrainedExpectedImprovement"], [0, 1, 1, "", "ExpectedImprovement"], [0, 1, 1, "", "LogConstrainedExpectedImprovement"], [0, 1, 1, "", "LogExpectedImprovement"], [0, 1, 1, "", "LogNoisyExpectedImprovement"], [0, 1, 1, "", "LogProbabilityOfImprovement"], [0, 1, 1, "", "NoisyExpectedImprovement"], [0, 1, 1, "", "PosteriorMean"], [0, 1, 1, "", "ProbabilityOfImprovement"], [0, 1, 1, "", "ScalarizedPosteriorMean"], [0, 1, 1, "", "UpperConfidenceBound"], [0, 1, 1, "", "qAnalyticProbabilityOfImprovement"]], "botorch.acquisition.analytic.AnalyticAcquisitionFunction": [[0, 2, 1, "", "set_X_pending"], [0, 3, 1, "", "training"]], "botorch.acquisition.analytic.ConstrainedExpectedImprovement": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.analytic.ExpectedImprovement": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.analytic.LogConstrainedExpectedImprovement": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.analytic.LogExpectedImprovement": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.analytic.LogNoisyExpectedImprovement": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.analytic.LogProbabilityOfImprovement": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.analytic.NoisyExpectedImprovement": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.analytic.PosteriorMean": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.analytic.ProbabilityOfImprovement": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.analytic.ScalarizedPosteriorMean": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.analytic.UpperConfidenceBound": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.analytic.qAnalyticProbabilityOfImprovement": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.cached_cholesky": [[0, 4, 1, "", "supports_cache_root"]], "botorch.acquisition.cost_aware": [[0, 1, 1, "", "GenericCostAwareUtility"], [0, 1, 1, "", "InverseCostWeightedUtility"]], "botorch.acquisition.cost_aware.GenericCostAwareUtility": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "training"]], "botorch.acquisition.cost_aware.InverseCostWeightedUtility": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "training"]], "botorch.acquisition.fixed_feature": [[0, 1, 1, "", "FixedFeatureAcquisitionFunction"]], "botorch.acquisition.fixed_feature.FixedFeatureAcquisitionFunction": [[0, 5, 1, "", "X_pending"], [0, 2, 1, "", "forward"], [0, 3, 1, "", "training"]], "botorch.acquisition.input_constructors": [[0, 4, 1, "", "acqf_input_constructor"], [0, 4, 1, "", "construct_inputs_EHVI"], [0, 4, 1, "", "construct_inputs_analytic_base"], [0, 4, 1, "", "construct_inputs_analytic_eubo"], [0, 4, 1, "", "construct_inputs_best_f"], [0, 4, 1, "", "construct_inputs_constrained_ei"], [0, 4, 1, "", "construct_inputs_mc_base"], [0, 4, 1, "", "construct_inputs_mf_base"], [0, 4, 1, "", "construct_inputs_noisy_ei"], [0, 4, 1, "", "construct_inputs_qEHVI"], [0, 4, 1, "", "construct_inputs_qEI"], [0, 4, 1, "", "construct_inputs_qKG"], [0, 4, 1, "", "construct_inputs_qMES"], [0, 4, 1, "", "construct_inputs_qMFKG"], [0, 4, 1, "", "construct_inputs_qMFMES"], [0, 4, 1, "", "construct_inputs_qNEHVI"], [0, 4, 1, "", "construct_inputs_qNEI"], [0, 4, 1, "", "construct_inputs_qPI"], [0, 4, 1, "", "construct_inputs_qUCB"], [0, 4, 1, "", "construct_inputs_ucb"], [0, 4, 1, "", "get_acqf_input_constructor"], [0, 4, 1, "", "get_best_f_analytic"], [0, 4, 1, "", "get_best_f_mc"], [0, 4, 1, "", "optimize_objective"]], "botorch.acquisition.joint_entropy_search": [[0, 1, 1, "", "qLowerBoundJointEntropySearch"]], "botorch.acquisition.joint_entropy_search.qLowerBoundJointEntropySearch": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.knowledge_gradient": [[0, 1, 1, "", "ProjectedAcquisitionFunction"], [0, 1, 1, "", "qKnowledgeGradient"], [0, 1, 1, "", "qMultiFidelityKnowledgeGradient"]], "botorch.acquisition.knowledge_gradient.ProjectedAcquisitionFunction": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "training"]], "botorch.acquisition.knowledge_gradient.qKnowledgeGradient": [[0, 2, 1, "", "evaluate"], [0, 2, 1, "", "extract_candidates"], [0, 2, 1, "", "forward"], [0, 2, 1, "", "get_augmented_q_batch_size"], [0, 3, 1, "", "model"], [0, 3, 1, "", "objective"], [0, 3, 1, "", "training"]], "botorch.acquisition.knowledge_gradient.qMultiFidelityKnowledgeGradient": [[0, 3, 1, "", "X_pending"], [0, 5, 1, "", "cost_sampler"], [0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "num_fantasies"], [0, 3, 1, "", "objective"], [0, 3, 1, "", "training"]], "botorch.acquisition.max_value_entropy_search": [[0, 1, 1, "", "DiscreteMaxValueBase"], [0, 1, 1, "", "qLowerBoundMaxValueEntropy"], [0, 1, 1, "", "qMaxValueEntropy"], [0, 1, 1, "", "qMultiFidelityLowerBoundMaxValueEntropy"], [0, 1, 1, "", "qMultiFidelityMaxValueEntropy"]], "botorch.acquisition.max_value_entropy_search.DiscreteMaxValueBase": [[0, 3, 1, "", "training"]], "botorch.acquisition.max_value_entropy_search.qLowerBoundMaxValueEntropy": [[0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.max_value_entropy_search.qMaxValueEntropy": [[0, 3, 1, "", "model"], [0, 2, 1, "", "set_X_pending"], [0, 3, 1, "", "training"]], "botorch.acquisition.max_value_entropy_search.qMultiFidelityLowerBoundMaxValueEntropy": [[0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.max_value_entropy_search.qMultiFidelityMaxValueEntropy": [[0, 5, 1, "", "cost_sampler"], [0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.monte_carlo": [[0, 1, 1, "", "MCAcquisitionFunction"], [0, 1, 1, "", "qExpectedImprovement"], [0, 1, 1, "", "qNoisyExpectedImprovement"], [0, 1, 1, "", "qProbabilityOfImprovement"], [0, 1, 1, "", "qSimpleRegret"], [0, 1, 1, "", "qUpperConfidenceBound"]], "botorch.acquisition.monte_carlo.MCAcquisitionFunction": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "training"]], "botorch.acquisition.monte_carlo.qExpectedImprovement": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "objective"], [0, 3, 1, "", "training"]], "botorch.acquisition.monte_carlo.qNoisyExpectedImprovement": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "objective"], [0, 3, 1, "", "training"]], "botorch.acquisition.monte_carlo.qProbabilityOfImprovement": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "objective"], [0, 3, 1, "", "training"]], "botorch.acquisition.monte_carlo.qSimpleRegret": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "objective"], [0, 3, 1, "", "training"]], "botorch.acquisition.monte_carlo.qUpperConfidenceBound": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "objective"], [0, 3, 1, "", "training"]], "botorch.acquisition.multi_objective": [[0, 0, 0, "-", "analytic"], [0, 0, 0, "-", "joint_entropy_search"], [0, 0, 0, "-", "max_value_entropy_search"], [0, 0, 0, "-", "monte_carlo"], [0, 0, 0, "-", "multi_fidelity"], [0, 0, 0, "-", "multi_output_risk_measures"], [0, 0, 0, "-", "objective"], [0, 0, 0, "-", "predictive_entropy_search"], [0, 0, 0, "-", "utils"]], "botorch.acquisition.multi_objective.analytic": [[0, 1, 1, "", "ExpectedHypervolumeImprovement"], [0, 1, 1, "", "MultiObjectiveAnalyticAcquisitionFunction"]], "botorch.acquisition.multi_objective.analytic.ExpectedHypervolumeImprovement": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 2, 1, "", "nu"], [0, 2, 1, "", "psi"], [0, 3, 1, "", "training"]], "botorch.acquisition.multi_objective.analytic.MultiObjectiveAnalyticAcquisitionFunction": [[0, 2, 1, "", "forward"], [0, 2, 1, "", "set_X_pending"], [0, 3, 1, "", "training"]], "botorch.acquisition.multi_objective.joint_entropy_search": [[0, 1, 1, "", "LowerBoundMultiObjectiveEntropySearch"], [0, 1, 1, "", "qLowerBoundMultiObjectiveJointEntropySearch"]], "botorch.acquisition.multi_objective.joint_entropy_search.LowerBoundMultiObjectiveEntropySearch": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "training"]], "botorch.acquisition.multi_objective.joint_entropy_search.qLowerBoundMultiObjectiveJointEntropySearch": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.multi_objective.max_value_entropy_search": [[0, 1, 1, "", "qLowerBoundMultiObjectiveMaxValueEntropySearch"], [0, 1, 1, "", "qMultiObjectiveMaxValueEntropy"]], "botorch.acquisition.multi_objective.max_value_entropy_search.qLowerBoundMultiObjectiveMaxValueEntropySearch": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.multi_objective.max_value_entropy_search.qMultiObjectiveMaxValueEntropy": [[0, 3, 1, "", "_default_sample_shape"], [0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 2, 1, "", "set_X_pending"], [0, 3, 1, "", "training"]], "botorch.acquisition.multi_objective.monte_carlo": [[0, 1, 1, "", "MultiObjectiveMCAcquisitionFunction"], [0, 1, 1, "", "qExpectedHypervolumeImprovement"], [0, 1, 1, "", "qNoisyExpectedHypervolumeImprovement"]], "botorch.acquisition.multi_objective.monte_carlo.MultiObjectiveMCAcquisitionFunction": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "training"]], "botorch.acquisition.multi_objective.monte_carlo.qExpectedHypervolumeImprovement": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.multi_objective.monte_carlo.qNoisyExpectedHypervolumeImprovement": [[0, 5, 1, "", "X_baseline"], [0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 2, 1, "", "set_X_pending"], [0, 3, 1, "", "training"]], "botorch.acquisition.multi_objective.multi_fidelity": [[0, 1, 1, "", "MOMF"]], "botorch.acquisition.multi_objective.multi_fidelity.MOMF": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.multi_objective.multi_output_risk_measures": [[0, 1, 1, "", "IndependentCVaR"], [0, 1, 1, "", "IndependentVaR"], [0, 1, 1, "", "MARS"], [0, 1, 1, "", "MVaR"], [0, 1, 1, "", "MultiOutputExpectation"], [0, 1, 1, "", "MultiOutputWorstCase"]], "botorch.acquisition.multi_objective.multi_output_risk_measures.IndependentCVaR": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.multi_output_risk_measures.IndependentVaR": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.multi_output_risk_measures.MARS": [[0, 5, 1, "", "baseline_Y"], [0, 5, 1, "", "chebyshev_objective"], [0, 5, 1, "", "chebyshev_weights"], [0, 2, 1, "", "set_baseline_Y"]], "botorch.acquisition.multi_objective.multi_output_risk_measures.MVaR": [[0, 2, 1, "", "forward"], [0, 2, 1, "", "get_mvar_set_cpu"], [0, 2, 1, "", "get_mvar_set_gpu"]], "botorch.acquisition.multi_objective.multi_output_risk_measures.MultiOutputExpectation": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.multi_output_risk_measures.MultiOutputWorstCase": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.objective": [[0, 1, 1, "", "AnalyticMultiOutputObjective"], [0, 1, 1, "", "FeasibilityWeightedMCMultiOutputObjective"], [0, 1, 1, "", "GenericMCMultiOutputObjective"], [0, 1, 1, "", "IdentityAnalyticMultiOutputObjective"], [0, 1, 1, "", "IdentityMCMultiOutputObjective"], [0, 1, 1, "", "MCMultiOutputObjective"], [0, 1, 1, "", "UnstandardizeAnalyticMultiOutputObjective"], [0, 1, 1, "", "UnstandardizeMCMultiOutputObjective"], [0, 1, 1, "", "WeightedMCMultiOutputObjective"]], "botorch.acquisition.multi_objective.objective.AnalyticMultiOutputObjective": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "training"]], "botorch.acquisition.multi_objective.objective.FeasibilityWeightedMCMultiOutputObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.objective.IdentityAnalyticMultiOutputObjective": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "training"]], "botorch.acquisition.multi_objective.objective.IdentityMCMultiOutputObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.objective.MCMultiOutputObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.objective.UnstandardizeAnalyticMultiOutputObjective": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "training"]], "botorch.acquisition.multi_objective.objective.UnstandardizeMCMultiOutputObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.objective.WeightedMCMultiOutputObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.multi_objective.predictive_entropy_search": [[0, 4, 1, "", "log_cdf_robust"], [0, 1, 1, "", "qMultiObjectivePredictiveEntropySearch"]], "botorch.acquisition.multi_objective.predictive_entropy_search.qMultiObjectivePredictiveEntropySearch": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "training"]], "botorch.acquisition.multi_objective.utils": [[0, 4, 1, "", "compute_sample_box_decomposition"], [0, 4, 1, "", "get_default_partitioning_alpha"], [0, 4, 1, "", "prune_inferior_points_multi_objective"], [0, 4, 1, "", "random_search_optimizer"], [0, 4, 1, "", "sample_optimal_points"]], "botorch.acquisition.multi_step_lookahead": [[0, 4, 1, "", "make_best_f"], [0, 1, 1, "", "qMultiStepLookahead"], [0, 4, 1, "", "warmstart_multistep"]], "botorch.acquisition.multi_step_lookahead.qMultiStepLookahead": [[0, 2, 1, "", "extract_candidates"], [0, 2, 1, "", "forward"], [0, 2, 1, "", "get_augmented_q_batch_size"], [0, 2, 1, "", "get_induced_fantasy_model"], [0, 2, 1, "", "get_multi_step_tree_input_representation"], [0, 2, 1, "", "get_split_shapes"], [0, 3, 1, "", "model"], [0, 3, 1, "", "objective"], [0, 3, 1, "", "training"]], "botorch.acquisition.objective": [[0, 1, 1, "", "ConstrainedMCObjective"], [0, 1, 1, "", "ExpectationPosteriorTransform"], [0, 1, 1, "", "GenericMCObjective"], [0, 1, 1, "", "IdentityMCObjective"], [0, 1, 1, "", "LearnedObjective"], [0, 1, 1, "", "LinearMCObjective"], [0, 1, 1, "", "ScalarizedObjective"], [0, 1, 1, "", "ScalarizedPosteriorTransform"]], "botorch.acquisition.objective.ConstrainedMCObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.objective.ExpectationPosteriorTransform": [[0, 2, 1, "", "evaluate"], [0, 2, 1, "", "forward"], [0, 3, 1, "", "training"]], "botorch.acquisition.objective.GenericMCObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.objective.IdentityMCObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.objective.LearnedObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.objective.LinearMCObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.objective.ScalarizedObjective": [[0, 3, 1, "", "training"]], "botorch.acquisition.objective.ScalarizedPosteriorTransform": [[0, 2, 1, "", "evaluate"], [0, 2, 1, "", "forward"], [0, 3, 1, "", "scalarize"]], "botorch.acquisition.penalized": [[0, 1, 1, "", "GaussianPenalty"], [0, 1, 1, "", "GroupLassoPenalty"], [0, 1, 1, "", "L1Penalty"], [0, 1, 1, "", "L1PenaltyObjective"], [0, 1, 1, "", "L2Penalty"], [0, 1, 1, "", "PenalizedAcquisitionFunction"], [0, 1, 1, "", "PenalizedMCObjective"], [0, 4, 1, "", "group_lasso_regularizer"]], "botorch.acquisition.penalized.GaussianPenalty": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "training"]], "botorch.acquisition.penalized.GroupLassoPenalty": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "training"]], "botorch.acquisition.penalized.L1Penalty": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "training"]], "botorch.acquisition.penalized.L1PenaltyObjective": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "training"]], "botorch.acquisition.penalized.L2Penalty": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "training"]], "botorch.acquisition.penalized.PenalizedAcquisitionFunction": [[0, 5, 1, "", "X_pending"], [0, 2, 1, "", "forward"], [0, 2, 1, "", "set_X_pending"], [0, 3, 1, "", "training"]], "botorch.acquisition.penalized.PenalizedMCObjective": [[0, 2, 1, "", "forward"]], "botorch.acquisition.predictive_entropy_search": [[0, 1, 1, "", "qPredictiveEntropySearch"]], "botorch.acquisition.predictive_entropy_search.qPredictiveEntropySearch": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.preference": [[0, 1, 1, "", "AnalyticExpectedUtilityOfBestOption"]], "botorch.acquisition.preference.AnalyticExpectedUtilityOfBestOption": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "model"], [0, 3, 1, "", "training"]], "botorch.acquisition.proximal": [[0, 1, 1, "", "ProximalAcquisitionFunction"]], "botorch.acquisition.proximal.ProximalAcquisitionFunction": [[0, 2, 1, "", "forward"], [0, 3, 1, "", "training"]], "botorch.acquisition.risk_measures": [[0, 1, 1, "", "CVaR"], [0, 1, 1, "", "Expectation"], [0, 1, 1, "", "VaR"], [0, 1, 1, "", "WorstCase"]], "botorch.acquisition.risk_measures.CVaR": [[0, 2, 1, "", "forward"]], "botorch.acquisition.risk_measures.Expectation": [[0, 2, 1, "", "forward"]], "botorch.acquisition.risk_measures.VaR": [[0, 2, 1, "", "forward"]], "botorch.acquisition.risk_measures.WorstCase": [[0, 2, 1, "", "forward"]], "botorch.acquisition.utils": [[0, 4, 1, "", "expand_trace_observations"], [0, 4, 1, "", "get_acquisition_function"], [0, 4, 1, "", "get_infeasible_cost"], [0, 4, 1, "", "is_nonnegative"], [0, 4, 1, "", "project_to_sample_points"], [0, 4, 1, "", "project_to_target_fidelity"], [0, 4, 1, "", "prune_inferior_points"]], "botorch.cross_validation": [[1, 1, 1, "", "CVFolds"], [1, 1, 1, "", "CVResults"], [1, 4, 1, "", "batch_cross_validation"], [1, 4, 1, "", "gen_loo_cv_folds"]], "botorch.cross_validation.CVFolds": [[1, 3, 1, "", "test_X"], [1, 3, 1, "", "test_Y"], [1, 3, 1, "", "test_Yvar"], [1, 3, 1, "", "train_X"], [1, 3, 1, "", "train_Y"], [1, 3, 1, "", "train_Yvar"]], "botorch.cross_validation.CVResults": [[1, 3, 1, "", "model"], [1, 3, 1, "", "observed_Y"], [1, 3, 1, "", "observed_Yvar"], [1, 3, 1, "", "posterior"]], "botorch.exceptions": [[2, 0, 0, "-", "errors"], [2, 0, 0, "-", "warnings"]], "botorch.exceptions.errors": [[2, 6, 1, "", "BotorchError"], [2, 6, 1, "", "BotorchTensorDimensionError"], [2, 6, 1, "", "CandidateGenerationError"], [2, 6, 1, "", "InputDataError"], [2, 6, 1, "", "ModelFittingError"], [2, 6, 1, "", "OptimizationTimeoutError"], [2, 6, 1, "", "UnsupportedError"]], "botorch.exceptions.warnings": [[2, 6, 1, "", "BadInitialCandidatesWarning"], [2, 6, 1, "", "BotorchTensorDimensionWarning"], [2, 6, 1, "", "BotorchWarning"], [2, 6, 1, "", "CostAwareWarning"], [2, 6, 1, "", "InputDataWarning"], [2, 6, 1, "", "OptimizationWarning"], [2, 6, 1, "", "SamplingWarning"]], "botorch.fit": [[3, 4, 1, "", "fit_fully_bayesian_model_nuts"], [3, 4, 1, "", "fit_gpytorch_mll"], [3, 4, 1, "", "fit_gpytorch_model"]], "botorch.generation": [[4, 0, 0, "-", "gen"], [4, 0, 0, "-", "sampling"], [4, 0, 0, "-", "utils"]], "botorch.generation.gen": [[4, 4, 1, "", "gen_candidates_scipy"], [4, 4, 1, "", "gen_candidates_torch"], [4, 4, 1, "", "get_best_candidates"], [4, 4, 1, "", "minimize"]], "botorch.generation.sampling": [[4, 1, 1, "", "BoltzmannSampling"], [4, 1, 1, "", "ConstrainedMaxPosteriorSampling"], [4, 1, 1, "", "MaxPosteriorSampling"]], "botorch.generation.sampling.BoltzmannSampling": [[4, 2, 1, "", "forward"], [4, 3, 1, "", "training"]], "botorch.generation.sampling.ConstrainedMaxPosteriorSampling": [[4, 2, 1, "", "forward"], [4, 3, 1, "", "training"]], "botorch.generation.sampling.MaxPosteriorSampling": [[4, 2, 1, "", "forward"], [4, 2, 1, "", "maximize_samples"], [4, 3, 1, "", "training"]], "botorch.models": [[7, 0, 0, "-", "approximate_gp"], [7, 0, 0, "-", "contextual"], [7, 0, 0, "-", "contextual_multioutput"], [7, 0, 0, "-", "converter"], [7, 0, 0, "-", "cost"], [7, 0, 0, "-", "deterministic"], [7, 0, 0, "-", "ensemble"], [7, 0, 0, "-", "fully_bayesian"], [7, 0, 0, "-", "fully_bayesian_multitask"], [7, 0, 0, "-", "gp_regression"], [7, 0, 0, "-", "gp_regression_fidelity"], [7, 0, 0, "-", "gp_regression_mixed"], [7, 0, 0, "-", "gpytorch"], [7, 0, 0, "-", "higher_order_gp"], [7, 0, 0, "-", "model"], [7, 0, 0, "-", "model_list_gp_regression"], [7, 0, 0, "-", "multitask"], [7, 0, 0, "-", "pairwise_gp"]], "botorch.models.approximate_gp": [[7, 1, 1, "", "ApproximateGPyTorchModel"], [7, 1, 1, "", "SingleTaskVariationalGP"]], "botorch.models.approximate_gp.ApproximateGPyTorchModel": [[7, 2, 1, "", "forward"], [7, 3, 1, "", "likelihood"], [7, 5, 1, "", "num_outputs"], [7, 2, 1, "", "posterior"]], "botorch.models.approximate_gp.SingleTaskVariationalGP": [[7, 2, 1, "", "init_inducing_points"], [7, 3, 1, "", "likelihood"], [7, 3, 1, "", "training"]], "botorch.models.contextual": [[7, 1, 1, "", "LCEAGP"], [7, 1, 1, "", "SACGP"]], "botorch.models.contextual_multioutput": [[7, 1, 1, "", "FixedNoiseLCEMGP"], [7, 1, 1, "", "LCEMGP"]], "botorch.models.contextual_multioutput.FixedNoiseLCEMGP": [[7, 3, 1, "", "likelihood"], [7, 3, 1, "", "training"]], "botorch.models.contextual_multioutput.LCEMGP": [[7, 2, 1, "", "forward"], [7, 3, 1, "", "likelihood"], [7, 2, 1, "", "task_covar_matrix"], [7, 3, 1, "", "training"]], "botorch.models.converter": [[7, 4, 1, "", "batched_multi_output_to_single_output"], [7, 4, 1, "", "batched_to_model_list"], [7, 4, 1, "", "get_attribute"], [7, 4, 1, "", "model_list_to_batched"], [7, 4, 1, "", "set_attribute"]], "botorch.models.cost": [[7, 1, 1, "", "AffineFidelityCostModel"]], "botorch.models.cost.AffineFidelityCostModel": [[7, 2, 1, "", "forward"]], "botorch.models.deterministic": [[7, 1, 1, "", "AffineDeterministicModel"], [7, 1, 1, "", "FixedSingleSampleModel"], [7, 1, 1, "", "GenericDeterministicModel"], [7, 1, 1, "", "PosteriorMeanModel"]], "botorch.models.deterministic.AffineDeterministicModel": [[7, 2, 1, "", "forward"], [7, 2, 1, "", "subset_output"]], "botorch.models.deterministic.FixedSingleSampleModel": [[7, 2, 1, "", "forward"]], "botorch.models.deterministic.GenericDeterministicModel": [[7, 2, 1, "", "forward"], [7, 2, 1, "", "subset_output"]], "botorch.models.deterministic.PosteriorMeanModel": [[7, 2, 1, "", "forward"]], "botorch.models.fully_bayesian": [[7, 1, 1, "", "SaasFullyBayesianSingleTaskGP"], [7, 1, 1, "", "SaasPyroModel"], [7, 4, 1, "", "compute_dists"], [7, 4, 1, "", "matern52_kernel"], [7, 4, 1, "", "reshape_and_detach"]], "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP": [[7, 5, 1, "", "batch_shape"], [7, 2, 1, "", "forward"], [7, 2, 1, "", "load_mcmc_samples"], [7, 2, 1, "", "load_state_dict"], [7, 5, 1, "", "median_lengthscale"], [7, 5, 1, "", "num_mcmc_samples"], [7, 2, 1, "", "posterior"], [7, 2, 1, "", "train"]], "botorch.models.fully_bayesian.SaasPyroModel": [[7, 2, 1, "", "load_mcmc_samples"], [7, 2, 1, "", "postprocess_mcmc_samples"], [7, 2, 1, "", "sample"], [7, 2, 1, "", "sample_lengthscale"], [7, 2, 1, "", "sample_mean"], [7, 2, 1, "", "sample_noise"], [7, 2, 1, "", "sample_outputscale"], [7, 2, 1, "", "set_inputs"]], "botorch.models.fully_bayesian_multitask": [[7, 1, 1, "", "MultitaskSaasPyroModel"], [7, 1, 1, "", "SaasFullyBayesianMultiTaskGP"]], "botorch.models.fully_bayesian_multitask.MultitaskSaasPyroModel": [[7, 2, 1, "", "load_mcmc_samples"], [7, 2, 1, "", "sample"], [7, 2, 1, "", "sample_latent_features"], [7, 2, 1, "", "sample_task_lengthscale"], [7, 2, 1, "", "set_inputs"]], "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP": [[7, 5, 1, "", "batch_shape"], [7, 2, 1, "", "construct_inputs"], [7, 2, 1, "", "fantasize"], [7, 2, 1, "", "forward"], [7, 3, 1, "", "likelihood"], [7, 2, 1, "", "load_mcmc_samples"], [7, 5, 1, "", "median_lengthscale"], [7, 5, 1, "", "num_mcmc_samples"], [7, 2, 1, "", "posterior"], [7, 2, 1, "", "train"], [7, 3, 1, "", "training"]], "botorch.models.gp_regression": [[7, 1, 1, "", "FixedNoiseGP"], [7, 1, 1, "", "HeteroskedasticSingleTaskGP"], [7, 1, 1, "", "SingleTaskGP"]], "botorch.models.gp_regression.FixedNoiseGP": [[7, 2, 1, "", "fantasize"], [7, 2, 1, "", "forward"], [7, 2, 1, "", "subset_output"]], "botorch.models.gp_regression.HeteroskedasticSingleTaskGP": [[7, 2, 1, "", "condition_on_observations"], [7, 2, 1, "", "forward"], [7, 2, 1, "", "subset_output"]], "botorch.models.gp_regression.SingleTaskGP": [[7, 2, 1, "", "forward"]], "botorch.models.gp_regression_fidelity": [[7, 1, 1, "", "FixedNoiseMultiFidelityGP"], [7, 1, 1, "", "SingleTaskMultiFidelityGP"]], "botorch.models.gp_regression_fidelity.FixedNoiseMultiFidelityGP": [[7, 2, 1, "", "construct_inputs"]], "botorch.models.gp_regression_fidelity.SingleTaskMultiFidelityGP": [[7, 2, 1, "", "construct_inputs"]], "botorch.models.gp_regression_mixed": [[7, 1, 1, "", "MixedSingleTaskGP"]], "botorch.models.gp_regression_mixed.MixedSingleTaskGP": [[7, 2, 1, "", "construct_inputs"]], "botorch.models.higher_order_gp": [[7, 1, 1, "", "FlattenedStandardize"], [7, 1, 1, "", "HigherOrderGP"]], "botorch.models.higher_order_gp.FlattenedStandardize": [[7, 2, 1, "", "forward"], [7, 3, 1, "", "training"], [7, 2, 1, "", "untransform"], [7, 2, 1, "", "untransform_posterior"]], "botorch.models.higher_order_gp.HigherOrderGP": [[7, 2, 1, "", "condition_on_observations"], [7, 2, 1, "", "forward"], [7, 2, 1, "", "get_fantasy_model"], [7, 2, 1, "", "make_posterior_variances"], [7, 2, 1, "", "posterior"]], "botorch.models.kernels": [[7, 0, 0, "-", "categorical"], [7, 0, 0, "-", "contextual_lcea"], [7, 0, 0, "-", "contextual_sac"], [7, 0, 0, "-", "downsampling"], [7, 0, 0, "-", "exponential_decay"], [7, 0, 0, "-", "linear_truncated_fidelity"]], "botorch.models.kernels.categorical": [[7, 1, 1, "", "CategoricalKernel"]], "botorch.models.kernels.contextual_lcea": [[7, 1, 1, "", "LCEAKernel"]], "botorch.models.kernels.contextual_sac": [[7, 1, 1, "", "SACKernel"]], "botorch.models.kernels.downsampling": [[7, 1, 1, "", "DownsamplingKernel"]], "botorch.models.kernels.exponential_decay": [[7, 1, 1, "", "ExponentialDecayKernel"]], "botorch.models.kernels.linear_truncated_fidelity": [[7, 1, 1, "", "LinearTruncatedFidelityKernel"]], "botorch.models.likelihoods": [[7, 0, 0, "-", "pairwise"]], "botorch.models.likelihoods.pairwise": [[7, 1, 1, "", "PairwiseLogitLikelihood"], [7, 1, 1, "", "PairwiseProbitLikelihood"]], "botorch.models.likelihoods.pairwise.PairwiseLogitLikelihood": [[7, 2, 1, "", "log_p"], [7, 2, 1, "", "negative_log_gradient_sum"], [7, 2, 1, "", "negative_log_hessian_sum"], [7, 2, 1, "", "p"]], "botorch.models.likelihoods.pairwise.PairwiseProbitLikelihood": [[7, 2, 1, "", "negative_log_gradient_sum"], [7, 2, 1, "", "negative_log_hessian_sum"], [7, 2, 1, "", "p"]], "botorch.models.model": [[7, 1, 1, "", "FantasizeMixin"], [7, 1, 1, "", "Model"], [7, 1, 1, "", "ModelDict"], [7, 1, 1, "", "ModelList"]], "botorch.models.model.FantasizeMixin": [[7, 2, 1, "", "condition_on_observations"], [7, 2, 1, "", "fantasize"], [7, 2, 1, "", "posterior"], [7, 2, 1, "", "transform_inputs"]], "botorch.models.model.Model": [[7, 5, 1, "", "batch_shape"], [7, 2, 1, "", "condition_on_observations"], [7, 2, 1, "", "construct_inputs"], [7, 2, 1, "", "eval"], [7, 5, 1, "", "num_outputs"], [7, 2, 1, "", "posterior"], [7, 2, 1, "", "subset_output"], [7, 2, 1, "", "train"], [7, 2, 1, "", "transform_inputs"]], "botorch.models.model.ModelList": [[7, 5, 1, "", "batch_shape"], [7, 2, 1, "", "load_state_dict"], [7, 5, 1, "", "num_outputs"], [7, 2, 1, "", "posterior"], [7, 2, 1, "", "subset_output"], [7, 2, 1, "", "transform_inputs"]], "botorch.models.model_list_gp_regression": [[7, 1, 1, "", "ModelListGP"]], "botorch.models.model_list_gp_regression.ModelListGP": [[7, 2, 1, "", "condition_on_observations"], [7, 3, 1, "", "likelihood"], [7, 2, 1, "", "subset_output"]], "botorch.models.multitask": [[7, 1, 1, "", "FixedNoiseMultiTaskGP"], [7, 1, 1, "", "KroneckerMultiTaskGP"], [7, 1, 1, "", "MultiTaskGP"]], "botorch.models.multitask.FixedNoiseMultiTaskGP": [[7, 3, 1, "", "likelihood"], [7, 3, 1, "", "training"]], "botorch.models.multitask.KroneckerMultiTaskGP": [[7, 2, 1, "", "forward"], [7, 3, 1, "", "likelihood"], [7, 2, 1, "", "posterior"], [7, 5, 1, "", "predictive_mean_cache"], [7, 2, 1, "", "train"], [7, 5, 1, "", "train_full_covar"]], "botorch.models.multitask.MultiTaskGP": [[7, 2, 1, "", "construct_inputs"], [7, 2, 1, "", "forward"], [7, 2, 1, "", "get_all_tasks"], [7, 3, 1, "", "likelihood"]], "botorch.models.pairwise_gp": [[7, 1, 1, "", "PairwiseGP"], [7, 1, 1, "", "PairwiseLaplaceMarginalLogLikelihood"]], "botorch.models.pairwise_gp.PairwiseGP": [[7, 5, 1, "", "batch_shape"], [7, 2, 1, "", "condition_on_observations"], [7, 2, 1, "", "forward"], [7, 2, 1, "", "load_state_dict"], [7, 5, 1, "", "num_outputs"], [7, 2, 1, "", "posterior"], [7, 2, 1, "", "set_train_data"]], "botorch.models.pairwise_gp.PairwiseLaplaceMarginalLogLikelihood": [[7, 2, 1, "", "forward"], [7, 3, 1, "", "training"]], "botorch.models.transforms": [[7, 0, 0, "-", "factory"], [7, 0, 0, "-", "input"], [7, 0, 0, "-", "outcome"], [7, 0, 0, "-", "utils"]], "botorch.models.transforms.factory": [[7, 4, 1, "", "get_rounding_input_transform"]], "botorch.models.transforms.input": [[7, 1, 1, "", "AppendFeatures"], [7, 1, 1, "", "ChainedInputTransform"], [7, 1, 1, "", "FilterFeatures"], [7, 1, 1, "", "InputPerturbation"], [7, 1, 1, "", "InputStandardize"], [7, 1, 1, "", "Log10"], [7, 1, 1, "", "Normalize"], [7, 1, 1, "", "OneHotToNumeric"], [7, 1, 1, "", "Round"], [7, 1, 1, "", "Warp"]], "botorch.models.transforms.input.AppendFeatures": [[7, 3, 1, "", "is_one_to_many"], [7, 2, 1, "", "transform"]], "botorch.models.transforms.input.ChainedInputTransform": [[7, 2, 1, "", "equals"], [7, 2, 1, "", "preprocess_transform"], [7, 2, 1, "", "transform"], [7, 3, 1, "", "transform_on_eval"], [7, 3, 1, "", "transform_on_fantasize"], [7, 3, 1, "", "transform_on_train"], [7, 2, 1, "", "untransform"]], "botorch.models.transforms.input.FilterFeatures": [[7, 2, 1, "", "equals"], [7, 2, 1, "", "transform"], [7, 3, 1, "", "transform_on_eval"], [7, 3, 1, "", "transform_on_fantasize"], [7, 3, 1, "", "transform_on_train"]], "botorch.models.transforms.input.InputPerturbation": [[7, 5, 1, "", "batch_shape"], [7, 3, 1, "", "is_one_to_many"], [7, 2, 1, "", "transform"]], "botorch.models.transforms.input.InputStandardize": [[7, 5, 1, "", "means"], [7, 3, 1, "", "reverse"], [7, 5, 1, "", "stds"]], "botorch.models.transforms.input.Log10": [[7, 3, 1, "", "reverse"]], "botorch.models.transforms.input.Normalize": [[7, 5, 1, "", "bounds"], [7, 5, 1, "", "learn_bounds"], [7, 5, 1, "", "mins"], [7, 5, 1, "", "ranges"], [7, 3, 1, "", "reverse"]], "botorch.models.transforms.input.OneHotToNumeric": [[7, 2, 1, "", "equals"], [7, 2, 1, "", "transform"], [7, 3, 1, "", "transform_on_eval"], [7, 3, 1, "", "transform_on_fantasize"], [7, 3, 1, "", "transform_on_train"], [7, 2, 1, "", "untransform"]], "botorch.models.transforms.input.Round": [[7, 2, 1, "", "equals"], [7, 2, 1, "", "transform"], [7, 3, 1, "", "transform_on_eval"], [7, 3, 1, "", "transform_on_fantasize"], [7, 3, 1, "", "transform_on_train"]], "botorch.models.transforms.input.Warp": [[7, 3, 1, "", "reverse"]], "botorch.models.transforms.outcome": [[7, 1, 1, "", "Bilog"], [7, 1, 1, "", "ChainedOutcomeTransform"], [7, 1, 1, "", "Log"], [7, 1, 1, "", "Power"], [7, 1, 1, "", "Standardize"]], "botorch.models.transforms.outcome.Bilog": [[7, 2, 1, "", "forward"], [7, 2, 1, "", "subset_output"], [7, 3, 1, "", "training"], [7, 2, 1, "", "untransform"], [7, 2, 1, "", "untransform_posterior"]], "botorch.models.transforms.outcome.ChainedOutcomeTransform": [[7, 2, 1, "", "forward"], [7, 2, 1, "", "subset_output"], [7, 2, 1, "", "untransform"], [7, 2, 1, "", "untransform_posterior"]], "botorch.models.transforms.outcome.Log": [[7, 2, 1, "", "forward"], [7, 2, 1, "", "subset_output"], [7, 3, 1, "", "training"], [7, 2, 1, "", "untransform"], [7, 2, 1, "", "untransform_posterior"]], "botorch.models.transforms.outcome.Power": [[7, 2, 1, "", "forward"], [7, 2, 1, "", "subset_output"], [7, 3, 1, "", "training"], [7, 2, 1, "", "untransform"], [7, 2, 1, "", "untransform_posterior"]], "botorch.models.transforms.outcome.Standardize": [[7, 2, 1, "", "forward"], [7, 2, 1, "", "subset_output"], [7, 3, 1, "", "training"], [7, 2, 1, "", "untransform"], [7, 2, 1, "", "untransform_posterior"]], "botorch.models.transforms.utils": [[7, 4, 1, "", "expand_and_copy_tensor"], [7, 4, 1, "", "lognorm_to_norm"], [7, 4, 1, "", "norm_to_lognorm"], [7, 4, 1, "", "norm_to_lognorm_mean"], [7, 4, 1, "", "norm_to_lognorm_variance"], [7, 4, 1, "", "subset_transform"]], "botorch.models.utils": [[7, 0, 0, "-", "assorted"], [7, 0, 0, "-", "inducing_point_allocators"], [7, 0, 0, "-", "parse_training_data"]], "botorch.models.utils.assorted": [[7, 4, 1, "", "add_output_dim"], [7, 4, 1, "", "check_min_max_scaling"], [7, 4, 1, "", "check_no_nans"], [7, 4, 1, "", "check_standardization"], [7, 1, 1, "", "fantasize"], [7, 4, 1, "", "gpt_posterior_settings"], [7, 4, 1, "", "mod_batch_shape"], [7, 4, 1, "", "multioutput_to_batch_mode_transform"], [7, 4, 1, "", "validate_input_scaling"]], "botorch.models.utils.inducing_point_allocators": [[7, 1, 1, "", "ExpectedImprovementQualityFunction"], [7, 1, 1, "", "GreedyImprovementReduction"], [7, 1, 1, "", "GreedyVarianceReduction"], [7, 1, 1, "", "InducingPointAllocator"], [7, 1, 1, "", "QualityFunction"], [7, 1, 1, "", "UnitQualityFunction"], [7, 4, 1, "", "_pivoted_cholesky_init"]], "botorch.models.utils.inducing_point_allocators.InducingPointAllocator": [[7, 2, 1, "", "allocate_inducing_points"]], "botorch.models.utils.parse_training_data": [[7, 4, 1, "", "parse_training_data"]], "botorch.optim.closures": [[8, 0, 0, "-", "core"], [8, 0, 0, "-", "model_closures"]], "botorch.optim.closures.core": [[8, 1, 1, "", "ForwardBackwardClosure"], [8, 1, 1, "", "NdarrayOptimizationClosure"]], "botorch.optim.closures.core.NdarrayOptimizationClosure": [[8, 5, 1, "", "state"]], "botorch.optim.closures.model_closures": [[8, 4, 1, "", "get_loss_closure"], [8, 4, 1, "", "get_loss_closure_with_grads"]], "botorch.optim": [[8, 0, 0, "-", "core"], [8, 0, 0, "-", "fit"], [8, 0, 0, "-", "initializers"], [8, 0, 0, "-", "numpy_converter"], [8, 0, 0, "-", "optimize"], [8, 0, 0, "-", "parameter_constraints"], [8, 0, 0, "-", "stopping"]], "botorch.optim.core": [[8, 1, 1, "", "OptimizationResult"], [8, 1, 1, "", "OptimizationStatus"], [8, 4, 1, "", "scipy_minimize"], [8, 4, 1, "", "torch_minimize"]], "botorch.optim.core.OptimizationResult": [[8, 3, 1, "", "fval"], [8, 3, 1, "", "message"], [8, 3, 1, "", "runtime"], [8, 3, 1, "", "status"], [8, 3, 1, "", "step"]], "botorch.optim.core.OptimizationStatus": [[8, 3, 1, "", "FAILURE"], [8, 3, 1, "", "RUNNING"], [8, 3, 1, "", "STOPPED"], [8, 3, 1, "", "SUCCESS"]], "botorch.optim.fit": [[8, 4, 1, "", "fit_gpytorch_mll_scipy"], [8, 4, 1, "", "fit_gpytorch_mll_torch"], [8, 4, 1, "", "fit_gpytorch_scipy"], [8, 4, 1, "", "fit_gpytorch_torch"]], "botorch.optim.initializers": [[8, 4, 1, "", "gen_batch_initial_conditions"], [8, 4, 1, "", "gen_one_shot_kg_initial_conditions"], [8, 4, 1, "", "gen_value_function_initial_conditions"], [8, 4, 1, "", "initialize_q_batch"], [8, 4, 1, "", "initialize_q_batch_nonneg"], [8, 4, 1, "", "sample_perturbed_subset_dims"], [8, 4, 1, "", "sample_points_around_best"], [8, 4, 1, "", "sample_truncated_normal_perturbations"]], "botorch.optim.numpy_converter": [[8, 4, 1, "", "module_to_array"], [8, 4, 1, "", "set_params_with_array"]], "botorch.optim.optimize": [[8, 1, 1, "", "OptimizeAcqfInputs"], [8, 4, 1, "", "optimize_acqf"], [8, 4, 1, "", "optimize_acqf_cyclic"], [8, 4, 1, "", "optimize_acqf_discrete"], [8, 4, 1, "", "optimize_acqf_discrete_local_search"], [8, 4, 1, "", "optimize_acqf_list"], [8, 4, 1, "", "optimize_acqf_mixed"]], "botorch.optim.optimize.OptimizeAcqfInputs": [[8, 3, 1, "", "acq_function"], [8, 3, 1, "", "batch_initial_conditions"], [8, 3, 1, "", "bounds"], [8, 3, 1, "", "equality_constraints"], [8, 3, 1, "", "fixed_features"], [8, 5, 1, "", "full_tree"], [8, 3, 1, "", "gen_candidates"], [8, 2, 1, "", "get_ic_generator"], [8, 3, 1, "", "ic_gen_kwargs"], [8, 3, 1, "", "ic_generator"], [8, 3, 1, "", "inequality_constraints"], [8, 3, 1, "", "nonlinear_inequality_constraints"], [8, 3, 1, "", "num_restarts"], [8, 3, 1, "", "options"], [8, 3, 1, "", "post_processing_func"], [8, 3, 1, "", "q"], [8, 3, 1, "", "raw_samples"], [8, 3, 1, "", "retry_on_optimization_warning"], [8, 3, 1, "", "return_best_only"], [8, 3, 1, "", "return_full_tree"], [8, 3, 1, "", "sequential"], [8, 3, 1, "", "timeout_sec"]], "botorch.optim.parameter_constraints": [[8, 4, 1, "", "eval_lin_constraint"], [8, 4, 1, "", "lin_constraint_jac"], [8, 4, 1, "", "make_scipy_bounds"], [8, 4, 1, "", "make_scipy_linear_constraints"], [8, 4, 1, "", "make_scipy_nonlinear_inequality_constraints"]], "botorch.optim.stopping": [[8, 1, 1, "", "ExpMAStoppingCriterion"]], "botorch.optim.stopping.ExpMAStoppingCriterion": [[8, 2, 1, "", "evaluate"]], "botorch.optim.utils": [[8, 0, 0, "-", "acquisition_utils"], [8, 0, 0, "-", "common"], [8, 0, 0, "-", "model_utils"], [8, 0, 0, "-", "numpy_utils"], [8, 0, 0, "-", "timeout"]], "botorch.optim.utils.acquisition_utils": [[8, 4, 1, "", "columnwise_clamp"], [8, 4, 1, "", "fix_features"], [8, 4, 1, "", "get_X_baseline"]], "botorch.optim.utils.model_utils": [[8, 1, 1, "", "TorchAttr"], [8, 4, 1, "", "get_data_loader"], [8, 4, 1, "", "get_name_filter"], [8, 4, 1, "", "get_parameters"], [8, 4, 1, "", "get_parameters_and_bounds"], [8, 4, 1, "", "sample_all_priors"]], "botorch.optim.utils.model_utils.TorchAttr": [[8, 3, 1, "", "device"], [8, 3, 1, "", "dtype"], [8, 3, 1, "", "shape"]], "botorch.optim.utils.numpy_utils": [[8, 4, 1, "", "as_ndarray"], [8, 4, 1, "", "get_bounds_as_ndarray"], [8, 4, 1, "", "get_tensors_as_ndarray_1d"], [8, 4, 1, "", "set_tensors_from_ndarray_1d"]], "botorch.optim.utils.timeout": [[8, 4, 1, "", "minimize_with_timeout"]], "botorch.posteriors": [[9, 0, 0, "-", "base_samples"], [9, 0, 0, "-", "deterministic"], [9, 0, 0, "-", "ensemble"], [9, 0, 0, "-", "fully_bayesian"], [9, 0, 0, "-", "gpytorch"], [9, 0, 0, "-", "higher_order"], [9, 0, 0, "-", "multitask"], [9, 0, 0, "-", "posterior"], [9, 0, 0, "-", "posterior_list"], [9, 0, 0, "-", "torch"], [9, 0, 0, "-", "transformed"]], "botorch.posteriors.deterministic": [[9, 1, 1, "", "DeterministicPosterior"]], "botorch.posteriors.deterministic.DeterministicPosterior": [[9, 5, 1, "", "device"], [9, 5, 1, "", "dtype"], [9, 5, 1, "", "mean"], [9, 2, 1, "", "rsample"], [9, 5, 1, "", "variance"]], "botorch.posteriors.ensemble": [[9, 1, 1, "", "EnsemblePosterior"]], "botorch.posteriors.ensemble.EnsemblePosterior": [[9, 5, 1, "", "device"], [9, 5, 1, "", "dtype"], [9, 5, 1, "", "ensemble_size"], [9, 5, 1, "", "mean"], [9, 2, 1, "", "rsample"], [9, 2, 1, "", "rsample_from_base_samples"], [9, 5, 1, "", "variance"], [9, 5, 1, "", "weights"]], "botorch.posteriors.fully_bayesian": [[9, 1, 1, "", "FullyBayesianPosterior"], [9, 4, 1, "", "batched_bisect"]], "botorch.posteriors.fully_bayesian.FullyBayesianPosterior": [[9, 5, 1, "", "batch_range"], [9, 3, 1, "", "distribution"], [9, 5, 1, "", "mixture_mean"], [9, 5, 1, "", "mixture_variance"], [9, 2, 1, "", "quantile"]], "botorch.posteriors.gpytorch": [[9, 1, 1, "", "GPyTorchPosterior"], [9, 4, 1, "", "scalarize_posterior"], [9, 4, 1, "", "scalarize_posterior_gpytorch"]], "botorch.posteriors.gpytorch.GPyTorchPosterior": [[9, 5, 1, "", "base_sample_shape"], [9, 5, 1, "", "batch_range"], [9, 2, 1, "", "density"], [9, 3, 1, "", "distribution"], [9, 5, 1, "", "mean"], [9, 5, 1, "", "mvn"], [9, 2, 1, "", "quantile"], [9, 2, 1, "", "rsample"], [9, 2, 1, "", "rsample_from_base_samples"], [9, 2, 1, "", "sample"], [9, 5, 1, "", "variance"]], "botorch.posteriors.higher_order": [[9, 1, 1, "", "HigherOrderGPPosterior"]], "botorch.posteriors.higher_order.HigherOrderGPPosterior": [[9, 5, 1, "", "base_sample_shape"], [9, 5, 1, "", "batch_range"], [9, 3, 1, "", "distribution"], [9, 2, 1, "", "rsample"], [9, 2, 1, "", "rsample_from_base_samples"]], "botorch.posteriors.multitask": [[9, 1, 1, "", "MultitaskGPPosterior"]], "botorch.posteriors.multitask.MultitaskGPPosterior": [[9, 5, 1, "", "base_sample_shape"], [9, 5, 1, "", "batch_range"], [9, 3, 1, "", "distribution"], [9, 2, 1, "", "rsample"], [9, 2, 1, "", "rsample_from_base_samples"]], "botorch.posteriors.posterior_list": [[9, 1, 1, "", "PosteriorList"]], "botorch.posteriors.posterior_list.PosteriorList": [[9, 5, 1, "", "device"], [9, 5, 1, "", "dtype"], [9, 5, 1, "", "mean"], [9, 2, 1, "", "rsample"], [9, 5, 1, "", "variance"]], "botorch.posteriors.torch": [[9, 1, 1, "", "TorchPosterior"]], "botorch.posteriors.torch.TorchPosterior": [[9, 2, 1, "", "density"], [9, 5, 1, "", "device"], [9, 5, 1, "", "dtype"], [9, 2, 1, "", "quantile"], [9, 2, 1, "", "rsample"]], "botorch.posteriors.transformed": [[9, 1, 1, "", "TransformedPosterior"]], "botorch.posteriors.transformed.TransformedPosterior": [[9, 5, 1, "", "base_sample_shape"], [9, 5, 1, "", "batch_range"], [9, 5, 1, "", "device"], [9, 5, 1, "", "dtype"], [9, 5, 1, "", "mean"], [9, 2, 1, "", "rsample"], [9, 2, 1, "", "rsample_from_base_samples"], [9, 5, 1, "", "variance"]], "botorch.sampling": [[10, 0, 0, "-", "base"], [10, 0, 0, "-", "deterministic"], [10, 0, 0, "-", "get_sampler"], [10, 0, 0, "-", "index_sampler"], [10, 0, 0, "-", "list_sampler"], [10, 0, 0, "-", "normal"], [10, 0, 0, "-", "pairwise_samplers"], [10, 0, 0, "-", "qmc"], [10, 0, 0, "-", "stochastic_samplers"]], "botorch.sampling.deterministic": [[10, 1, 1, "", "DeterministicSampler"]], "botorch.sampling.deterministic.DeterministicSampler": [[10, 3, 1, "", "training"]], "botorch.sampling.get_sampler": [[10, 4, 1, "", "get_sampler"]], "botorch.sampling.index_sampler": [[10, 1, 1, "", "IndexSampler"]], "botorch.sampling.index_sampler.IndexSampler": [[10, 2, 1, "", "forward"], [10, 3, 1, "", "training"]], "botorch.sampling.normal": [[10, 1, 1, "", "IIDNormalSampler"], [10, 1, 1, "", "NormalMCSampler"], [10, 1, 1, "", "SobolQMCNormalSampler"]], "botorch.sampling.normal.IIDNormalSampler": [[10, 3, 1, "", "training"]], "botorch.sampling.normal.NormalMCSampler": [[10, 2, 1, "", "forward"], [10, 3, 1, "", "training"]], "botorch.sampling.normal.SobolQMCNormalSampler": [[10, 3, 1, "", "training"]], "botorch.sampling.pairwise_samplers": [[10, 1, 1, "", "PairwiseIIDNormalSampler"], [10, 1, 1, "", "PairwiseMCSampler"], [10, 1, 1, "", "PairwiseSobolQMCNormalSampler"]], "botorch.sampling.pairwise_samplers.PairwiseIIDNormalSampler": [[10, 3, 1, "", "training"]], "botorch.sampling.pairwise_samplers.PairwiseMCSampler": [[10, 2, 1, "", "forward"], [10, 3, 1, "", "training"]], "botorch.sampling.pairwise_samplers.PairwiseSobolQMCNormalSampler": [[10, 3, 1, "", "training"]], "botorch.sampling.pathwise.features": [[10, 0, 0, "-", "generators"], [10, 0, 0, "-", "maps"]], "botorch.sampling.pathwise.features.generators": [[10, 4, 1, "", "gen_kernel_features"]], "botorch.sampling.pathwise.features.maps": [[10, 1, 1, "", "FeatureMap"], [10, 1, 1, "", "KernelEvaluationMap"], [10, 1, 1, "", "KernelFeatureMap"]], "botorch.sampling.pathwise.features.maps.FeatureMap": [[10, 3, 1, "", "batch_shape"], [10, 3, 1, "", "input_transform"], [10, 3, 1, "", "num_outputs"], [10, 3, 1, "", "output_transform"]], "botorch.sampling.pathwise.features.maps.KernelEvaluationMap": [[10, 5, 1, "", "batch_shape"], [10, 2, 1, "", "forward"], [10, 3, 1, "", "input_transform"], [10, 5, 1, "", "num_outputs"], [10, 3, 1, "", "output_transform"], [10, 3, 1, "", "training"]], "botorch.sampling.pathwise.features.maps.KernelFeatureMap": [[10, 5, 1, "", "batch_shape"], [10, 2, 1, "", "forward"], [10, 3, 1, "", "input_transform"], [10, 5, 1, "", "num_outputs"], [10, 3, 1, "", "output_transform"], [10, 3, 1, "", "training"]], "botorch.sampling.pathwise": [[10, 0, 0, "-", "paths"], [10, 0, 0, "-", "posterior_samplers"], [10, 0, 0, "-", "prior_samplers"], [10, 0, 0, "-", "update_strategies"], [10, 0, 0, "-", "utils"]], "botorch.sampling.pathwise.paths": [[10, 1, 1, "", "GeneralizedLinearPath"], [10, 1, 1, "", "PathDict"], [10, 1, 1, "", "PathList"], [10, 1, 1, "", "SamplePath"]], "botorch.sampling.pathwise.paths.GeneralizedLinearPath": [[10, 2, 1, "", "forward"], [10, 3, 1, "", "input_transform"], [10, 3, 1, "", "output_transform"], [10, 3, 1, "", "training"]], "botorch.sampling.pathwise.paths.PathDict": [[10, 2, 1, "", "forward"], [10, 3, 1, "", "input_transform"], [10, 2, 1, "", "items"], [10, 2, 1, "", "keys"], [10, 3, 1, "", "output_transform"], [10, 3, 1, "", "training"], [10, 2, 1, "", "values"]], "botorch.sampling.pathwise.paths.PathList": [[10, 2, 1, "", "forward"], [10, 3, 1, "", "input_transform"], [10, 3, 1, "", "output_transform"], [10, 3, 1, "", "training"]], "botorch.sampling.pathwise.paths.SamplePath": [[10, 3, 1, "", "input_transform"], [10, 3, 1, "", "output_transform"]], "botorch.sampling.pathwise.posterior_samplers": [[10, 1, 1, "", "MatheronPath"], [10, 4, 1, "", "draw_matheron_paths"]], "botorch.sampling.pathwise.posterior_samplers.MatheronPath": [[10, 3, 1, "", "input_transform"], [10, 3, 1, "", "output_transform"], [10, 3, 1, "", "training"]], "botorch.sampling.pathwise.prior_samplers": [[10, 4, 1, "", "draw_kernel_feature_paths"]], "botorch.sampling.pathwise.update_strategies": [[10, 4, 1, "", "gaussian_update"]], "botorch.sampling.pathwise.utils": [[10, 1, 1, "", "ChainedTransform"], [10, 1, 1, "", "FeatureSelector"], [10, 1, 1, "", "InverseLengthscaleTransform"], [10, 1, 1, "", "OutcomeUntransformer"], [10, 1, 1, "", "OutputscaleTransform"], [10, 1, 1, "", "SineCosineTransform"], [10, 1, 1, "", "TensorTransform"], [10, 1, 1, "", "TransformedModuleMixin"], [10, 4, 1, "", "get_input_transform"], [10, 4, 1, "", "get_output_transform"], [10, 4, 1, "", "get_train_inputs"], [10, 4, 1, "", "get_train_targets"]], "botorch.sampling.pathwise.utils.ChainedTransform": [[10, 2, 1, "", "forward"], [10, 3, 1, "", "training"]], "botorch.sampling.pathwise.utils.FeatureSelector": [[10, 2, 1, "", "forward"], [10, 3, 1, "", "training"]], "botorch.sampling.pathwise.utils.InverseLengthscaleTransform": [[10, 2, 1, "", "forward"], [10, 3, 1, "", "training"]], "botorch.sampling.pathwise.utils.OutcomeUntransformer": [[10, 2, 1, "", "forward"], [10, 3, 1, "", "training"]], "botorch.sampling.pathwise.utils.OutputscaleTransform": [[10, 2, 1, "", "forward"], [10, 3, 1, "", "training"]], "botorch.sampling.pathwise.utils.SineCosineTransform": [[10, 2, 1, "", "forward"], [10, 3, 1, "", "training"]], "botorch.sampling.pathwise.utils.TensorTransform": [[10, 2, 1, "", "forward"], [10, 3, 1, "", "training"]], "botorch.sampling.pathwise.utils.TransformedModuleMixin": [[10, 3, 1, "", "input_transform"], [10, 3, 1, "", "output_transform"]], "botorch.sampling.qmc": [[10, 1, 1, "", "MultivariateNormalQMCEngine"], [10, 1, 1, "", "NormalQMCEngine"]], "botorch.sampling.qmc.MultivariateNormalQMCEngine": [[10, 2, 1, "", "draw"]], "botorch.sampling.qmc.NormalQMCEngine": [[10, 2, 1, "", "draw"]], "botorch.sampling.stochastic_samplers": [[10, 1, 1, "", "ForkedRNGSampler"], [10, 1, 1, "", "StochasticSampler"]], "botorch.sampling.stochastic_samplers.ForkedRNGSampler": [[10, 2, 1, "", "forward"], [10, 3, 1, "", "training"]], "botorch.sampling.stochastic_samplers.StochasticSampler": [[10, 2, 1, "", "forward"], [10, 3, 1, "", "training"]], "botorch.settings": [[11, 1, 1, "", "debug"], [11, 1, 1, "", "log_level"], [11, 1, 1, "", "propagate_grads"], [11, 1, 1, "", "validate_input_scaling"]], "botorch.settings.log_level": [[11, 3, 1, "", "level"]], "botorch.test_functions": [[12, 0, 0, "-", "base"], [12, 0, 0, "-", "multi_fidelity"], [12, 0, 0, "-", "multi_objective"], [12, 0, 0, "-", "multi_objective_multi_fidelity"], [12, 0, 0, "-", "sensitivity_analysis"], [12, 0, 0, "-", "synthetic"]], "botorch.test_functions.base": [[12, 1, 1, "", "BaseTestProblem"], [12, 1, 1, "", "ConstrainedBaseTestProblem"], [12, 1, 1, "", "MultiObjectiveTestProblem"]], "botorch.test_functions.base.BaseTestProblem": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 2, 1, "", "forward"]], "botorch.test_functions.base.ConstrainedBaseTestProblem": [[12, 2, 1, "", "evaluate_slack"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "is_feasible"], [12, 3, 1, "", "num_constraints"]], "botorch.test_functions.base.MultiObjectiveTestProblem": [[12, 2, 1, "", "gen_pareto_front"], [12, 5, 1, "", "max_hv"], [12, 3, 1, "", "num_objectives"]], "botorch.test_functions.multi_fidelity": [[12, 1, 1, "", "AugmentedBranin"], [12, 1, 1, "", "AugmentedHartmann"], [12, 1, 1, "", "AugmentedRosenbrock"]], "botorch.test_functions.multi_fidelity.AugmentedBranin": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_fidelity.AugmentedHartmann": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_fidelity.AugmentedRosenbrock": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective": [[12, 1, 1, "", "BNH"], [12, 1, 1, "", "BraninCurrin"], [12, 1, 1, "", "C2DTLZ2"], [12, 1, 1, "", "CONSTR"], [12, 1, 1, "", "CarSideImpact"], [12, 1, 1, "", "ConstrainedBraninCurrin"], [12, 1, 1, "", "DH"], [12, 1, 1, "", "DH1"], [12, 1, 1, "", "DH2"], [12, 1, 1, "", "DH3"], [12, 1, 1, "", "DH4"], [12, 1, 1, "", "DTLZ"], [12, 1, 1, "", "DTLZ1"], [12, 1, 1, "", "DTLZ2"], [12, 1, 1, "", "DTLZ3"], [12, 1, 1, "", "DTLZ4"], [12, 1, 1, "", "DTLZ5"], [12, 1, 1, "", "DTLZ7"], [12, 1, 1, "", "DiscBrake"], [12, 1, 1, "", "GMM"], [12, 1, 1, "", "MW7"], [12, 1, 1, "", "OSY"], [12, 1, 1, "", "Penicillin"], [12, 1, 1, "", "SRN"], [12, 1, 1, "", "ToyRobust"], [12, 1, 1, "", "VehicleSafety"], [12, 1, 1, "", "WeldedBeam"], [12, 1, 1, "", "ZDT"], [12, 1, 1, "", "ZDT1"], [12, 1, 1, "", "ZDT2"], [12, 1, 1, "", "ZDT3"]], "botorch.test_functions.multi_objective.BNH": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "num_constraints"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.BraninCurrin": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.C2DTLZ2": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 3, 1, "", "num_constraints"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.CONSTR": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "num_constraints"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.CarSideImpact": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "num_objectives"]], "botorch.test_functions.multi_objective.ConstrainedBraninCurrin": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 3, 1, "", "num_constraints"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.DH": [[12, 3, 1, "", "num_objectives"]], "botorch.test_functions.multi_objective.DH1": [[12, 3, 1, "", "alpha"], [12, 3, 1, "", "beta"], [12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.DH2": [[12, 3, 1, "", "beta"], [12, 3, 1, "", "dim"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.DH3": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.DH4": [[12, 3, 1, "", "dim"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.DTLZ": [[12, 3, 1, "", "dim"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.DTLZ1": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 2, 1, "", "gen_pareto_front"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.DTLZ2": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 2, 1, "", "gen_pareto_front"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.DTLZ3": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.DTLZ4": [[12, 3, 1, "", "dim"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.DTLZ5": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.DTLZ7": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.DiscBrake": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "num_constraints"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.GMM": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.MW7": [[12, 2, 1, "", "LA2"], [12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "num_constraints"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.OSY": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "num_constraints"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.Penicillin": [[12, 3, 1, "", "E_d"], [12, 3, 1, "", "E_g"], [12, 3, 1, "", "K"], [12, 3, 1, "", "K_1"], [12, 3, 1, "", "K_2"], [12, 3, 1, "", "K_I"], [12, 3, 1, "", "K_X"], [12, 3, 1, "", "K_p"], [12, 3, 1, "", "R"], [12, 3, 1, "", "T_o"], [12, 3, 1, "", "T_v"], [12, 3, 1, "", "V_max"], [12, 3, 1, "", "Y_ps"], [12, 3, 1, "", "Y_xs"], [12, 3, 1, "", "alpha_1"], [12, 3, 1, "", "alpha_2"], [12, 3, 1, "", "alpha_3"], [12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "k_d"], [12, 3, 1, "", "k_g"], [12, 3, 1, "", "lambd"], [12, 3, 1, "", "m_X"], [12, 3, 1, "", "mu_X"], [12, 3, 1, "", "mu_p"], [12, 3, 1, "", "num_objectives"], [12, 2, 1, "", "penicillin_vectorized"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.SRN": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "num_constraints"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.ToyRobust": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 2, 1, "", "f_1"], [12, 2, 1, "", "f_2"], [12, 3, 1, "", "levy"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.VehicleSafety": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.WeldedBeam": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_slack_true"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "num_constraints"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.ZDT": [[12, 3, 1, "", "dim"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.ZDT1": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 2, 1, "", "gen_pareto_front"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.ZDT2": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 2, 1, "", "gen_pareto_front"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective.ZDT3": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 2, 1, "", "gen_pareto_front"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective_multi_fidelity": [[12, 1, 1, "", "MOMFBraninCurrin"], [12, 1, 1, "", "MOMFPark"]], "botorch.test_functions.multi_objective_multi_fidelity.MOMFBraninCurrin": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.multi_objective_multi_fidelity.MOMFPark": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "num_objectives"], [12, 3, 1, "", "training"]], "botorch.test_functions.sensitivity_analysis": [[12, 1, 1, "", "Gsobol"], [12, 1, 1, "", "Ishigami"], [12, 1, 1, "", "Morris"]], "botorch.test_functions.sensitivity_analysis.Gsobol": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 2, 1, "", "optimal_sobol_indicies"], [12, 3, 1, "", "training"]], "botorch.test_functions.sensitivity_analysis.Ishigami": [[12, 2, 1, "", "compute_dgsm"], [12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.sensitivity_analysis.Morris": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.synthetic": [[12, 1, 1, "", "Ackley"], [12, 1, 1, "", "Beale"], [12, 1, 1, "", "Branin"], [12, 1, 1, "", "Bukin"], [12, 1, 1, "", "Cosine8"], [12, 1, 1, "", "DixonPrice"], [12, 1, 1, "", "DropWave"], [12, 1, 1, "", "EggHolder"], [12, 1, 1, "", "Griewank"], [12, 1, 1, "", "Hartmann"], [12, 1, 1, "", "HolderTable"], [12, 1, 1, "", "Levy"], [12, 1, 1, "", "Michalewicz"], [12, 1, 1, "", "Powell"], [12, 1, 1, "", "Rastrigin"], [12, 1, 1, "", "Rosenbrock"], [12, 1, 1, "", "Shekel"], [12, 1, 1, "", "SixHumpCamel"], [12, 1, 1, "", "StyblinskiTang"], [12, 1, 1, "", "SyntheticTestFunction"], [12, 1, 1, "", "ThreeHumpCamel"]], "botorch.test_functions.synthetic.Ackley": [[12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.Beale": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.synthetic.Branin": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.synthetic.Bukin": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.Cosine8": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.synthetic.DixonPrice": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.synthetic.DropWave": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.synthetic.EggHolder": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"]], "botorch.test_functions.synthetic.Griewank": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.synthetic.Hartmann": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "optimal_value"], [12, 5, 1, "", "optimizers"], [12, 3, 1, "", "training"]], "botorch.test_functions.synthetic.HolderTable": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.synthetic.Levy": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.synthetic.Michalewicz": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 5, 1, "", "optimizers"], [12, 3, 1, "", "training"]], "botorch.test_functions.synthetic.Powell": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.synthetic.Rastrigin": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.synthetic.Rosenbrock": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.synthetic.Shekel": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.synthetic.SixHumpCamel": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.synthetic.StyblinskiTang": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.test_functions.synthetic.SyntheticTestFunction": [[12, 3, 1, "", "num_objectives"], [12, 5, 1, "", "optimal_value"]], "botorch.test_functions.synthetic.ThreeHumpCamel": [[12, 3, 1, "", "dim"], [12, 2, 1, "", "evaluate_true"], [12, 3, 1, "", "training"]], "botorch.utils": [[13, 0, 0, "-", "constants"], [13, 0, 0, "-", "constraints"], [13, 0, 0, "-", "containers"], [13, 0, 0, "-", "context_managers"], [13, 0, 0, "-", "datasets"], [13, 0, 0, "-", "dispatcher"], [13, 0, 0, "-", "feasible_volume"], [13, 0, 0, "-", "gp_sampling"], [13, 0, 0, "-", "low_rank"], [13, 0, 0, "-", "objective"], [13, 0, 0, "-", "rounding"], [13, 0, 0, "-", "safe_math"], [13, 0, 0, "-", "sampling"], [13, 0, 0, "-", "testing"], [13, 0, 0, "-", "torch"], [13, 0, 0, "-", "transforms"], [13, 0, 0, "-", "types"]], "botorch.utils.constants": [[13, 4, 1, "", "get_constants"], [13, 4, 1, "", "get_constants_like"]], "botorch.utils.constraints": [[13, 4, 1, "", "get_outcome_constraint_transforms"]], "botorch.utils.containers": [[13, 1, 1, "", "DenseContainer"], [13, 1, 1, "", "SliceContainer"]], "botorch.utils.containers.DenseContainer": [[13, 5, 1, "", "device"], [13, 5, 1, "", "dtype"], [13, 3, 1, "", "event_shape"], [13, 5, 1, "", "shape"], [13, 3, 1, "", "values"]], "botorch.utils.containers.SliceContainer": [[13, 5, 1, "", "device"], [13, 5, 1, "", "dtype"], [13, 3, 1, "", "event_shape"], [13, 3, 1, "", "indices"], [13, 5, 1, "", "shape"], [13, 3, 1, "", "values"]], "botorch.utils.context_managers": [[13, 1, 1, "", "TensorCheckpoint"], [13, 4, 1, "", "delattr_ctx"], [13, 4, 1, "", "module_rollback_ctx"], [13, 4, 1, "", "parameter_rollback_ctx"], [13, 4, 1, "", "requires_grad_ctx"], [13, 4, 1, "", "zero_grad_ctx"]], "botorch.utils.context_managers.TensorCheckpoint": [[13, 3, 1, "", "device"], [13, 3, 1, "", "dtype"], [13, 3, 1, "", "values"]], "botorch.utils.datasets": [[13, 1, 1, "", "BotorchDataset"], [13, 1, 1, "", "FixedNoiseDataset"], [13, 1, 1, "", "RankingDataset"], [13, 1, 1, "", "SupervisedDataset"], [13, 1, 1, "", "SupervisedDatasetMeta"]], "botorch.utils.datasets.FixedNoiseDataset": [[13, 3, 1, "", "X"], [13, 3, 1, "", "Y"], [13, 3, 1, "", "Yvar"], [13, 2, 1, "", "dict_from_iter"]], "botorch.utils.datasets.RankingDataset": [[13, 3, 1, "", "X"], [13, 3, 1, "", "Y"]], "botorch.utils.datasets.SupervisedDataset": [[13, 3, 1, "", "X"], [13, 3, 1, "", "Y"], [13, 2, 1, "", "dict_from_iter"]], "botorch.utils.dispatcher": [[13, 1, 1, "", "Dispatcher"], [13, 4, 1, "", "type_bypassing_encoder"]], "botorch.utils.dispatcher.Dispatcher": [[13, 2, 1, "", "dispatch"], [13, 3, 1, "", "doc"], [13, 2, 1, "", "encode_args"], [13, 5, 1, "", "encoder"], [13, 3, 1, "", "funcs"], [13, 2, 1, "", "help"], [13, 3, 1, "", "name"], [13, 2, 1, "", "source"]], "botorch.utils.feasible_volume": [[13, 4, 1, "", "estimate_feasible_volume"], [13, 4, 1, "", "get_feasible_samples"], [13, 4, 1, "", "get_outcome_feasibility_probability"]], "botorch.utils.gp_sampling": [[13, 1, 1, "", "GPDraw"], [13, 1, 1, "", "RandomFourierFeatures"], [13, 4, 1, "", "get_deterministic_model"], [13, 4, 1, "", "get_deterministic_model_list"], [13, 4, 1, "", "get_deterministic_model_multi_samples"], [13, 4, 1, "", "get_eval_gp_sample_callable"], [13, 4, 1, "", "get_gp_samples"], [13, 4, 1, "", "get_weights_posterior"]], "botorch.utils.gp_sampling.GPDraw": [[13, 5, 1, "", "Xs"], [13, 5, 1, "", "Ys"], [13, 2, 1, "", "forward"], [13, 3, 1, "", "training"]], "botorch.utils.gp_sampling.RandomFourierFeatures": [[13, 2, 1, "", "forward"], [13, 3, 1, "", "training"]], "botorch.utils.low_rank": [[13, 4, 1, "", "extract_batch_covar"], [13, 4, 1, "", "sample_cached_cholesky"]], "botorch.utils.multi_objective.box_decompositions": [[13, 0, 0, "-", "box_decomposition"], [13, 0, 0, "-", "box_decomposition_list"], [13, 0, 0, "-", "dominated"], [13, 0, 0, "-", "non_dominated"], [13, 0, 0, "-", "utils"]], "botorch.utils.multi_objective.box_decompositions.box_decomposition_list": [[13, 1, 1, "", "BoxDecompositionList"]], "botorch.utils.multi_objective.box_decompositions.box_decomposition_list.BoxDecompositionList": [[13, 2, 1, "", "compute_hypervolume"], [13, 2, 1, "", "get_hypercell_bounds"], [13, 5, 1, "", "pareto_Y"], [13, 5, 1, "", "ref_point"], [13, 3, 1, "", "training"], [13, 2, 1, "", "update"]], "botorch.utils.multi_objective.box_decompositions.dominated": [[13, 1, 1, "", "DominatedPartitioning"]], "botorch.utils.multi_objective.box_decompositions.dominated.DominatedPartitioning": [[13, 3, 1, "", "training"]], "botorch.utils.multi_objective.box_decompositions.non_dominated": [[13, 1, 1, "", "FastNondominatedPartitioning"], [13, 1, 1, "", "NondominatedPartitioning"]], "botorch.utils.multi_objective.box_decompositions.non_dominated.FastNondominatedPartitioning": [[13, 3, 1, "", "training"]], "botorch.utils.multi_objective.box_decompositions.non_dominated.NondominatedPartitioning": [[13, 2, 1, "", "get_hypercell_bounds"], [13, 3, 1, "", "training"]], "botorch.utils.multi_objective.box_decompositions.utils": [[13, 4, 1, "", "compute_dominated_hypercell_bounds_2d"], [13, 4, 1, "", "compute_local_upper_bounds"], [13, 4, 1, "", "compute_non_dominated_hypercell_bounds_2d"], [13, 4, 1, "", "get_partition_bounds"], [13, 4, 1, "", "update_local_upper_bounds_incremental"]], "botorch.utils.multi_objective": [[13, 0, 0, "-", "hypervolume"], [13, 0, 0, "-", "pareto"], [13, 0, 0, "-", "scalarization"]], "botorch.utils.multi_objective.hypervolume": [[13, 1, 1, "", "Hypervolume"], [13, 1, 1, "", "MultiList"], [13, 1, 1, "", "Node"], [13, 4, 1, "", "infer_reference_point"], [13, 4, 1, "", "sort_by_dimension"]], "botorch.utils.multi_objective.hypervolume.Hypervolume": [[13, 2, 1, "", "compute"], [13, 5, 1, "", "ref_point"]], "botorch.utils.multi_objective.hypervolume.MultiList": [[13, 2, 1, "", "append"], [13, 2, 1, "", "extend"], [13, 2, 1, "", "reinsert"], [13, 2, 1, "", "remove"]], "botorch.utils.multi_objective.pareto": [[13, 4, 1, "", "is_non_dominated"]], "botorch.utils.multi_objective.scalarization": [[13, 4, 1, "", "get_chebyshev_scalarization"]], "botorch.utils.objective": [[13, 4, 1, "", "apply_constraints"], [13, 4, 1, "", "apply_constraints_nonnegative_soft"], [13, 4, 1, "", "get_objective_weights_transform"], [13, 4, 1, "", "soft_eval_constraint"]], "botorch.utils.probability": [[13, 0, 0, "-", "bvn"], [13, 0, 0, "-", "lin_ess"], [13, 0, 0, "-", "linalg"], [13, 0, 0, "-", "mvnxpb"], [13, 0, 0, "-", "truncated_multivariate_normal"], [13, 0, 0, "-", "unified_skew_normal"], [13, 0, 0, "-", "utils"]], "botorch.utils.probability.bvn": [[13, 4, 1, "", "bvn"], [13, 4, 1, "", "bvnmom"], [13, 4, 1, "", "bvnu"]], "botorch.utils.probability.lin_ess": [[13, 1, 1, "", "LinearEllipticalSliceSampler"]], "botorch.utils.probability.lin_ess.LinearEllipticalSliceSampler": [[13, 2, 1, "", "draw"], [13, 2, 1, "", "step"]], "botorch.utils.probability.linalg": [[13, 1, 1, "", "PivotedCholesky"], [13, 4, 1, "", "augment_cholesky"], [13, 4, 1, "", "block_matrix_concat"]], "botorch.utils.probability.linalg.PivotedCholesky": [[13, 2, 1, "", "clone"], [13, 2, 1, "", "concat"], [13, 2, 1, "", "detach"], [13, 3, 1, "", "diag"], [13, 2, 1, "", "expand"], [13, 3, 1, "", "perm"], [13, 2, 1, "", "pivot_"], [13, 3, 1, "", "step"], [13, 3, 1, "", "tril"], [13, 2, 1, "", "update_"], [13, 3, 1, "", "validate_init"]], "botorch.utils.probability.mvnxpb": [[13, 1, 1, "", "MVNXPB"], [13, 1, 1, "", "mvnxpbState"]], "botorch.utils.probability.mvnxpb.MVNXPB": [[13, 2, 1, "", "asdict"], [13, 2, 1, "", "augment"], [13, 2, 1, "", "build"], [13, 2, 1, "", "clone"], [13, 2, 1, "", "concat"], [13, 2, 1, "", "detach"], [13, 2, 1, "", "expand"], [13, 2, 1, "", "pivot_"], [13, 2, 1, "", "select_pivot"], [13, 2, 1, "", "solve"]], "botorch.utils.probability.mvnxpb.mvnxpbState": [[13, 3, 1, "", "bounds"], [13, 3, 1, "", "log_prob"], [13, 3, 1, "", "log_prob_extra"], [13, 3, 1, "", "perm"], [13, 3, 1, "", "piv_chol"], [13, 3, 1, "", "plug_ins"], [13, 3, 1, "", "step"]], "botorch.utils.probability.truncated_multivariate_normal": [[13, 1, 1, "", "TruncatedMultivariateNormal"]], "botorch.utils.probability.truncated_multivariate_normal.TruncatedMultivariateNormal": [[13, 2, 1, "", "expand"], [13, 5, 1, "", "log_partition"], [13, 2, 1, "", "log_prob"], [13, 2, 1, "", "rsample"], [13, 5, 1, "", "sampler"], [13, 5, 1, "", "solver"]], "botorch.utils.probability.unified_skew_normal": [[13, 1, 1, "", "UnifiedSkewNormal"]], "botorch.utils.probability.unified_skew_normal.UnifiedSkewNormal": [[13, 3, 1, "", "arg_constraints"], [13, 5, 1, "", "covariance_matrix"], [13, 2, 1, "", "expand"], [13, 2, 1, "", "log_prob"], [13, 2, 1, "", "rsample"], [13, 5, 1, "", "scale_tril"]], "botorch.utils.probability.utils": [[13, 4, 1, "", "build_positional_indices"], [13, 4, 1, "", "case_dispatcher"], [13, 4, 1, "", "gen_positional_indices"], [13, 4, 1, "", "get_constants"], [13, 4, 1, "", "get_constants_like"], [13, 4, 1, "", "leggauss"], [13, 4, 1, "", "log_erfc"], [13, 4, 1, "", "log_ndtr"], [13, 4, 1, "", "log_phi"], [13, 4, 1, "", "log_prob_normal_in"], [13, 4, 1, "", "ndtr"], [13, 4, 1, "", "phi"], [13, 4, 1, "", "swap_along_dim_"]], "botorch.utils.rounding": [[13, 1, 1, "", "IdentitySTEFunction"], [13, 1, 1, "", "OneHotArgmaxSTE"], [13, 1, 1, "", "RoundSTE"], [13, 4, 1, "", "approximate_round"]], "botorch.utils.rounding.IdentitySTEFunction": [[13, 2, 1, "", "backward"]], "botorch.utils.rounding.OneHotArgmaxSTE": [[13, 2, 1, "", "forward"]], "botorch.utils.rounding.RoundSTE": [[13, 2, 1, "", "forward"]], "botorch.utils.safe_math": [[13, 4, 1, "", "add"], [13, 4, 1, "", "div"], [13, 4, 1, "", "exp"], [13, 4, 1, "", "log"], [13, 4, 1, "", "log1mexp"], [13, 4, 1, "", "logdiffexp"], [13, 4, 1, "", "logmeanexp"], [13, 4, 1, "", "mul"], [13, 4, 1, "", "sub"]], "botorch.utils.sampling": [[13, 1, 1, "", "DelaunayPolytopeSampler"], [13, 1, 1, "", "HitAndRunPolytopeSampler"], [13, 4, 1, "", "batched_multinomial"], [13, 4, 1, "", "draw_sobol_normal_samples"], [13, 4, 1, "", "draw_sobol_samples"], [13, 4, 1, "", "find_interior_point"], [13, 4, 1, "", "get_polytope_samples"], [13, 4, 1, "", "manual_seed"], [13, 4, 1, "", "normalize_linear_constraints"], [13, 4, 1, "", "sample_hypersphere"], [13, 4, 1, "", "sample_polytope"], [13, 4, 1, "", "sample_simplex"], [13, 4, 1, "", "sparse_to_dense_constraints"]], "botorch.utils.sampling.DelaunayPolytopeSampler": [[13, 2, 1, "", "draw"]], "botorch.utils.sampling.HitAndRunPolytopeSampler": [[13, 2, 1, "", "draw"]], "botorch.utils.testing": [[13, 1, 1, "", "BaseTestProblemBaseTestCase"], [13, 1, 1, "", "BotorchTestCase"], [13, 1, 1, "", "ConstrainedMultiObjectiveTestProblemBaseTestCase"], [13, 1, 1, "", "MockAcquisitionFunction"], [13, 1, 1, "", "MockModel"], [13, 1, 1, "", "MockPosterior"], [13, 1, 1, "", "MultiObjectiveTestProblemBaseTestCase"], [13, 1, 1, "", "SyntheticTestFunctionBaseTestCase"]], "botorch.utils.testing.BaseTestProblemBaseTestCase": [[13, 3, 1, "", "functions"], [13, 2, 1, "", "test_forward"]], "botorch.utils.testing.BotorchTestCase": [[13, 2, 1, "", "assertAllClose"], [13, 3, 1, "", "device"], [13, 2, 1, "", "setUp"]], "botorch.utils.testing.ConstrainedMultiObjectiveTestProblemBaseTestCase": [[13, 3, 1, "", "functions"], [13, 2, 1, "", "test_evaluate_slack_true"], [13, 2, 1, "", "test_num_constraints"]], "botorch.utils.testing.MockAcquisitionFunction": [[13, 2, 1, "", "set_X_pending"]], "botorch.utils.testing.MockModel": [[13, 5, 1, "", "batch_shape"], [13, 2, 1, "", "load_state_dict"], [13, 5, 1, "", "num_outputs"], [13, 2, 1, "", "posterior"], [13, 2, 1, "", "state_dict"]], "botorch.utils.testing.MockPosterior": [[13, 5, 1, "", "base_sample_shape"], [13, 5, 1, "", "batch_range"], [13, 5, 1, "", "batch_shape"], [13, 5, 1, "", "device"], [13, 5, 1, "", "dtype"], [13, 5, 1, "", "mean"], [13, 2, 1, "", "rsample"], [13, 2, 1, "", "rsample_from_base_samples"], [13, 5, 1, "", "variance"]], "botorch.utils.testing.MultiObjectiveTestProblemBaseTestCase": [[13, 3, 1, "", "functions"], [13, 2, 1, "", "test_attributes"], [13, 2, 1, "", "test_max_hv"], [13, 2, 1, "", "test_ref_point"]], "botorch.utils.testing.SyntheticTestFunctionBaseTestCase": [[13, 3, 1, "", "functions"], [13, 2, 1, "", "test_optimal_value"], [13, 2, 1, "", "test_optimizer"]], "botorch.utils.torch": [[13, 1, 1, "", "BufferDict"]], "botorch.utils.torch.BufferDict": [[13, 2, 1, "", "clear"], [13, 2, 1, "", "extra_repr"], [13, 2, 1, "", "items"], [13, 2, 1, "", "keys"], [13, 2, 1, "", "pop"], [13, 3, 1, "", "training"], [13, 2, 1, "", "update"], [13, 2, 1, "", "values"]], "botorch.utils.transforms": [[13, 4, 1, "", "concatenate_pending_points"], [13, 4, 1, "", "convert_to_target_pre_hook"], [13, 4, 1, "", "is_fully_bayesian"], [13, 4, 1, "", "match_batch_shape"], [13, 4, 1, "", "normalize"], [13, 4, 1, "", "normalize_indices"], [13, 4, 1, "", "squeeze_last_dim"], [13, 4, 1, "", "standardize"], [13, 4, 1, "", "t_batch_mode_transform"], [13, 4, 1, "", "unnormalize"]], "botorch.utils.types": [[13, 1, 1, "", "DEFAULT"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:property", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "property", "Python property"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"botorch": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], "acquisit": [0, 4, 8], "function": [0, 4, 8, 10, 12], "api": [0, 5, 7, 9, 10, 12], "abstract": [0, 9, 12, 13], "analyt": 0, "cach": 0, "choleski": [0, 13], "mont": [0, 10], "carlo": [0, 10], "multi": [0, 7, 12, 13], "object": [0, 12, 13], "joint": 0, "entropi": 0, "search": 0, "max": 0, "valu": 0, "fidel": [0, 7, 12], "predict": 0, "The": 0, "One": 0, "shot": 0, "knowledg": 0, "gradient": 0, "step": 0, "lookahead": 0, "activ": 0, "learn": 0, "prefer": 0, "cost": [0, 7], "awar": [0, 7], "util": [0, 4, 7, 8, 9, 10, 13], "risk": 0, "measur": 0, "output": 0, "fix": 0, "featur": [0, 10], "constructor": 0, "input": [0, 7], "argument": 0, "penal": 0, "wrapper": 0, "proxim": 0, "gener": [0, 4, 8, 10], "cross_valid": 1, "except": 2, "error": 2, "warn": 2, "fit": [3, 8], "candid": 4, "sampl": [4, 9, 10, 13], "strategi": [4, 10], "refer": 5, "indic": 5, "tabl": 5, "log": 6, "model": [7, 8], "base": [7, 9, 10], "gpytorch": [7, 9], "determinist": [7, 10], "ensembl": [7, 9], "optim": [7, 8], "gp": [7, 9, 13], "regress": 7, "mix": 7, "paramet": [7, 8], "space": 7, "list": [7, 9, 10, 13], "multitask": [7, 9], "higher": [7, 9], "order": [7, 9], "pairwis": [7, 10], "contextu": 7, "aggreg": 7, "reward": 7, "context": [7, 13], "variat": 7, "fulli": [7, 9], "bayesian": [7, 9], "compon": 7, "kernel": 7, "likelihood": 7, "transform": [7, 9, 13], "outcom": 7, "factori": 7, "method": 7, "dataset": [7, 13], "pars": 7, "convers": [7, 8], "induc": 7, "point": 7, "alloc": 7, "other": 7, "utilti": 7, "core": 8, "initi": 8, "helper": [8, 10, 13], "stop": 8, "criteria": 8, "closur": 8, "numpi": 8, "torch": [8, 9, 13], "tool": 8, "timeout": 8, "old": 8, "constraint": [8, 13], "posterior": [9, 10], "determinst": 9, "sampler": [10, 13], "index": 10, "get": 10, "gaussian": [10, 13], "qmc": 10, "stochast": 10, "pathwis": 10, "map": 10, "path": 10, "prior": [10, 13], "updat": [10, 13], "set": 11, "test_funct": 12, "test": [12, 13], "synthet": 12, "sensit": 12, "analysi": 12, "contain": 13, "manag": 13, "dispatch": 13, "low": 13, "rank": 13, "round": 13, "from": 13, "feasibl": 13, "volum": 13, "type": 13, "hint": 13, "constant": 13, "safe": 13, "math": 13, "box": 13, "decomposit": 13, "domin": 13, "partit": 13, "hypervolum": 13, "non": 13, "pareto": 13, "scalar": 13, "probabl": 13, "multivari": 13, "via": 13, "bivari": 13, "condit": 13, "truncat": 13, "normal": 13, "distribut": 13, "unifi": 13, "skew": 13, "statist": 13, "ellipt": 13, "slice": 13, "linear": 13, "algebra": 13}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"botorch.acquisition": [[0, "module-botorch.acquisition"]], "Acquisition Function APIs": [[0, "acquisition-function-apis"]], "Abstract Acquisition Function APIs": [[0, "module-botorch.acquisition.acquisition"]], "Analytic Acquisition Function API": [[0, "analytic-acquisition-function-api"]], "Cached Cholesky Acquisition Function API": [[0, "module-botorch.acquisition.cached_cholesky"]], "Monte-Carlo Acquisition Function API": [[0, "monte-carlo-acquisition-function-api"]], "Multi-Objective Analytic Acquisition Function API": [[0, "multi-objective-analytic-acquisition-function-api"]], "Multi-Objective Monte-Carlo Acquisition Function API": [[0, "multi-objective-monte-carlo-acquisition-function-api"]], "Acquisition Functions": [[0, "acquisition-functions"]], "Analytic Acquisition Functions": [[0, "module-botorch.acquisition.analytic"]], "Monte-Carlo Acquisition Functions": [[0, "module-botorch.acquisition.monte_carlo"]], "Multi-Objective Analytic Acquisition Functions": [[0, "module-botorch.acquisition.multi_objective.analytic"]], "Multi-Objective Joint Entropy Search Acquisition Functions": [[0, "module-botorch.acquisition.multi_objective.joint_entropy_search"]], "Multi-Objective Max-value Entropy Search Acquisition Functions": [[0, "module-botorch.acquisition.multi_objective.max_value_entropy_search"]], "Multi-Objective Monte-Carlo Acquisition Functions": [[0, "module-botorch.acquisition.multi_objective.monte_carlo"]], "Multi-Objective Multi-Fidelity Acquisition Functions": [[0, "module-botorch.acquisition.multi_objective.multi_fidelity"]], "Multi-Objective Predictive Entropy Search Acquisition Functions": [[0, "module-botorch.acquisition.multi_objective.predictive_entropy_search"]], "The One-Shot Knowledge Gradient": [[0, "module-botorch.acquisition.knowledge_gradient"]], "Multi-Step Lookahead Acquisition Functions": [[0, "module-botorch.acquisition.multi_step_lookahead"]], "Max-value Entropy Search Acquisition Functions": [[0, "module-botorch.acquisition.max_value_entropy_search"]], "Joint Entropy Search Acquisition Functions": [[0, "module-botorch.acquisition.joint_entropy_search"]], "Predictive Entropy Search Acquisition Functions": [[0, "module-botorch.acquisition.predictive_entropy_search"]], "Active Learning Acquisition Functions": [[0, "module-botorch.acquisition.active_learning"]], "Preference Acquisition Functions": [[0, "module-botorch.acquisition.preference"]], "Objectives and Cost-Aware Utilities": [[0, "objectives-and-cost-aware-utilities"]], "Objectives": [[0, "module-botorch.acquisition.objective"]], "Multi-Objective Objectives": [[0, "module-botorch.acquisition.multi_objective.objective"]], "Cost-Aware Utility": [[0, "module-botorch.acquisition.cost_aware"]], "Risk Measures": [[0, "module-botorch.acquisition.risk_measures"]], "Multi-Output Risk Measures": [[0, "module-botorch.acquisition.multi_objective.multi_output_risk_measures"]], "Utilities": [[0, "utilities"], [4, "module-botorch.generation.utils"], [7, "utilities"], [8, "utilities"], [9, "utilities"], [10, "module-botorch.sampling.pathwise.utils"]], "Fixed Feature Acquisition Function": [[0, "module-botorch.acquisition.fixed_feature"]], "Constructors for Acquisition Function Input Arguments": [[0, "module-botorch.acquisition.input_constructors"]], "Penalized Acquisition Function Wrapper": [[0, "module-botorch.acquisition.penalized"]], "Proximal Acquisition Function Wrapper": [[0, "module-botorch.acquisition.proximal"]], "General Utilities for Acquisition Functions": [[0, "module-botorch.acquisition.utils"]], "Multi-Objective Utilities for Acquisition Functions": [[0, "module-botorch.acquisition.multi_objective.utils"]], "botorch.cross_validation": [[1, "module-botorch.cross_validation"]], "botorch.exceptions": [[2, "module-botorch.exceptions"]], "Errors": [[2, "module-botorch.exceptions.errors"]], "Warnings": [[2, "module-botorch.exceptions.warnings"]], "botorch.fit": [[3, "module-botorch.fit"]], "botorch.generation": [[4, "module-botorch.generation"]], "Candidate Generation Utilities for Acquisition Functions": [[4, "module-botorch.generation.gen"]], "Sampling Strategies": [[4, "module-botorch.generation.sampling"]], "BoTorch API Reference": [[5, "botorch-api-reference"]], "API Reference": [[5, null]], "Indices and Tables": [[5, "indices-and-tables"]], "botorch.logging": [[6, "module-botorch.logging"]], "botorch.models": [[7, "module-botorch.models"]], "Model APIs": [[7, "model-apis"]], "Base Model API": [[7, "module-botorch.models.model"]], "GPyTorch Model API": [[7, "module-botorch.models.gpytorch"]], "Deterministic Model API": [[7, "module-botorch.models.deterministic"]], "Ensemble Model API": [[7, "module-botorch.models.ensemble"]], "Models": [[7, "models"]], "Cost Models (for cost-aware optimization)": [[7, "module-botorch.models.cost"]], "GP Regression Models": [[7, "module-botorch.models.gp_regression"]], "Multi-Fidelity GP Regression Models": [[7, "module-botorch.models.gp_regression_fidelity"]], "GP Regression Models for Mixed Parameter Spaces": [[7, "module-botorch.models.gp_regression_mixed"]], "Model List GP Regression Models": [[7, "module-botorch.models.model_list_gp_regression"]], "Multitask GP Models": [[7, "module-botorch.models.multitask"]], "Higher Order GP Models": [[7, "module-botorch.models.higher_order_gp"]], "Pairwise GP Models": [[7, "module-botorch.models.pairwise_gp"]], "Contextual GP Models with Aggregate Rewards": [[7, "module-botorch.models.contextual"]], "Contextual GP Models with Context Rewards": [[7, "module-botorch.models.contextual_multioutput"]], "Variational GP Models": [[7, "module-botorch.models.approximate_gp"]], "Fully Bayesian GP Models": [[7, "module-botorch.models.fully_bayesian"]], "Fully Bayesian Multitask GP Models": [[7, "module-botorch.models.fully_bayesian_multitask"]], "Model Components": [[7, "model-components"]], "Kernels": [[7, "module-botorch.models.kernels.categorical"]], "Likelihoods": [[7, "module-botorch.models.likelihoods.pairwise"]], "Transforms": [[7, "transforms"]], "Outcome Transforms": [[7, "module-botorch.models.transforms.outcome"]], "Input Transforms": [[7, "module-botorch.models.transforms.input"]], "Transform Factory Methods": [[7, "module-botorch.models.transforms.factory"]], "Transform Utilities": [[7, "module-botorch.models.transforms.utils"]], "Dataset Parsing": [[7, "module-botorch.models.utils.parse_training_data"]], "Model Conversion": [[7, "module-botorch.models.converter"]], "Inducing Point Allocators": [[7, "module-botorch.models.utils.inducing_point_allocators"]], "Other Utilties": [[7, "module-botorch.models.utils.assorted"]], "botorch.optim": [[8, "module-botorch.optim"]], "Optimization": [[8, "optimization"]], "Core": [[8, "module-botorch.optim.core"], [8, "id2"]], "Acquisition Function Optimization": [[8, "module-botorch.optim.optimize"]], "Model Fitting Optimization": [[8, "module-botorch.optim.fit"]], "Initialization Helpers": [[8, "module-botorch.optim.initializers"]], "Stopping Criteria": [[8, "module-botorch.optim.stopping"]], "Closures": [[8, "closures"]], "Model Fitting Closures": [[8, "module-botorch.optim.closures.model_closures"]], "General Optimization Utilities": [[8, "module-botorch.optim.utils.common"]], "Acquisition Optimization Utilities": [[8, "module-botorch.optim.utils.acquisition_utils"]], "Model Fitting Utilities": [[8, "module-botorch.optim.utils.model_utils"]], "Numpy - Torch Conversion Tools": [[8, "module-botorch.optim.utils.numpy_utils"]], "Optimization with Timeouts": [[8, "module-botorch.optim.utils.timeout"]], "Numpy - Torch Conversion Tools (OLD)": [[8, "module-botorch.optim.numpy_converter"]], "Parameter Constraint Utilities": [[8, "module-botorch.optim.parameter_constraints"]], "botorch.posteriors": [[9, "module-botorch.posteriors"]], "Posterior APIs": [[9, "posterior-apis"]], "Abstract Posterior API": [[9, "module-botorch.posteriors.posterior"]], "Posterior List API": [[9, "module-botorch.posteriors.posterior_list"]], "Posteriors": [[9, "posteriors"]], "Torch Posterior": [[9, "module-botorch.posteriors.torch"]], "GPyTorch Posterior": [[9, "module-botorch.posteriors.gpytorch"]], "Determinstic Posterior": [[9, "module-botorch.posteriors.deterministic"]], "Ensemble Posterior": [[9, "module-botorch.posteriors.ensemble"]], "Higher Order GP Posterior": [[9, "module-botorch.posteriors.higher_order"]], "Multitask GP Posterior": [[9, "module-botorch.posteriors.multitask"]], "Transformed Posterior": [[9, "module-botorch.posteriors.transformed"]], "Fully Bayesian Posterior": [[9, "module-botorch.posteriors.fully_bayesian"]], "Base Samples": [[9, "module-botorch.posteriors.base_samples"]], "botorch.sampling": [[10, "module-botorch.sampling"]], "Monte-Carlo Sampler API": [[10, "module-botorch.sampling.base"]], "Deterministic Sampler": [[10, "module-botorch.sampling.deterministic"]], "Index Sampler": [[10, "module-botorch.sampling.index_sampler"]], "Get Sampler Helper": [[10, "module-botorch.sampling.get_sampler"]], "List Sampler": [[10, "module-botorch.sampling.list_sampler"]], "Gaussian Monte-Carlo Samplers": [[10, "module-botorch.sampling.normal"]], "Pairwise Monte-Carlo Samplers": [[10, "module-botorch.sampling.pairwise_samplers"]], "QMC Base Functionality": [[10, "module-botorch.sampling.qmc"]], "Stochastic Samplers": [[10, "module-botorch.sampling.stochastic_samplers"]], "Pathwise Sampling": [[10, "pathwise-sampling"]], "Feature Maps": [[10, "module-botorch.sampling.pathwise.features.maps"]], "Feature Map Generators": [[10, "module-botorch.sampling.pathwise.features.generators"]], "Sample Paths": [[10, "module-botorch.sampling.pathwise.paths"]], "Pathwise Prior Samplers": [[10, "module-botorch.sampling.pathwise.prior_samplers"]], "Pathwise Posterior Samplers": [[10, "module-botorch.sampling.pathwise.posterior_samplers"]], "Pathwise Update Strategies": [[10, "module-botorch.sampling.pathwise.update_strategies"]], "botorch.settings": [[11, "module-botorch.settings"]], "botorch.test_functions": [[12, "module-botorch.test_functions"]], "Abstract Test Function API": [[12, "module-botorch.test_functions.base"]], "Synthetic Test Functions": [[12, "module-botorch.test_functions.synthetic"]], "Multi-Fidelity Synthetic Test Functions": [[12, "module-botorch.test_functions.multi_fidelity"]], "Multi-Objective Synthetic Test Functions": [[12, "module-botorch.test_functions.multi_objective"]], "Multi-Objective Multi-Fidelity Synthetic Test Functions": [[12, "module-botorch.test_functions.multi_objective_multi_fidelity"]], "Sensitivity Analysis Test Functions": [[12, "module-botorch.test_functions.sensitivity_analysis"]], "botorch.utils": [[13, "module-botorch.utils"]], "Constraints": [[13, "module-botorch.utils.constraints"]], "Containers": [[13, "module-botorch.utils.containers"]], "Context Managers": [[13, "module-botorch.utils.context_managers"]], "Datasets": [[13, "module-botorch.utils.datasets"]], "Dispatcher": [[13, "module-botorch.utils.dispatcher"]], "Low-Rank Cholesky Update Utils": [[13, "module-botorch.utils.low_rank"]], "Objective": [[13, "module-botorch.utils.objective"]], "Rounding": [[13, "module-botorch.utils.rounding"]], "Sampling": [[13, "module-botorch.utils.sampling"]], "Sampling from GP priors": [[13, "module-botorch.utils.gp_sampling"]], "Testing": [[13, "module-botorch.utils.testing"]], "Torch": [[13, "module-botorch.utils.torch"]], "Transformations": [[13, "module-botorch.utils.transforms"]], "Feasible Volume": [[13, "module-botorch.utils.feasible_volume"]], "Types and Type Hints": [[13, "module-botorch.utils.types"]], "Constants": [[13, "module-botorch.utils.constants"]], "Safe Math": [[13, "module-botorch.utils.safe_math"]], "Multi-Objective Utilities": [[13, "multi-objective-utilities"]], "Abstract Box Decompositions": [[13, "module-botorch.utils.multi_objective.box_decompositions.box_decomposition"]], "Box Decomposition List": [[13, "module-botorch.utils.multi_objective.box_decompositions.box_decomposition_list"]], "Box Decomposition Utilities": [[13, "module-botorch.utils.multi_objective.box_decompositions.utils"]], "Dominated Partitionings": [[13, "module-botorch.utils.multi_objective.box_decompositions.dominated"]], "Hypervolume": [[13, "module-botorch.utils.multi_objective.hypervolume"]], "Non-dominated Partitionings": [[13, "module-botorch.utils.multi_objective.box_decompositions.non_dominated"]], "Pareto": [[13, "module-botorch.utils.multi_objective.pareto"]], "Scalarization": [[13, "module-botorch.utils.multi_objective.scalarization"]], "Probability Utilities": [[13, "probability-utilities"]], "Multivariate Gaussian Probabilities via Bivariate Conditioning": [[13, "module-botorch.utils.probability.mvnxpb"]], "Truncated Multivariate Normal Distribution": [[13, "module-botorch.utils.probability.truncated_multivariate_normal"]], "Unified Skew Normal Distribution": [[13, "module-botorch.utils.probability.unified_skew_normal"]], "Bivariate Normal Probabilities and Statistics": [[13, "module-botorch.utils.probability.bvn"]], "Elliptic Slice Sampler with Linear Constraints": [[13, "module-botorch.utils.probability.lin_ess"]], "Linear Algebra Helpers": [[13, "module-botorch.utils.probability.linalg"]], "Probability Helpers": [[13, "module-botorch.utils.probability.utils"]]}, "indexentries": {"analyticacquisitionfunction (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.AnalyticAcquisitionFunction"]], "analyticexpectedutilityofbestoption (class in botorch.acquisition.preference)": [[0, "botorch.acquisition.preference.AnalyticExpectedUtilityOfBestOption"]], "analyticmultioutputobjective (class in botorch.acquisition.multi_objective.objective)": [[0, "botorch.acquisition.multi_objective.objective.AnalyticMultiOutputObjective"]], "cvar (class in botorch.acquisition.risk_measures)": [[0, "botorch.acquisition.risk_measures.CVaR"]], "constrainedexpectedimprovement (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.ConstrainedExpectedImprovement"]], "constrainedmcobjective (class in botorch.acquisition.objective)": [[0, "botorch.acquisition.objective.ConstrainedMCObjective"]], "discretemaxvaluebase (class in botorch.acquisition.max_value_entropy_search)": [[0, "botorch.acquisition.max_value_entropy_search.DiscreteMaxValueBase"]], "expectation (class in botorch.acquisition.risk_measures)": [[0, "botorch.acquisition.risk_measures.Expectation"]], "expectationposteriortransform (class in botorch.acquisition.objective)": [[0, "botorch.acquisition.objective.ExpectationPosteriorTransform"]], "expectedhypervolumeimprovement (class in botorch.acquisition.multi_objective.analytic)": [[0, "botorch.acquisition.multi_objective.analytic.ExpectedHypervolumeImprovement"]], "expectedimprovement (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.ExpectedImprovement"]], "feasibilityweightedmcmultioutputobjective (class in botorch.acquisition.multi_objective.objective)": [[0, "botorch.acquisition.multi_objective.objective.FeasibilityWeightedMCMultiOutputObjective"]], "fixedfeatureacquisitionfunction (class in botorch.acquisition.fixed_feature)": [[0, "botorch.acquisition.fixed_feature.FixedFeatureAcquisitionFunction"]], "gaussianpenalty (class in botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.GaussianPenalty"]], "genericcostawareutility (class in botorch.acquisition.cost_aware)": [[0, "botorch.acquisition.cost_aware.GenericCostAwareUtility"]], "genericmcmultioutputobjective (class in botorch.acquisition.multi_objective.objective)": [[0, "botorch.acquisition.multi_objective.objective.GenericMCMultiOutputObjective"]], "genericmcobjective (class in botorch.acquisition.objective)": [[0, "botorch.acquisition.objective.GenericMCObjective"]], "grouplassopenalty (class in botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.GroupLassoPenalty"]], "identityanalyticmultioutputobjective (class in botorch.acquisition.multi_objective.objective)": [[0, "botorch.acquisition.multi_objective.objective.IdentityAnalyticMultiOutputObjective"]], "identitymcmultioutputobjective (class in botorch.acquisition.multi_objective.objective)": [[0, "botorch.acquisition.multi_objective.objective.IdentityMCMultiOutputObjective"]], "identitymcobjective (class in botorch.acquisition.objective)": [[0, "botorch.acquisition.objective.IdentityMCObjective"]], "independentcvar (class in botorch.acquisition.multi_objective.multi_output_risk_measures)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.IndependentCVaR"]], "independentvar (class in botorch.acquisition.multi_objective.multi_output_risk_measures)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.IndependentVaR"]], "inversecostweightedutility (class in botorch.acquisition.cost_aware)": [[0, "botorch.acquisition.cost_aware.InverseCostWeightedUtility"]], "l1penalty (class in botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.L1Penalty"]], "l1penaltyobjective (class in botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.L1PenaltyObjective"]], "l2penalty (class in botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.L2Penalty"]], "learnedobjective (class in botorch.acquisition.objective)": [[0, "botorch.acquisition.objective.LearnedObjective"]], "linearmcobjective (class in botorch.acquisition.objective)": [[0, "botorch.acquisition.objective.LinearMCObjective"]], "logconstrainedexpectedimprovement (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.LogConstrainedExpectedImprovement"]], "logexpectedimprovement (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.LogExpectedImprovement"]], "lognoisyexpectedimprovement (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.LogNoisyExpectedImprovement"]], "logprobabilityofimprovement (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.LogProbabilityOfImprovement"]], "lowerboundmultiobjectiveentropysearch (class in botorch.acquisition.multi_objective.joint_entropy_search)": [[0, "botorch.acquisition.multi_objective.joint_entropy_search.LowerBoundMultiObjectiveEntropySearch"]], "mars (class in botorch.acquisition.multi_objective.multi_output_risk_measures)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MARS"]], "mcacquisitionfunction (class in botorch.acquisition.monte_carlo)": [[0, "botorch.acquisition.monte_carlo.MCAcquisitionFunction"]], "mcmultioutputobjective (class in botorch.acquisition.multi_objective.objective)": [[0, "botorch.acquisition.multi_objective.objective.MCMultiOutputObjective"]], "momf (class in botorch.acquisition.multi_objective.multi_fidelity)": [[0, "botorch.acquisition.multi_objective.multi_fidelity.MOMF"]], "mvar (class in botorch.acquisition.multi_objective.multi_output_risk_measures)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MVaR"]], "multiobjectiveanalyticacquisitionfunction (class in botorch.acquisition.multi_objective.analytic)": [[0, "botorch.acquisition.multi_objective.analytic.MultiObjectiveAnalyticAcquisitionFunction"]], "multiobjectivemcacquisitionfunction (class in botorch.acquisition.multi_objective.monte_carlo)": [[0, "botorch.acquisition.multi_objective.monte_carlo.MultiObjectiveMCAcquisitionFunction"]], "multioutputexpectation (class in botorch.acquisition.multi_objective.multi_output_risk_measures)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MultiOutputExpectation"]], "multioutputworstcase (class in botorch.acquisition.multi_objective.multi_output_risk_measures)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MultiOutputWorstCase"]], "noisyexpectedimprovement (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.NoisyExpectedImprovement"]], "pairwisemcposteriorvariance (class in botorch.acquisition.active_learning)": [[0, "botorch.acquisition.active_learning.PairwiseMCPosteriorVariance"]], "penalizedacquisitionfunction (class in botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.PenalizedAcquisitionFunction"]], "penalizedmcobjective (class in botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.PenalizedMCObjective"]], "posteriormean (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.PosteriorMean"]], "probabilityofimprovement (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.ProbabilityOfImprovement"]], "projectedacquisitionfunction (class in botorch.acquisition.knowledge_gradient)": [[0, "botorch.acquisition.knowledge_gradient.ProjectedAcquisitionFunction"]], "proximalacquisitionfunction (class in botorch.acquisition.proximal)": [[0, "botorch.acquisition.proximal.ProximalAcquisitionFunction"]], "scalarizedobjective (class in botorch.acquisition.objective)": [[0, "botorch.acquisition.objective.ScalarizedObjective"]], "scalarizedposteriormean (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.ScalarizedPosteriorMean"]], "scalarizedposteriortransform (class in botorch.acquisition.objective)": [[0, "botorch.acquisition.objective.ScalarizedPosteriorTransform"]], "unstandardizeanalyticmultioutputobjective (class in botorch.acquisition.multi_objective.objective)": [[0, "botorch.acquisition.multi_objective.objective.UnstandardizeAnalyticMultiOutputObjective"]], "unstandardizemcmultioutputobjective (class in botorch.acquisition.multi_objective.objective)": [[0, "botorch.acquisition.multi_objective.objective.UnstandardizeMCMultiOutputObjective"]], "upperconfidencebound (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.UpperConfidenceBound"]], "var (class in botorch.acquisition.risk_measures)": [[0, "botorch.acquisition.risk_measures.VaR"]], "weightedmcmultioutputobjective (class in botorch.acquisition.multi_objective.objective)": [[0, "botorch.acquisition.multi_objective.objective.WeightedMCMultiOutputObjective"]], "worstcase (class in botorch.acquisition.risk_measures)": [[0, "botorch.acquisition.risk_measures.WorstCase"]], "x_baseline (botorch.acquisition.multi_objective.monte_carlo.qnoisyexpectedhypervolumeimprovement property)": [[0, "botorch.acquisition.multi_objective.monte_carlo.qNoisyExpectedHypervolumeImprovement.X_baseline"]], "x_pending (botorch.acquisition.fixed_feature.fixedfeatureacquisitionfunction property)": [[0, "botorch.acquisition.fixed_feature.FixedFeatureAcquisitionFunction.X_pending"]], "x_pending (botorch.acquisition.knowledge_gradient.qmultifidelityknowledgegradient attribute)": [[0, "botorch.acquisition.knowledge_gradient.qMultiFidelityKnowledgeGradient.X_pending"]], "x_pending (botorch.acquisition.penalized.penalizedacquisitionfunction property)": [[0, "botorch.acquisition.penalized.PenalizedAcquisitionFunction.X_pending"]], "_default_sample_shape (botorch.acquisition.multi_objective.max_value_entropy_search.qmultiobjectivemaxvalueentropy attribute)": [[0, "botorch.acquisition.multi_objective.max_value_entropy_search.qMultiObjectiveMaxValueEntropy._default_sample_shape"]], "acqf_input_constructor() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.acqf_input_constructor"]], "baseline_y (botorch.acquisition.multi_objective.multi_output_risk_measures.mars property)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MARS.baseline_Y"]], "botorch.acquisition": [[0, "module-botorch.acquisition"]], "botorch.acquisition.acquisition": [[0, "module-botorch.acquisition.acquisition"]], "botorch.acquisition.active_learning": [[0, "module-botorch.acquisition.active_learning"]], "botorch.acquisition.analytic": [[0, "module-botorch.acquisition.analytic"]], "botorch.acquisition.cached_cholesky": [[0, "module-botorch.acquisition.cached_cholesky"]], "botorch.acquisition.cost_aware": [[0, "module-botorch.acquisition.cost_aware"]], "botorch.acquisition.fixed_feature": [[0, "module-botorch.acquisition.fixed_feature"]], "botorch.acquisition.input_constructors": [[0, "module-botorch.acquisition.input_constructors"]], "botorch.acquisition.joint_entropy_search": [[0, "module-botorch.acquisition.joint_entropy_search"]], "botorch.acquisition.knowledge_gradient": [[0, "module-botorch.acquisition.knowledge_gradient"]], "botorch.acquisition.max_value_entropy_search": [[0, "module-botorch.acquisition.max_value_entropy_search"]], "botorch.acquisition.monte_carlo": [[0, "module-botorch.acquisition.monte_carlo"]], "botorch.acquisition.multi_objective.analytic": [[0, "module-botorch.acquisition.multi_objective.analytic"]], "botorch.acquisition.multi_objective.joint_entropy_search": [[0, "module-botorch.acquisition.multi_objective.joint_entropy_search"]], "botorch.acquisition.multi_objective.max_value_entropy_search": [[0, "module-botorch.acquisition.multi_objective.max_value_entropy_search"]], "botorch.acquisition.multi_objective.monte_carlo": [[0, "module-botorch.acquisition.multi_objective.monte_carlo"]], "botorch.acquisition.multi_objective.multi_fidelity": [[0, "module-botorch.acquisition.multi_objective.multi_fidelity"]], "botorch.acquisition.multi_objective.multi_output_risk_measures": [[0, "module-botorch.acquisition.multi_objective.multi_output_risk_measures"]], "botorch.acquisition.multi_objective.objective": [[0, "module-botorch.acquisition.multi_objective.objective"]], "botorch.acquisition.multi_objective.predictive_entropy_search": [[0, "module-botorch.acquisition.multi_objective.predictive_entropy_search"]], "botorch.acquisition.multi_objective.utils": [[0, "module-botorch.acquisition.multi_objective.utils"]], "botorch.acquisition.multi_step_lookahead": [[0, "module-botorch.acquisition.multi_step_lookahead"]], "botorch.acquisition.objective": [[0, "module-botorch.acquisition.objective"]], "botorch.acquisition.penalized": [[0, "module-botorch.acquisition.penalized"]], "botorch.acquisition.predictive_entropy_search": [[0, "module-botorch.acquisition.predictive_entropy_search"]], "botorch.acquisition.preference": [[0, "module-botorch.acquisition.preference"]], "botorch.acquisition.proximal": [[0, "module-botorch.acquisition.proximal"]], "botorch.acquisition.risk_measures": [[0, "module-botorch.acquisition.risk_measures"]], "botorch.acquisition.utils": [[0, "module-botorch.acquisition.utils"]], "chebyshev_objective (botorch.acquisition.multi_objective.multi_output_risk_measures.mars property)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MARS.chebyshev_objective"]], "chebyshev_weights (botorch.acquisition.multi_objective.multi_output_risk_measures.mars property)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MARS.chebyshev_weights"]], "compute_sample_box_decomposition() (in module botorch.acquisition.multi_objective.utils)": [[0, "botorch.acquisition.multi_objective.utils.compute_sample_box_decomposition"]], "construct_inputs_ehvi() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_EHVI"]], "construct_inputs_analytic_base() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_analytic_base"]], "construct_inputs_analytic_eubo() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_analytic_eubo"]], "construct_inputs_best_f() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_best_f"]], "construct_inputs_constrained_ei() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_constrained_ei"]], "construct_inputs_mc_base() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_mc_base"]], "construct_inputs_mf_base() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_mf_base"]], "construct_inputs_noisy_ei() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_noisy_ei"]], "construct_inputs_qehvi() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qEHVI"]], "construct_inputs_qei() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qEI"]], "construct_inputs_qkg() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qKG"]], "construct_inputs_qmes() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qMES"]], "construct_inputs_qmfkg() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qMFKG"]], "construct_inputs_qmfmes() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qMFMES"]], "construct_inputs_qnehvi() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qNEHVI"]], "construct_inputs_qnei() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qNEI"]], "construct_inputs_qpi() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qPI"]], "construct_inputs_qucb() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_qUCB"]], "construct_inputs_ucb() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.construct_inputs_ucb"]], "cost_sampler (botorch.acquisition.knowledge_gradient.qmultifidelityknowledgegradient property)": [[0, "botorch.acquisition.knowledge_gradient.qMultiFidelityKnowledgeGradient.cost_sampler"]], "cost_sampler (botorch.acquisition.max_value_entropy_search.qmultifidelitymaxvalueentropy property)": [[0, "botorch.acquisition.max_value_entropy_search.qMultiFidelityMaxValueEntropy.cost_sampler"]], "evaluate() (botorch.acquisition.knowledge_gradient.qknowledgegradient method)": [[0, "botorch.acquisition.knowledge_gradient.qKnowledgeGradient.evaluate"]], "evaluate() (botorch.acquisition.objective.expectationposteriortransform method)": [[0, "botorch.acquisition.objective.ExpectationPosteriorTransform.evaluate"]], "evaluate() (botorch.acquisition.objective.scalarizedposteriortransform method)": [[0, "botorch.acquisition.objective.ScalarizedPosteriorTransform.evaluate"]], "expand_trace_observations() (in module botorch.acquisition.utils)": [[0, "botorch.acquisition.utils.expand_trace_observations"]], "extract_candidates() (botorch.acquisition.knowledge_gradient.qknowledgegradient method)": [[0, "botorch.acquisition.knowledge_gradient.qKnowledgeGradient.extract_candidates"]], "extract_candidates() (botorch.acquisition.multi_step_lookahead.qmultisteplookahead method)": [[0, "botorch.acquisition.multi_step_lookahead.qMultiStepLookahead.extract_candidates"]], "forward() (botorch.acquisition.active_learning.pairwisemcposteriorvariance method)": [[0, "botorch.acquisition.active_learning.PairwiseMCPosteriorVariance.forward"]], "forward() (botorch.acquisition.active_learning.qnegintegratedposteriorvariance method)": [[0, "botorch.acquisition.active_learning.qNegIntegratedPosteriorVariance.forward"]], "forward() (botorch.acquisition.analytic.constrainedexpectedimprovement method)": [[0, "botorch.acquisition.analytic.ConstrainedExpectedImprovement.forward"]], "forward() (botorch.acquisition.analytic.expectedimprovement method)": [[0, "botorch.acquisition.analytic.ExpectedImprovement.forward"]], "forward() (botorch.acquisition.analytic.logconstrainedexpectedimprovement method)": [[0, "botorch.acquisition.analytic.LogConstrainedExpectedImprovement.forward"]], "forward() (botorch.acquisition.analytic.logexpectedimprovement method)": [[0, "botorch.acquisition.analytic.LogExpectedImprovement.forward"]], "forward() (botorch.acquisition.analytic.lognoisyexpectedimprovement method)": [[0, "botorch.acquisition.analytic.LogNoisyExpectedImprovement.forward"]], "forward() (botorch.acquisition.analytic.logprobabilityofimprovement method)": [[0, "botorch.acquisition.analytic.LogProbabilityOfImprovement.forward"]], "forward() (botorch.acquisition.analytic.noisyexpectedimprovement method)": [[0, "botorch.acquisition.analytic.NoisyExpectedImprovement.forward"]], "forward() (botorch.acquisition.analytic.posteriormean method)": [[0, "botorch.acquisition.analytic.PosteriorMean.forward"]], "forward() (botorch.acquisition.analytic.probabilityofimprovement method)": [[0, "botorch.acquisition.analytic.ProbabilityOfImprovement.forward"]], "forward() (botorch.acquisition.analytic.scalarizedposteriormean method)": [[0, "botorch.acquisition.analytic.ScalarizedPosteriorMean.forward"]], "forward() (botorch.acquisition.analytic.upperconfidencebound method)": [[0, "botorch.acquisition.analytic.UpperConfidenceBound.forward"]], "forward() (botorch.acquisition.analytic.qanalyticprobabilityofimprovement method)": [[0, "botorch.acquisition.analytic.qAnalyticProbabilityOfImprovement.forward"]], "forward() (botorch.acquisition.cost_aware.genericcostawareutility method)": [[0, "botorch.acquisition.cost_aware.GenericCostAwareUtility.forward"]], "forward() (botorch.acquisition.cost_aware.inversecostweightedutility method)": [[0, "botorch.acquisition.cost_aware.InverseCostWeightedUtility.forward"]], "forward() (botorch.acquisition.fixed_feature.fixedfeatureacquisitionfunction method)": [[0, "botorch.acquisition.fixed_feature.FixedFeatureAcquisitionFunction.forward"]], "forward() (botorch.acquisition.joint_entropy_search.qlowerboundjointentropysearch method)": [[0, "botorch.acquisition.joint_entropy_search.qLowerBoundJointEntropySearch.forward"]], "forward() (botorch.acquisition.knowledge_gradient.projectedacquisitionfunction method)": [[0, "botorch.acquisition.knowledge_gradient.ProjectedAcquisitionFunction.forward"]], "forward() (botorch.acquisition.knowledge_gradient.qknowledgegradient method)": [[0, "botorch.acquisition.knowledge_gradient.qKnowledgeGradient.forward"]], "forward() (botorch.acquisition.knowledge_gradient.qmultifidelityknowledgegradient method)": [[0, "botorch.acquisition.knowledge_gradient.qMultiFidelityKnowledgeGradient.forward"]], "forward() (botorch.acquisition.max_value_entropy_search.qmultifidelitymaxvalueentropy method)": [[0, "botorch.acquisition.max_value_entropy_search.qMultiFidelityMaxValueEntropy.forward"]], "forward() (botorch.acquisition.monte_carlo.mcacquisitionfunction method)": [[0, "botorch.acquisition.monte_carlo.MCAcquisitionFunction.forward"]], "forward() (botorch.acquisition.monte_carlo.qexpectedimprovement method)": [[0, "botorch.acquisition.monte_carlo.qExpectedImprovement.forward"]], "forward() (botorch.acquisition.monte_carlo.qnoisyexpectedimprovement method)": [[0, "botorch.acquisition.monte_carlo.qNoisyExpectedImprovement.forward"]], "forward() (botorch.acquisition.monte_carlo.qprobabilityofimprovement method)": [[0, "botorch.acquisition.monte_carlo.qProbabilityOfImprovement.forward"]], "forward() (botorch.acquisition.monte_carlo.qsimpleregret method)": [[0, "botorch.acquisition.monte_carlo.qSimpleRegret.forward"]], "forward() (botorch.acquisition.monte_carlo.qupperconfidencebound method)": [[0, "botorch.acquisition.monte_carlo.qUpperConfidenceBound.forward"]], "forward() (botorch.acquisition.multi_objective.analytic.expectedhypervolumeimprovement method)": [[0, "botorch.acquisition.multi_objective.analytic.ExpectedHypervolumeImprovement.forward"]], "forward() (botorch.acquisition.multi_objective.analytic.multiobjectiveanalyticacquisitionfunction method)": [[0, "botorch.acquisition.multi_objective.analytic.MultiObjectiveAnalyticAcquisitionFunction.forward"]], "forward() (botorch.acquisition.multi_objective.joint_entropy_search.lowerboundmultiobjectiveentropysearch method)": [[0, "botorch.acquisition.multi_objective.joint_entropy_search.LowerBoundMultiObjectiveEntropySearch.forward"]], "forward() (botorch.acquisition.multi_objective.joint_entropy_search.qlowerboundmultiobjectivejointentropysearch method)": [[0, "botorch.acquisition.multi_objective.joint_entropy_search.qLowerBoundMultiObjectiveJointEntropySearch.forward"]], "forward() (botorch.acquisition.multi_objective.max_value_entropy_search.qlowerboundmultiobjectivemaxvalueentropysearch method)": [[0, "botorch.acquisition.multi_objective.max_value_entropy_search.qLowerBoundMultiObjectiveMaxValueEntropySearch.forward"]], "forward() (botorch.acquisition.multi_objective.max_value_entropy_search.qmultiobjectivemaxvalueentropy method)": [[0, "botorch.acquisition.multi_objective.max_value_entropy_search.qMultiObjectiveMaxValueEntropy.forward"]], "forward() (botorch.acquisition.multi_objective.monte_carlo.multiobjectivemcacquisitionfunction method)": [[0, "botorch.acquisition.multi_objective.monte_carlo.MultiObjectiveMCAcquisitionFunction.forward"]], "forward() (botorch.acquisition.multi_objective.monte_carlo.qexpectedhypervolumeimprovement method)": [[0, "botorch.acquisition.multi_objective.monte_carlo.qExpectedHypervolumeImprovement.forward"]], "forward() (botorch.acquisition.multi_objective.monte_carlo.qnoisyexpectedhypervolumeimprovement method)": [[0, "botorch.acquisition.multi_objective.monte_carlo.qNoisyExpectedHypervolumeImprovement.forward"]], "forward() (botorch.acquisition.multi_objective.multi_fidelity.momf method)": [[0, "botorch.acquisition.multi_objective.multi_fidelity.MOMF.forward"]], "forward() (botorch.acquisition.multi_objective.multi_output_risk_measures.independentcvar method)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.IndependentCVaR.forward"]], "forward() (botorch.acquisition.multi_objective.multi_output_risk_measures.independentvar method)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.IndependentVaR.forward"]], "forward() (botorch.acquisition.multi_objective.multi_output_risk_measures.mvar method)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MVaR.forward"]], "forward() (botorch.acquisition.multi_objective.multi_output_risk_measures.multioutputexpectation method)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MultiOutputExpectation.forward"]], "forward() (botorch.acquisition.multi_objective.multi_output_risk_measures.multioutputworstcase method)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MultiOutputWorstCase.forward"]], "forward() (botorch.acquisition.multi_objective.objective.analyticmultioutputobjective method)": [[0, "botorch.acquisition.multi_objective.objective.AnalyticMultiOutputObjective.forward"]], "forward() (botorch.acquisition.multi_objective.objective.feasibilityweightedmcmultioutputobjective method)": [[0, "botorch.acquisition.multi_objective.objective.FeasibilityWeightedMCMultiOutputObjective.forward"]], "forward() (botorch.acquisition.multi_objective.objective.identityanalyticmultioutputobjective method)": [[0, "botorch.acquisition.multi_objective.objective.IdentityAnalyticMultiOutputObjective.forward"]], "forward() (botorch.acquisition.multi_objective.objective.identitymcmultioutputobjective method)": [[0, "botorch.acquisition.multi_objective.objective.IdentityMCMultiOutputObjective.forward"]], "forward() (botorch.acquisition.multi_objective.objective.mcmultioutputobjective method)": [[0, "botorch.acquisition.multi_objective.objective.MCMultiOutputObjective.forward"]], "forward() (botorch.acquisition.multi_objective.objective.unstandardizeanalyticmultioutputobjective method)": [[0, "botorch.acquisition.multi_objective.objective.UnstandardizeAnalyticMultiOutputObjective.forward"]], "forward() (botorch.acquisition.multi_objective.objective.unstandardizemcmultioutputobjective method)": [[0, "botorch.acquisition.multi_objective.objective.UnstandardizeMCMultiOutputObjective.forward"]], "forward() (botorch.acquisition.multi_objective.objective.weightedmcmultioutputobjective method)": [[0, "botorch.acquisition.multi_objective.objective.WeightedMCMultiOutputObjective.forward"]], "forward() (botorch.acquisition.multi_objective.predictive_entropy_search.qmultiobjectivepredictiveentropysearch method)": [[0, "botorch.acquisition.multi_objective.predictive_entropy_search.qMultiObjectivePredictiveEntropySearch.forward"]], "forward() (botorch.acquisition.multi_step_lookahead.qmultisteplookahead method)": [[0, "botorch.acquisition.multi_step_lookahead.qMultiStepLookahead.forward"]], "forward() (botorch.acquisition.objective.constrainedmcobjective method)": [[0, "botorch.acquisition.objective.ConstrainedMCObjective.forward"]], "forward() (botorch.acquisition.objective.expectationposteriortransform method)": [[0, "botorch.acquisition.objective.ExpectationPosteriorTransform.forward"]], "forward() (botorch.acquisition.objective.genericmcobjective method)": [[0, "botorch.acquisition.objective.GenericMCObjective.forward"]], "forward() (botorch.acquisition.objective.identitymcobjective method)": [[0, "botorch.acquisition.objective.IdentityMCObjective.forward"]], "forward() (botorch.acquisition.objective.learnedobjective method)": [[0, "botorch.acquisition.objective.LearnedObjective.forward"]], "forward() (botorch.acquisition.objective.linearmcobjective method)": [[0, "botorch.acquisition.objective.LinearMCObjective.forward"]], "forward() (botorch.acquisition.objective.scalarizedposteriortransform method)": [[0, "botorch.acquisition.objective.ScalarizedPosteriorTransform.forward"]], "forward() (botorch.acquisition.penalized.gaussianpenalty method)": [[0, "botorch.acquisition.penalized.GaussianPenalty.forward"]], "forward() (botorch.acquisition.penalized.grouplassopenalty method)": [[0, "botorch.acquisition.penalized.GroupLassoPenalty.forward"]], "forward() (botorch.acquisition.penalized.l1penalty method)": [[0, "botorch.acquisition.penalized.L1Penalty.forward"]], "forward() (botorch.acquisition.penalized.l1penaltyobjective method)": [[0, "botorch.acquisition.penalized.L1PenaltyObjective.forward"]], "forward() (botorch.acquisition.penalized.l2penalty method)": [[0, "botorch.acquisition.penalized.L2Penalty.forward"]], "forward() (botorch.acquisition.penalized.penalizedacquisitionfunction method)": [[0, "botorch.acquisition.penalized.PenalizedAcquisitionFunction.forward"]], "forward() (botorch.acquisition.penalized.penalizedmcobjective method)": [[0, "botorch.acquisition.penalized.PenalizedMCObjective.forward"]], "forward() (botorch.acquisition.predictive_entropy_search.qpredictiveentropysearch method)": [[0, "botorch.acquisition.predictive_entropy_search.qPredictiveEntropySearch.forward"]], "forward() (botorch.acquisition.preference.analyticexpectedutilityofbestoption method)": [[0, "botorch.acquisition.preference.AnalyticExpectedUtilityOfBestOption.forward"]], "forward() (botorch.acquisition.proximal.proximalacquisitionfunction method)": [[0, "botorch.acquisition.proximal.ProximalAcquisitionFunction.forward"]], "forward() (botorch.acquisition.risk_measures.cvar method)": [[0, "botorch.acquisition.risk_measures.CVaR.forward"]], "forward() (botorch.acquisition.risk_measures.expectation method)": [[0, "botorch.acquisition.risk_measures.Expectation.forward"]], "forward() (botorch.acquisition.risk_measures.var method)": [[0, "botorch.acquisition.risk_measures.VaR.forward"]], "forward() (botorch.acquisition.risk_measures.worstcase method)": [[0, "botorch.acquisition.risk_measures.WorstCase.forward"]], "get_acqf_input_constructor() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.get_acqf_input_constructor"]], "get_acquisition_function() (in module botorch.acquisition.utils)": [[0, "botorch.acquisition.utils.get_acquisition_function"]], "get_augmented_q_batch_size() (botorch.acquisition.knowledge_gradient.qknowledgegradient method)": [[0, "botorch.acquisition.knowledge_gradient.qKnowledgeGradient.get_augmented_q_batch_size"]], "get_augmented_q_batch_size() (botorch.acquisition.multi_step_lookahead.qmultisteplookahead method)": [[0, "botorch.acquisition.multi_step_lookahead.qMultiStepLookahead.get_augmented_q_batch_size"]], "get_best_f_analytic() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.get_best_f_analytic"]], "get_best_f_mc() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.get_best_f_mc"]], "get_default_partitioning_alpha() (in module botorch.acquisition.multi_objective.utils)": [[0, "botorch.acquisition.multi_objective.utils.get_default_partitioning_alpha"]], "get_induced_fantasy_model() (botorch.acquisition.multi_step_lookahead.qmultisteplookahead method)": [[0, "botorch.acquisition.multi_step_lookahead.qMultiStepLookahead.get_induced_fantasy_model"]], "get_infeasible_cost() (in module botorch.acquisition.utils)": [[0, "botorch.acquisition.utils.get_infeasible_cost"]], "get_multi_step_tree_input_representation() (botorch.acquisition.multi_step_lookahead.qmultisteplookahead method)": [[0, "botorch.acquisition.multi_step_lookahead.qMultiStepLookahead.get_multi_step_tree_input_representation"]], "get_mvar_set_cpu() (botorch.acquisition.multi_objective.multi_output_risk_measures.mvar method)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MVaR.get_mvar_set_cpu"]], "get_mvar_set_gpu() (botorch.acquisition.multi_objective.multi_output_risk_measures.mvar method)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MVaR.get_mvar_set_gpu"]], "get_split_shapes() (botorch.acquisition.multi_step_lookahead.qmultisteplookahead method)": [[0, "botorch.acquisition.multi_step_lookahead.qMultiStepLookahead.get_split_shapes"]], "group_lasso_regularizer() (in module botorch.acquisition.penalized)": [[0, "botorch.acquisition.penalized.group_lasso_regularizer"]], "is_nonnegative() (in module botorch.acquisition.utils)": [[0, "botorch.acquisition.utils.is_nonnegative"]], "log_cdf_robust() (in module botorch.acquisition.multi_objective.predictive_entropy_search)": [[0, "botorch.acquisition.multi_objective.predictive_entropy_search.log_cdf_robust"]], "make_best_f() (in module botorch.acquisition.multi_step_lookahead)": [[0, "botorch.acquisition.multi_step_lookahead.make_best_f"]], "model (botorch.acquisition.active_learning.pairwisemcposteriorvariance attribute)": [[0, "botorch.acquisition.active_learning.PairwiseMCPosteriorVariance.model"]], "model (botorch.acquisition.active_learning.qnegintegratedposteriorvariance attribute)": [[0, "botorch.acquisition.active_learning.qNegIntegratedPosteriorVariance.model"]], "model (botorch.acquisition.analytic.constrainedexpectedimprovement attribute)": [[0, "botorch.acquisition.analytic.ConstrainedExpectedImprovement.model"]], "model (botorch.acquisition.analytic.expectedimprovement attribute)": [[0, "botorch.acquisition.analytic.ExpectedImprovement.model"]], "model (botorch.acquisition.analytic.logconstrainedexpectedimprovement attribute)": [[0, "botorch.acquisition.analytic.LogConstrainedExpectedImprovement.model"]], "model (botorch.acquisition.analytic.logexpectedimprovement attribute)": [[0, "botorch.acquisition.analytic.LogExpectedImprovement.model"]], "model (botorch.acquisition.analytic.lognoisyexpectedimprovement attribute)": [[0, "botorch.acquisition.analytic.LogNoisyExpectedImprovement.model"]], "model (botorch.acquisition.analytic.logprobabilityofimprovement attribute)": [[0, "botorch.acquisition.analytic.LogProbabilityOfImprovement.model"]], "model (botorch.acquisition.analytic.noisyexpectedimprovement attribute)": [[0, "botorch.acquisition.analytic.NoisyExpectedImprovement.model"]], "model (botorch.acquisition.analytic.posteriormean attribute)": [[0, "botorch.acquisition.analytic.PosteriorMean.model"]], "model (botorch.acquisition.analytic.probabilityofimprovement attribute)": [[0, "botorch.acquisition.analytic.ProbabilityOfImprovement.model"]], "model (botorch.acquisition.analytic.scalarizedposteriormean attribute)": [[0, "botorch.acquisition.analytic.ScalarizedPosteriorMean.model"]], "model (botorch.acquisition.analytic.upperconfidencebound attribute)": [[0, "botorch.acquisition.analytic.UpperConfidenceBound.model"]], "model (botorch.acquisition.analytic.qanalyticprobabilityofimprovement attribute)": [[0, "botorch.acquisition.analytic.qAnalyticProbabilityOfImprovement.model"]], "model (botorch.acquisition.joint_entropy_search.qlowerboundjointentropysearch attribute)": [[0, "botorch.acquisition.joint_entropy_search.qLowerBoundJointEntropySearch.model"]], "model (botorch.acquisition.knowledge_gradient.qknowledgegradient attribute)": [[0, "botorch.acquisition.knowledge_gradient.qKnowledgeGradient.model"]], "model (botorch.acquisition.knowledge_gradient.qmultifidelityknowledgegradient attribute)": [[0, "botorch.acquisition.knowledge_gradient.qMultiFidelityKnowledgeGradient.model"]], "model (botorch.acquisition.max_value_entropy_search.qlowerboundmaxvalueentropy attribute)": [[0, "botorch.acquisition.max_value_entropy_search.qLowerBoundMaxValueEntropy.model"]], "model (botorch.acquisition.max_value_entropy_search.qmaxvalueentropy attribute)": [[0, "botorch.acquisition.max_value_entropy_search.qMaxValueEntropy.model"]], "model (botorch.acquisition.max_value_entropy_search.qmultifidelitylowerboundmaxvalueentropy attribute)": [[0, "botorch.acquisition.max_value_entropy_search.qMultiFidelityLowerBoundMaxValueEntropy.model"]], "model (botorch.acquisition.max_value_entropy_search.qmultifidelitymaxvalueentropy attribute)": [[0, "botorch.acquisition.max_value_entropy_search.qMultiFidelityMaxValueEntropy.model"]], "model (botorch.acquisition.monte_carlo.qexpectedimprovement attribute)": [[0, "botorch.acquisition.monte_carlo.qExpectedImprovement.model"]], "model (botorch.acquisition.monte_carlo.qnoisyexpectedimprovement attribute)": [[0, "botorch.acquisition.monte_carlo.qNoisyExpectedImprovement.model"]], "model (botorch.acquisition.monte_carlo.qprobabilityofimprovement attribute)": [[0, "botorch.acquisition.monte_carlo.qProbabilityOfImprovement.model"]], "model (botorch.acquisition.monte_carlo.qsimpleregret attribute)": [[0, "botorch.acquisition.monte_carlo.qSimpleRegret.model"]], "model (botorch.acquisition.monte_carlo.qupperconfidencebound attribute)": [[0, "botorch.acquisition.monte_carlo.qUpperConfidenceBound.model"]], "model (botorch.acquisition.multi_objective.analytic.expectedhypervolumeimprovement attribute)": [[0, "botorch.acquisition.multi_objective.analytic.ExpectedHypervolumeImprovement.model"]], "model (botorch.acquisition.multi_objective.joint_entropy_search.qlowerboundmultiobjectivejointentropysearch attribute)": [[0, "botorch.acquisition.multi_objective.joint_entropy_search.qLowerBoundMultiObjectiveJointEntropySearch.model"]], "model (botorch.acquisition.multi_objective.max_value_entropy_search.qlowerboundmultiobjectivemaxvalueentropysearch attribute)": [[0, "botorch.acquisition.multi_objective.max_value_entropy_search.qLowerBoundMultiObjectiveMaxValueEntropySearch.model"]], "model (botorch.acquisition.multi_objective.max_value_entropy_search.qmultiobjectivemaxvalueentropy attribute)": [[0, "botorch.acquisition.multi_objective.max_value_entropy_search.qMultiObjectiveMaxValueEntropy.model"]], "model (botorch.acquisition.multi_objective.monte_carlo.qexpectedhypervolumeimprovement attribute)": [[0, "botorch.acquisition.multi_objective.monte_carlo.qExpectedHypervolumeImprovement.model"]], "model (botorch.acquisition.multi_objective.monte_carlo.qnoisyexpectedhypervolumeimprovement attribute)": [[0, "botorch.acquisition.multi_objective.monte_carlo.qNoisyExpectedHypervolumeImprovement.model"]], "model (botorch.acquisition.multi_objective.multi_fidelity.momf attribute)": [[0, "botorch.acquisition.multi_objective.multi_fidelity.MOMF.model"]], "model (botorch.acquisition.multi_step_lookahead.qmultisteplookahead attribute)": [[0, "botorch.acquisition.multi_step_lookahead.qMultiStepLookahead.model"]], "model (botorch.acquisition.predictive_entropy_search.qpredictiveentropysearch attribute)": [[0, "botorch.acquisition.predictive_entropy_search.qPredictiveEntropySearch.model"]], "model (botorch.acquisition.preference.analyticexpectedutilityofbestoption attribute)": [[0, "botorch.acquisition.preference.AnalyticExpectedUtilityOfBestOption.model"]], "module": [[0, "module-botorch.acquisition"], [0, "module-botorch.acquisition.acquisition"], [0, "module-botorch.acquisition.active_learning"], [0, "module-botorch.acquisition.analytic"], [0, "module-botorch.acquisition.cached_cholesky"], [0, "module-botorch.acquisition.cost_aware"], [0, "module-botorch.acquisition.fixed_feature"], [0, "module-botorch.acquisition.input_constructors"], [0, "module-botorch.acquisition.joint_entropy_search"], [0, "module-botorch.acquisition.knowledge_gradient"], [0, "module-botorch.acquisition.max_value_entropy_search"], [0, "module-botorch.acquisition.monte_carlo"], [0, "module-botorch.acquisition.multi_objective.analytic"], [0, "module-botorch.acquisition.multi_objective.joint_entropy_search"], [0, "module-botorch.acquisition.multi_objective.max_value_entropy_search"], [0, "module-botorch.acquisition.multi_objective.monte_carlo"], [0, "module-botorch.acquisition.multi_objective.multi_fidelity"], [0, "module-botorch.acquisition.multi_objective.multi_output_risk_measures"], [0, "module-botorch.acquisition.multi_objective.objective"], [0, "module-botorch.acquisition.multi_objective.predictive_entropy_search"], [0, "module-botorch.acquisition.multi_objective.utils"], [0, "module-botorch.acquisition.multi_step_lookahead"], [0, "module-botorch.acquisition.objective"], [0, "module-botorch.acquisition.penalized"], [0, "module-botorch.acquisition.predictive_entropy_search"], [0, "module-botorch.acquisition.preference"], [0, "module-botorch.acquisition.proximal"], [0, "module-botorch.acquisition.risk_measures"], [0, "module-botorch.acquisition.utils"], [1, "module-botorch.cross_validation"], [2, "module-botorch.exceptions"], [2, "module-botorch.exceptions.errors"], [2, "module-botorch.exceptions.warnings"], [3, "module-botorch.fit"], [4, "module-botorch.generation"], [4, "module-botorch.generation.gen"], [4, "module-botorch.generation.sampling"], [4, "module-botorch.generation.utils"], [6, "module-botorch.logging"], [7, "module-botorch.models"], [7, "module-botorch.models.approximate_gp"], [7, "module-botorch.models.contextual"], [7, "module-botorch.models.contextual_multioutput"], [7, "module-botorch.models.converter"], [7, "module-botorch.models.cost"], [7, "module-botorch.models.deterministic"], [7, "module-botorch.models.ensemble"], [7, "module-botorch.models.fully_bayesian"], [7, "module-botorch.models.fully_bayesian_multitask"], [7, "module-botorch.models.gp_regression"], [7, "module-botorch.models.gp_regression_fidelity"], [7, "module-botorch.models.gp_regression_mixed"], [7, "module-botorch.models.gpytorch"], [7, "module-botorch.models.higher_order_gp"], [7, "module-botorch.models.kernels.categorical"], [7, "module-botorch.models.kernels.contextual_lcea"], [7, "module-botorch.models.kernels.contextual_sac"], [7, "module-botorch.models.kernels.downsampling"], [7, "module-botorch.models.kernels.exponential_decay"], [7, "module-botorch.models.kernels.linear_truncated_fidelity"], [7, "module-botorch.models.likelihoods.pairwise"], [7, "module-botorch.models.model"], [7, "module-botorch.models.model_list_gp_regression"], [7, "module-botorch.models.multitask"], [7, "module-botorch.models.pairwise_gp"], [7, "module-botorch.models.transforms.factory"], [7, "module-botorch.models.transforms.input"], [7, "module-botorch.models.transforms.outcome"], [7, "module-botorch.models.transforms.utils"], [7, "module-botorch.models.utils.assorted"], [7, "module-botorch.models.utils.inducing_point_allocators"], [7, "module-botorch.models.utils.parse_training_data"], [8, "module-botorch.optim"], [8, "module-botorch.optim.closures.core"], [8, "module-botorch.optim.closures.model_closures"], [8, "module-botorch.optim.core"], [8, "module-botorch.optim.fit"], [8, "module-botorch.optim.initializers"], [8, "module-botorch.optim.numpy_converter"], [8, "module-botorch.optim.optimize"], [8, "module-botorch.optim.parameter_constraints"], [8, "module-botorch.optim.stopping"], [8, "module-botorch.optim.utils.acquisition_utils"], [8, "module-botorch.optim.utils.common"], [8, "module-botorch.optim.utils.model_utils"], [8, "module-botorch.optim.utils.numpy_utils"], [8, "module-botorch.optim.utils.timeout"], [9, "module-botorch.posteriors"], [9, "module-botorch.posteriors.base_samples"], [9, "module-botorch.posteriors.deterministic"], [9, "module-botorch.posteriors.ensemble"], [9, "module-botorch.posteriors.fully_bayesian"], [9, "module-botorch.posteriors.gpytorch"], [9, "module-botorch.posteriors.higher_order"], [9, "module-botorch.posteriors.multitask"], [9, "module-botorch.posteriors.posterior"], [9, "module-botorch.posteriors.posterior_list"], [9, "module-botorch.posteriors.torch"], [9, "module-botorch.posteriors.transformed"], [10, "module-botorch.sampling"], [10, "module-botorch.sampling.base"], [10, "module-botorch.sampling.deterministic"], [10, "module-botorch.sampling.get_sampler"], [10, "module-botorch.sampling.index_sampler"], [10, "module-botorch.sampling.list_sampler"], [10, "module-botorch.sampling.normal"], [10, "module-botorch.sampling.pairwise_samplers"], [10, "module-botorch.sampling.pathwise.features.generators"], [10, "module-botorch.sampling.pathwise.features.maps"], [10, "module-botorch.sampling.pathwise.paths"], [10, "module-botorch.sampling.pathwise.posterior_samplers"], [10, "module-botorch.sampling.pathwise.prior_samplers"], [10, "module-botorch.sampling.pathwise.update_strategies"], [10, "module-botorch.sampling.pathwise.utils"], [10, "module-botorch.sampling.qmc"], [10, "module-botorch.sampling.stochastic_samplers"], [11, "module-botorch.settings"], [12, "module-botorch.test_functions"], [12, "module-botorch.test_functions.base"], [12, "module-botorch.test_functions.multi_fidelity"], [12, "module-botorch.test_functions.multi_objective"], [12, "module-botorch.test_functions.multi_objective_multi_fidelity"], [12, "module-botorch.test_functions.sensitivity_analysis"], [12, "module-botorch.test_functions.synthetic"], [13, "module-botorch.utils"], [13, "module-botorch.utils.constants"], [13, "module-botorch.utils.constraints"], [13, "module-botorch.utils.containers"], [13, "module-botorch.utils.context_managers"], [13, "module-botorch.utils.datasets"], [13, "module-botorch.utils.dispatcher"], [13, "module-botorch.utils.feasible_volume"], [13, "module-botorch.utils.gp_sampling"], [13, "module-botorch.utils.low_rank"], [13, "module-botorch.utils.multi_objective.box_decompositions.box_decomposition"], [13, "module-botorch.utils.multi_objective.box_decompositions.box_decomposition_list"], [13, "module-botorch.utils.multi_objective.box_decompositions.dominated"], [13, "module-botorch.utils.multi_objective.box_decompositions.non_dominated"], [13, "module-botorch.utils.multi_objective.box_decompositions.utils"], [13, "module-botorch.utils.multi_objective.hypervolume"], [13, "module-botorch.utils.multi_objective.pareto"], [13, "module-botorch.utils.multi_objective.scalarization"], [13, "module-botorch.utils.objective"], [13, "module-botorch.utils.probability.bvn"], [13, "module-botorch.utils.probability.lin_ess"], [13, "module-botorch.utils.probability.linalg"], [13, "module-botorch.utils.probability.mvnxpb"], [13, "module-botorch.utils.probability.truncated_multivariate_normal"], [13, "module-botorch.utils.probability.unified_skew_normal"], [13, "module-botorch.utils.probability.utils"], [13, "module-botorch.utils.rounding"], [13, "module-botorch.utils.safe_math"], [13, "module-botorch.utils.sampling"], [13, "module-botorch.utils.testing"], [13, "module-botorch.utils.torch"], [13, "module-botorch.utils.transforms"], [13, "module-botorch.utils.types"]], "nu() (botorch.acquisition.multi_objective.analytic.expectedhypervolumeimprovement method)": [[0, "botorch.acquisition.multi_objective.analytic.ExpectedHypervolumeImprovement.nu"]], "num_fantasies (botorch.acquisition.knowledge_gradient.qmultifidelityknowledgegradient attribute)": [[0, "botorch.acquisition.knowledge_gradient.qMultiFidelityKnowledgeGradient.num_fantasies"]], "objective (botorch.acquisition.active_learning.pairwisemcposteriorvariance attribute)": [[0, "botorch.acquisition.active_learning.PairwiseMCPosteriorVariance.objective"]], "objective (botorch.acquisition.knowledge_gradient.qknowledgegradient attribute)": [[0, "botorch.acquisition.knowledge_gradient.qKnowledgeGradient.objective"]], "objective (botorch.acquisition.knowledge_gradient.qmultifidelityknowledgegradient attribute)": [[0, "botorch.acquisition.knowledge_gradient.qMultiFidelityKnowledgeGradient.objective"]], "objective (botorch.acquisition.monte_carlo.qexpectedimprovement attribute)": [[0, "botorch.acquisition.monte_carlo.qExpectedImprovement.objective"]], "objective (botorch.acquisition.monte_carlo.qnoisyexpectedimprovement attribute)": [[0, "botorch.acquisition.monte_carlo.qNoisyExpectedImprovement.objective"]], "objective (botorch.acquisition.monte_carlo.qprobabilityofimprovement attribute)": [[0, "botorch.acquisition.monte_carlo.qProbabilityOfImprovement.objective"]], "objective (botorch.acquisition.monte_carlo.qsimpleregret attribute)": [[0, "botorch.acquisition.monte_carlo.qSimpleRegret.objective"]], "objective (botorch.acquisition.monte_carlo.qupperconfidencebound attribute)": [[0, "botorch.acquisition.monte_carlo.qUpperConfidenceBound.objective"]], "objective (botorch.acquisition.multi_step_lookahead.qmultisteplookahead attribute)": [[0, "botorch.acquisition.multi_step_lookahead.qMultiStepLookahead.objective"]], "optimize_objective() (in module botorch.acquisition.input_constructors)": [[0, "botorch.acquisition.input_constructors.optimize_objective"]], "project_to_sample_points() (in module botorch.acquisition.utils)": [[0, "botorch.acquisition.utils.project_to_sample_points"]], "project_to_target_fidelity() (in module botorch.acquisition.utils)": [[0, "botorch.acquisition.utils.project_to_target_fidelity"]], "prune_inferior_points() (in module botorch.acquisition.utils)": [[0, "botorch.acquisition.utils.prune_inferior_points"]], "prune_inferior_points_multi_objective() (in module botorch.acquisition.multi_objective.utils)": [[0, "botorch.acquisition.multi_objective.utils.prune_inferior_points_multi_objective"]], "psi() (botorch.acquisition.multi_objective.analytic.expectedhypervolumeimprovement method)": [[0, "botorch.acquisition.multi_objective.analytic.ExpectedHypervolumeImprovement.psi"]], "qanalyticprobabilityofimprovement (class in botorch.acquisition.analytic)": [[0, "botorch.acquisition.analytic.qAnalyticProbabilityOfImprovement"]], "qexpectedhypervolumeimprovement (class in botorch.acquisition.multi_objective.monte_carlo)": [[0, "botorch.acquisition.multi_objective.monte_carlo.qExpectedHypervolumeImprovement"]], "qexpectedimprovement (class in botorch.acquisition.monte_carlo)": [[0, "botorch.acquisition.monte_carlo.qExpectedImprovement"]], "qknowledgegradient (class in botorch.acquisition.knowledge_gradient)": [[0, "botorch.acquisition.knowledge_gradient.qKnowledgeGradient"]], "qlowerboundjointentropysearch (class in botorch.acquisition.joint_entropy_search)": [[0, "botorch.acquisition.joint_entropy_search.qLowerBoundJointEntropySearch"]], "qlowerboundmaxvalueentropy (class in botorch.acquisition.max_value_entropy_search)": [[0, "botorch.acquisition.max_value_entropy_search.qLowerBoundMaxValueEntropy"]], "qlowerboundmultiobjectivejointentropysearch (class in botorch.acquisition.multi_objective.joint_entropy_search)": [[0, "botorch.acquisition.multi_objective.joint_entropy_search.qLowerBoundMultiObjectiveJointEntropySearch"]], "qlowerboundmultiobjectivemaxvalueentropysearch (class in botorch.acquisition.multi_objective.max_value_entropy_search)": [[0, "botorch.acquisition.multi_objective.max_value_entropy_search.qLowerBoundMultiObjectiveMaxValueEntropySearch"]], "qmaxvalueentropy (class in botorch.acquisition.max_value_entropy_search)": [[0, "botorch.acquisition.max_value_entropy_search.qMaxValueEntropy"]], "qmultifidelityknowledgegradient (class in botorch.acquisition.knowledge_gradient)": [[0, "botorch.acquisition.knowledge_gradient.qMultiFidelityKnowledgeGradient"]], "qmultifidelitylowerboundmaxvalueentropy (class in botorch.acquisition.max_value_entropy_search)": [[0, "botorch.acquisition.max_value_entropy_search.qMultiFidelityLowerBoundMaxValueEntropy"]], "qmultifidelitymaxvalueentropy (class in botorch.acquisition.max_value_entropy_search)": [[0, "botorch.acquisition.max_value_entropy_search.qMultiFidelityMaxValueEntropy"]], "qmultiobjectivemaxvalueentropy (class in botorch.acquisition.multi_objective.max_value_entropy_search)": [[0, "botorch.acquisition.multi_objective.max_value_entropy_search.qMultiObjectiveMaxValueEntropy"]], "qmultiobjectivepredictiveentropysearch (class in botorch.acquisition.multi_objective.predictive_entropy_search)": [[0, "botorch.acquisition.multi_objective.predictive_entropy_search.qMultiObjectivePredictiveEntropySearch"]], "qmultisteplookahead (class in botorch.acquisition.multi_step_lookahead)": [[0, "botorch.acquisition.multi_step_lookahead.qMultiStepLookahead"]], "qnegintegratedposteriorvariance (class in botorch.acquisition.active_learning)": [[0, "botorch.acquisition.active_learning.qNegIntegratedPosteriorVariance"]], "qnoisyexpectedhypervolumeimprovement (class in botorch.acquisition.multi_objective.monte_carlo)": [[0, "botorch.acquisition.multi_objective.monte_carlo.qNoisyExpectedHypervolumeImprovement"]], "qnoisyexpectedimprovement (class in botorch.acquisition.monte_carlo)": [[0, "botorch.acquisition.monte_carlo.qNoisyExpectedImprovement"]], "qpredictiveentropysearch (class in botorch.acquisition.predictive_entropy_search)": [[0, "botorch.acquisition.predictive_entropy_search.qPredictiveEntropySearch"]], "qprobabilityofimprovement (class in botorch.acquisition.monte_carlo)": [[0, "botorch.acquisition.monte_carlo.qProbabilityOfImprovement"]], "qsimpleregret (class in botorch.acquisition.monte_carlo)": [[0, "botorch.acquisition.monte_carlo.qSimpleRegret"]], "qupperconfidencebound (class in botorch.acquisition.monte_carlo)": [[0, "botorch.acquisition.monte_carlo.qUpperConfidenceBound"]], "random_search_optimizer() (in module botorch.acquisition.multi_objective.utils)": [[0, "botorch.acquisition.multi_objective.utils.random_search_optimizer"]], "sample_optimal_points() (in module botorch.acquisition.multi_objective.utils)": [[0, "botorch.acquisition.multi_objective.utils.sample_optimal_points"]], "scalarize (botorch.acquisition.objective.scalarizedposteriortransform attribute)": [[0, "botorch.acquisition.objective.ScalarizedPosteriorTransform.scalarize"]], "set_x_pending() (botorch.acquisition.analytic.analyticacquisitionfunction method)": [[0, "botorch.acquisition.analytic.AnalyticAcquisitionFunction.set_X_pending"]], "set_x_pending() (botorch.acquisition.max_value_entropy_search.qmaxvalueentropy method)": [[0, "botorch.acquisition.max_value_entropy_search.qMaxValueEntropy.set_X_pending"]], "set_x_pending() (botorch.acquisition.multi_objective.analytic.multiobjectiveanalyticacquisitionfunction method)": [[0, "botorch.acquisition.multi_objective.analytic.MultiObjectiveAnalyticAcquisitionFunction.set_X_pending"]], "set_x_pending() (botorch.acquisition.multi_objective.max_value_entropy_search.qmultiobjectivemaxvalueentropy method)": [[0, "botorch.acquisition.multi_objective.max_value_entropy_search.qMultiObjectiveMaxValueEntropy.set_X_pending"]], "set_x_pending() (botorch.acquisition.multi_objective.monte_carlo.qnoisyexpectedhypervolumeimprovement method)": [[0, "botorch.acquisition.multi_objective.monte_carlo.qNoisyExpectedHypervolumeImprovement.set_X_pending"]], "set_x_pending() (botorch.acquisition.penalized.penalizedacquisitionfunction method)": [[0, "botorch.acquisition.penalized.PenalizedAcquisitionFunction.set_X_pending"]], "set_baseline_y() (botorch.acquisition.multi_objective.multi_output_risk_measures.mars method)": [[0, "botorch.acquisition.multi_objective.multi_output_risk_measures.MARS.set_baseline_Y"]], "supports_cache_root() (in module botorch.acquisition.cached_cholesky)": [[0, "botorch.acquisition.cached_cholesky.supports_cache_root"]], "training (botorch.acquisition.active_learning.pairwisemcposteriorvariance attribute)": [[0, "botorch.acquisition.active_learning.PairwiseMCPosteriorVariance.training"]], "training (botorch.acquisition.active_learning.qnegintegratedposteriorvariance attribute)": [[0, "botorch.acquisition.active_learning.qNegIntegratedPosteriorVariance.training"]], "training (botorch.acquisition.analytic.analyticacquisitionfunction attribute)": [[0, "botorch.acquisition.analytic.AnalyticAcquisitionFunction.training"]], "training (botorch.acquisition.analytic.constrainedexpectedimprovement attribute)": [[0, "botorch.acquisition.analytic.ConstrainedExpectedImprovement.training"]], "training (botorch.acquisition.analytic.expectedimprovement attribute)": [[0, "botorch.acquisition.analytic.ExpectedImprovement.training"]], "training (botorch.acquisition.analytic.logconstrainedexpectedimprovement attribute)": [[0, "botorch.acquisition.analytic.LogConstrainedExpectedImprovement.training"]], "training (botorch.acquisition.analytic.logexpectedimprovement attribute)": [[0, "botorch.acquisition.analytic.LogExpectedImprovement.training"]], "training (botorch.acquisition.analytic.lognoisyexpectedimprovement attribute)": [[0, "botorch.acquisition.analytic.LogNoisyExpectedImprovement.training"]], "training (botorch.acquisition.analytic.logprobabilityofimprovement attribute)": [[0, "botorch.acquisition.analytic.LogProbabilityOfImprovement.training"]], "training (botorch.acquisition.analytic.noisyexpectedimprovement attribute)": [[0, "botorch.acquisition.analytic.NoisyExpectedImprovement.training"]], "training (botorch.acquisition.analytic.posteriormean attribute)": [[0, "botorch.acquisition.analytic.PosteriorMean.training"]], "training (botorch.acquisition.analytic.probabilityofimprovement attribute)": [[0, "botorch.acquisition.analytic.ProbabilityOfImprovement.training"]], "training (botorch.acquisition.analytic.scalarizedposteriormean attribute)": [[0, "botorch.acquisition.analytic.ScalarizedPosteriorMean.training"]], "training (botorch.acquisition.analytic.upperconfidencebound attribute)": [[0, "botorch.acquisition.analytic.UpperConfidenceBound.training"]], "training (botorch.acquisition.analytic.qanalyticprobabilityofimprovement attribute)": [[0, "botorch.acquisition.analytic.qAnalyticProbabilityOfImprovement.training"]], "training (botorch.acquisition.cost_aware.genericcostawareutility attribute)": [[0, "botorch.acquisition.cost_aware.GenericCostAwareUtility.training"]], "training (botorch.acquisition.cost_aware.inversecostweightedutility attribute)": [[0, "botorch.acquisition.cost_aware.InverseCostWeightedUtility.training"]], "training (botorch.acquisition.fixed_feature.fixedfeatureacquisitionfunction attribute)": [[0, "botorch.acquisition.fixed_feature.FixedFeatureAcquisitionFunction.training"]], "training (botorch.acquisition.joint_entropy_search.qlowerboundjointentropysearch attribute)": [[0, "botorch.acquisition.joint_entropy_search.qLowerBoundJointEntropySearch.training"]], "training (botorch.acquisition.knowledge_gradient.projectedacquisitionfunction attribute)": [[0, "botorch.acquisition.knowledge_gradient.ProjectedAcquisitionFunction.training"]], "training (botorch.acquisition.knowledge_gradient.qknowledgegradient attribute)": [[0, "botorch.acquisition.knowledge_gradient.qKnowledgeGradient.training"]], "training (botorch.acquisition.knowledge_gradient.qmultifidelityknowledgegradient attribute)": [[0, "botorch.acquisition.knowledge_gradient.qMultiFidelityKnowledgeGradient.training"]], "training (botorch.acquisition.max_value_entropy_search.discretemaxvaluebase attribute)": [[0, "botorch.acquisition.max_value_entropy_search.DiscreteMaxValueBase.training"]], "training (botorch.acquisition.max_value_entropy_search.qlowerboundmaxvalueentropy attribute)": [[0, "botorch.acquisition.max_value_entropy_search.qLowerBoundMaxValueEntropy.training"]], "training (botorch.acquisition.max_value_entropy_search.qmaxvalueentropy attribute)": [[0, "botorch.acquisition.max_value_entropy_search.qMaxValueEntropy.training"]], "training (botorch.acquisition.max_value_entropy_search.qmultifidelitylowerboundmaxvalueentropy attribute)": [[0, "botorch.acquisition.max_value_entropy_search.qMultiFidelityLowerBoundMaxValueEntropy.training"]], "training (botorch.acquisition.max_value_entropy_search.qmultifidelitymaxvalueentropy attribute)": [[0, "botorch.acquisition.max_value_entropy_search.qMultiFidelityMaxValueEntropy.training"]], "training (botorch.acquisition.monte_carlo.mcacquisitionfunction attribute)": [[0, "botorch.acquisition.monte_carlo.MCAcquisitionFunction.training"]], "training (botorch.acquisition.monte_carlo.qexpectedimprovement attribute)": [[0, "botorch.acquisition.monte_carlo.qExpectedImprovement.training"]], "training (botorch.acquisition.monte_carlo.qnoisyexpectedimprovement attribute)": [[0, "botorch.acquisition.monte_carlo.qNoisyExpectedImprovement.training"]], "training (botorch.acquisition.monte_carlo.qprobabilityofimprovement attribute)": [[0, "botorch.acquisition.monte_carlo.qProbabilityOfImprovement.training"]], "training (botorch.acquisition.monte_carlo.qsimpleregret attribute)": [[0, "botorch.acquisition.monte_carlo.qSimpleRegret.training"]], "training (botorch.acquisition.monte_carlo.qupperconfidencebound attribute)": [[0, "botorch.acquisition.monte_carlo.qUpperConfidenceBound.training"]], "training (botorch.acquisition.multi_objective.analytic.expectedhypervolumeimprovement attribute)": [[0, "botorch.acquisition.multi_objective.analytic.ExpectedHypervolumeImprovement.training"]], "training (botorch.acquisition.multi_objective.analytic.multiobjectiveanalyticacquisitionfunction attribute)": [[0, "botorch.acquisition.multi_objective.analytic.MultiObjectiveAnalyticAcquisitionFunction.training"]], "training (botorch.acquisition.multi_objective.joint_entropy_search.lowerboundmultiobjectiveentropysearch attribute)": [[0, "botorch.acquisition.multi_objective.joint_entropy_search.LowerBoundMultiObjectiveEntropySearch.training"]], "training (botorch.acquisition.multi_objective.joint_entropy_search.qlowerboundmultiobjectivejointentropysearch attribute)": [[0, "botorch.acquisition.multi_objective.joint_entropy_search.qLowerBoundMultiObjectiveJointEntropySearch.training"]], "training (botorch.acquisition.multi_objective.max_value_entropy_search.qlowerboundmultiobjectivemaxvalueentropysearch attribute)": [[0, "botorch.acquisition.multi_objective.max_value_entropy_search.qLowerBoundMultiObjectiveMaxValueEntropySearch.training"]], "training (botorch.acquisition.multi_objective.max_value_entropy_search.qmultiobjectivemaxvalueentropy attribute)": [[0, "botorch.acquisition.multi_objective.max_value_entropy_search.qMultiObjectiveMaxValueEntropy.training"]], "training (botorch.acquisition.multi_objective.monte_carlo.multiobjectivemcacquisitionfunction attribute)": [[0, "botorch.acquisition.multi_objective.monte_carlo.MultiObjectiveMCAcquisitionFunction.training"]], "training (botorch.acquisition.multi_objective.monte_carlo.qexpectedhypervolumeimprovement attribute)": [[0, "botorch.acquisition.multi_objective.monte_carlo.qExpectedHypervolumeImprovement.training"]], "training (botorch.acquisition.multi_objective.monte_carlo.qnoisyexpectedhypervolumeimprovement attribute)": [[0, "botorch.acquisition.multi_objective.monte_carlo.qNoisyExpectedHypervolumeImprovement.training"]], "training (botorch.acquisition.multi_objective.multi_fidelity.momf attribute)": [[0, "botorch.acquisition.multi_objective.multi_fidelity.MOMF.training"]], "training (botorch.acquisition.multi_objective.objective.analyticmultioutputobjective attribute)": [[0, "botorch.acquisition.multi_objective.objective.AnalyticMultiOutputObjective.training"]], "training (botorch.acquisition.multi_objective.objective.identityanalyticmultioutputobjective attribute)": [[0, "botorch.acquisition.multi_objective.objective.IdentityAnalyticMultiOutputObjective.training"]], "training (botorch.acquisition.multi_objective.objective.unstandardizeanalyticmultioutputobjective attribute)": [[0, "botorch.acquisition.multi_objective.objective.UnstandardizeAnalyticMultiOutputObjective.training"]], "training (botorch.acquisition.multi_objective.predictive_entropy_search.qmultiobjectivepredictiveentropysearch attribute)": [[0, "botorch.acquisition.multi_objective.predictive_entropy_search.qMultiObjectivePredictiveEntropySearch.training"]], "training (botorch.acquisition.multi_step_lookahead.qmultisteplookahead attribute)": [[0, "botorch.acquisition.multi_step_lookahead.qMultiStepLookahead.training"]], "training (botorch.acquisition.objective.expectationposteriortransform attribute)": [[0, "botorch.acquisition.objective.ExpectationPosteriorTransform.training"]], "training (botorch.acquisition.objective.scalarizedobjective attribute)": [[0, "botorch.acquisition.objective.ScalarizedObjective.training"]], "training (botorch.acquisition.penalized.gaussianpenalty attribute)": [[0, "botorch.acquisition.penalized.GaussianPenalty.training"]], "training (botorch.acquisition.penalized.grouplassopenalty attribute)": [[0, "botorch.acquisition.penalized.GroupLassoPenalty.training"]], "training (botorch.acquisition.penalized.l1penalty attribute)": [[0, "botorch.acquisition.penalized.L1Penalty.training"]], "training (botorch.acquisition.penalized.l1penaltyobjective attribute)": [[0, "botorch.acquisition.penalized.L1PenaltyObjective.training"]], "training (botorch.acquisition.penalized.l2penalty attribute)": [[0, "botorch.acquisition.penalized.L2Penalty.training"]], "training (botorch.acquisition.penalized.penalizedacquisitionfunction attribute)": [[0, "botorch.acquisition.penalized.PenalizedAcquisitionFunction.training"]], "training (botorch.acquisition.predictive_entropy_search.qpredictiveentropysearch attribute)": [[0, "botorch.acquisition.predictive_entropy_search.qPredictiveEntropySearch.training"]], "training (botorch.acquisition.preference.analyticexpectedutilityofbestoption attribute)": [[0, "botorch.acquisition.preference.AnalyticExpectedUtilityOfBestOption.training"]], "training (botorch.acquisition.proximal.proximalacquisitionfunction attribute)": [[0, "botorch.acquisition.proximal.ProximalAcquisitionFunction.training"]], "warmstart_multistep() (in module botorch.acquisition.multi_step_lookahead)": [[0, "botorch.acquisition.multi_step_lookahead.warmstart_multistep"]], "cvfolds (class in botorch.cross_validation)": [[1, "botorch.cross_validation.CVFolds"]], "cvresults (class in botorch.cross_validation)": [[1, "botorch.cross_validation.CVResults"]], "batch_cross_validation() (in module botorch.cross_validation)": [[1, "botorch.cross_validation.batch_cross_validation"]], "botorch.cross_validation": [[1, "module-botorch.cross_validation"]], "gen_loo_cv_folds() (in module botorch.cross_validation)": [[1, "botorch.cross_validation.gen_loo_cv_folds"]], "model (botorch.cross_validation.cvresults attribute)": [[1, "botorch.cross_validation.CVResults.model"]], "observed_y (botorch.cross_validation.cvresults attribute)": [[1, "botorch.cross_validation.CVResults.observed_Y"]], "observed_yvar (botorch.cross_validation.cvresults attribute)": [[1, "botorch.cross_validation.CVResults.observed_Yvar"]], "posterior (botorch.cross_validation.cvresults attribute)": [[1, "botorch.cross_validation.CVResults.posterior"]], "test_x (botorch.cross_validation.cvfolds attribute)": [[1, "botorch.cross_validation.CVFolds.test_X"]], "test_y (botorch.cross_validation.cvfolds attribute)": [[1, "botorch.cross_validation.CVFolds.test_Y"]], "test_yvar (botorch.cross_validation.cvfolds attribute)": [[1, "botorch.cross_validation.CVFolds.test_Yvar"]], "train_x (botorch.cross_validation.cvfolds attribute)": [[1, "botorch.cross_validation.CVFolds.train_X"]], "train_y (botorch.cross_validation.cvfolds attribute)": [[1, "botorch.cross_validation.CVFolds.train_Y"]], "train_yvar (botorch.cross_validation.cvfolds attribute)": [[1, "botorch.cross_validation.CVFolds.train_Yvar"]], "badinitialcandidateswarning": [[2, "botorch.exceptions.warnings.BadInitialCandidatesWarning"]], "botorcherror": [[2, "botorch.exceptions.errors.BotorchError"]], "botorchtensordimensionerror": [[2, "botorch.exceptions.errors.BotorchTensorDimensionError"]], "botorchtensordimensionwarning": [[2, "botorch.exceptions.warnings.BotorchTensorDimensionWarning"]], "botorchwarning": [[2, "botorch.exceptions.warnings.BotorchWarning"]], "candidategenerationerror": [[2, "botorch.exceptions.errors.CandidateGenerationError"]], "costawarewarning": [[2, "botorch.exceptions.warnings.CostAwareWarning"]], "inputdataerror": [[2, "botorch.exceptions.errors.InputDataError"]], "inputdatawarning": [[2, "botorch.exceptions.warnings.InputDataWarning"]], "modelfittingerror": [[2, "botorch.exceptions.errors.ModelFittingError"]], "optimizationtimeouterror": [[2, "botorch.exceptions.errors.OptimizationTimeoutError"]], "optimizationwarning": [[2, "botorch.exceptions.warnings.OptimizationWarning"]], "samplingwarning": [[2, "botorch.exceptions.warnings.SamplingWarning"]], "unsupportederror": [[2, "botorch.exceptions.errors.UnsupportedError"]], "botorch.exceptions": [[2, "module-botorch.exceptions"]], "botorch.exceptions.errors": [[2, "module-botorch.exceptions.errors"]], "botorch.exceptions.warnings": [[2, "module-botorch.exceptions.warnings"]], "botorch.fit": [[3, "module-botorch.fit"]], "fit_fully_bayesian_model_nuts() (in module botorch.fit)": [[3, "botorch.fit.fit_fully_bayesian_model_nuts"]], "fit_gpytorch_mll() (in module botorch.fit)": [[3, "botorch.fit.fit_gpytorch_mll"]], "fit_gpytorch_model() (in module botorch.fit)": [[3, "botorch.fit.fit_gpytorch_model"]], "boltzmannsampling (class in botorch.generation.sampling)": [[4, "botorch.generation.sampling.BoltzmannSampling"]], "constrainedmaxposteriorsampling (class in botorch.generation.sampling)": [[4, "botorch.generation.sampling.ConstrainedMaxPosteriorSampling"]], "maxposteriorsampling (class in botorch.generation.sampling)": [[4, "botorch.generation.sampling.MaxPosteriorSampling"]], "botorch.generation": [[4, "module-botorch.generation"]], "botorch.generation.gen": [[4, "module-botorch.generation.gen"]], "botorch.generation.sampling": [[4, "module-botorch.generation.sampling"]], "botorch.generation.utils": [[4, "module-botorch.generation.utils"]], "forward() (botorch.generation.sampling.boltzmannsampling method)": [[4, "botorch.generation.sampling.BoltzmannSampling.forward"]], "forward() (botorch.generation.sampling.constrainedmaxposteriorsampling method)": [[4, "botorch.generation.sampling.ConstrainedMaxPosteriorSampling.forward"]], "forward() (botorch.generation.sampling.maxposteriorsampling method)": [[4, "botorch.generation.sampling.MaxPosteriorSampling.forward"]], "gen_candidates_scipy() (in module botorch.generation.gen)": [[4, "botorch.generation.gen.gen_candidates_scipy"]], "gen_candidates_torch() (in module botorch.generation.gen)": [[4, "botorch.generation.gen.gen_candidates_torch"]], "get_best_candidates() (in module botorch.generation.gen)": [[4, "botorch.generation.gen.get_best_candidates"]], "maximize_samples() (botorch.generation.sampling.maxposteriorsampling method)": [[4, "botorch.generation.sampling.MaxPosteriorSampling.maximize_samples"]], "minimize() (in module botorch.generation.gen)": [[4, "botorch.generation.gen.minimize"]], "training (botorch.generation.sampling.boltzmannsampling attribute)": [[4, "botorch.generation.sampling.BoltzmannSampling.training"]], "training (botorch.generation.sampling.constrainedmaxposteriorsampling attribute)": [[4, "botorch.generation.sampling.ConstrainedMaxPosteriorSampling.training"]], "training (botorch.generation.sampling.maxposteriorsampling attribute)": [[4, "botorch.generation.sampling.MaxPosteriorSampling.training"]], "botorch.logging": [[6, "module-botorch.logging"]], "affinedeterministicmodel (class in botorch.models.deterministic)": [[7, "botorch.models.deterministic.AffineDeterministicModel"]], "affinefidelitycostmodel (class in botorch.models.cost)": [[7, "botorch.models.cost.AffineFidelityCostModel"]], "appendfeatures (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.AppendFeatures"]], "approximategpytorchmodel (class in botorch.models.approximate_gp)": [[7, "botorch.models.approximate_gp.ApproximateGPyTorchModel"]], "bilog (class in botorch.models.transforms.outcome)": [[7, "botorch.models.transforms.outcome.Bilog"]], "categoricalkernel (class in botorch.models.kernels.categorical)": [[7, "botorch.models.kernels.categorical.CategoricalKernel"]], "chainedinputtransform (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.ChainedInputTransform"]], "chainedoutcometransform (class in botorch.models.transforms.outcome)": [[7, "botorch.models.transforms.outcome.ChainedOutcomeTransform"]], "downsamplingkernel (class in botorch.models.kernels.downsampling)": [[7, "botorch.models.kernels.downsampling.DownsamplingKernel"]], "expectedimprovementqualityfunction (class in botorch.models.utils.inducing_point_allocators)": [[7, "botorch.models.utils.inducing_point_allocators.ExpectedImprovementQualityFunction"]], "exponentialdecaykernel (class in botorch.models.kernels.exponential_decay)": [[7, "botorch.models.kernels.exponential_decay.ExponentialDecayKernel"]], "fantasizemixin (class in botorch.models.model)": [[7, "botorch.models.model.FantasizeMixin"]], "filterfeatures (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.FilterFeatures"]], "fixednoisegp (class in botorch.models.gp_regression)": [[7, "botorch.models.gp_regression.FixedNoiseGP"]], "fixednoiselcemgp (class in botorch.models.contextual_multioutput)": [[7, "botorch.models.contextual_multioutput.FixedNoiseLCEMGP"]], "fixednoisemultifidelitygp (class in botorch.models.gp_regression_fidelity)": [[7, "botorch.models.gp_regression_fidelity.FixedNoiseMultiFidelityGP"]], "fixednoisemultitaskgp (class in botorch.models.multitask)": [[7, "botorch.models.multitask.FixedNoiseMultiTaskGP"]], "fixedsinglesamplemodel (class in botorch.models.deterministic)": [[7, "botorch.models.deterministic.FixedSingleSampleModel"]], "flattenedstandardize (class in botorch.models.higher_order_gp)": [[7, "botorch.models.higher_order_gp.FlattenedStandardize"]], "genericdeterministicmodel (class in botorch.models.deterministic)": [[7, "botorch.models.deterministic.GenericDeterministicModel"]], "greedyimprovementreduction (class in botorch.models.utils.inducing_point_allocators)": [[7, "botorch.models.utils.inducing_point_allocators.GreedyImprovementReduction"]], "greedyvariancereduction (class in botorch.models.utils.inducing_point_allocators)": [[7, "botorch.models.utils.inducing_point_allocators.GreedyVarianceReduction"]], "heteroskedasticsingletaskgp (class in botorch.models.gp_regression)": [[7, "botorch.models.gp_regression.HeteroskedasticSingleTaskGP"]], "higherordergp (class in botorch.models.higher_order_gp)": [[7, "botorch.models.higher_order_gp.HigherOrderGP"]], "inducingpointallocator (class in botorch.models.utils.inducing_point_allocators)": [[7, "botorch.models.utils.inducing_point_allocators.InducingPointAllocator"]], "inputperturbation (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.InputPerturbation"]], "inputstandardize (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.InputStandardize"]], "kroneckermultitaskgp (class in botorch.models.multitask)": [[7, "botorch.models.multitask.KroneckerMultiTaskGP"]], "lceagp (class in botorch.models.contextual)": [[7, "botorch.models.contextual.LCEAGP"]], "lceakernel (class in botorch.models.kernels.contextual_lcea)": [[7, "botorch.models.kernels.contextual_lcea.LCEAKernel"]], "lcemgp (class in botorch.models.contextual_multioutput)": [[7, "botorch.models.contextual_multioutput.LCEMGP"]], "lineartruncatedfidelitykernel (class in botorch.models.kernels.linear_truncated_fidelity)": [[7, "botorch.models.kernels.linear_truncated_fidelity.LinearTruncatedFidelityKernel"]], "log (class in botorch.models.transforms.outcome)": [[7, "botorch.models.transforms.outcome.Log"]], "log10 (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.Log10"]], "mixedsingletaskgp (class in botorch.models.gp_regression_mixed)": [[7, "botorch.models.gp_regression_mixed.MixedSingleTaskGP"]], "model (class in botorch.models.model)": [[7, "botorch.models.model.Model"]], "modeldict (class in botorch.models.model)": [[7, "botorch.models.model.ModelDict"]], "modellist (class in botorch.models.model)": [[7, "botorch.models.model.ModelList"]], "modellistgp (class in botorch.models.model_list_gp_regression)": [[7, "botorch.models.model_list_gp_regression.ModelListGP"]], "multitaskgp (class in botorch.models.multitask)": [[7, "botorch.models.multitask.MultiTaskGP"]], "multitasksaaspyromodel (class in botorch.models.fully_bayesian_multitask)": [[7, "botorch.models.fully_bayesian_multitask.MultitaskSaasPyroModel"]], "normalize (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.Normalize"]], "onehottonumeric (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.OneHotToNumeric"]], "pairwisegp (class in botorch.models.pairwise_gp)": [[7, "botorch.models.pairwise_gp.PairwiseGP"]], "pairwiselaplacemarginalloglikelihood (class in botorch.models.pairwise_gp)": [[7, "botorch.models.pairwise_gp.PairwiseLaplaceMarginalLogLikelihood"]], "pairwiselogitlikelihood (class in botorch.models.likelihoods.pairwise)": [[7, "botorch.models.likelihoods.pairwise.PairwiseLogitLikelihood"]], "pairwiseprobitlikelihood (class in botorch.models.likelihoods.pairwise)": [[7, "botorch.models.likelihoods.pairwise.PairwiseProbitLikelihood"]], "posteriormeanmodel (class in botorch.models.deterministic)": [[7, "botorch.models.deterministic.PosteriorMeanModel"]], "power (class in botorch.models.transforms.outcome)": [[7, "botorch.models.transforms.outcome.Power"]], "qualityfunction (class in botorch.models.utils.inducing_point_allocators)": [[7, "botorch.models.utils.inducing_point_allocators.QualityFunction"]], "round (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.Round"]], "sacgp (class in botorch.models.contextual)": [[7, "botorch.models.contextual.SACGP"]], "sackernel (class in botorch.models.kernels.contextual_sac)": [[7, "botorch.models.kernels.contextual_sac.SACKernel"]], "saasfullybayesianmultitaskgp (class in botorch.models.fully_bayesian_multitask)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP"]], "saasfullybayesiansingletaskgp (class in botorch.models.fully_bayesian)": [[7, "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP"]], "saaspyromodel (class in botorch.models.fully_bayesian)": [[7, "botorch.models.fully_bayesian.SaasPyroModel"]], "singletaskgp (class in botorch.models.gp_regression)": [[7, "botorch.models.gp_regression.SingleTaskGP"]], "singletaskmultifidelitygp (class in botorch.models.gp_regression_fidelity)": [[7, "botorch.models.gp_regression_fidelity.SingleTaskMultiFidelityGP"]], "singletaskvariationalgp (class in botorch.models.approximate_gp)": [[7, "botorch.models.approximate_gp.SingleTaskVariationalGP"]], "standardize (class in botorch.models.transforms.outcome)": [[7, "botorch.models.transforms.outcome.Standardize"]], "unitqualityfunction (class in botorch.models.utils.inducing_point_allocators)": [[7, "botorch.models.utils.inducing_point_allocators.UnitQualityFunction"]], "warp (class in botorch.models.transforms.input)": [[7, "botorch.models.transforms.input.Warp"]], "_pivoted_cholesky_init() (in module botorch.models.utils.inducing_point_allocators)": [[7, "botorch.models.utils.inducing_point_allocators._pivoted_cholesky_init"]], "add_output_dim() (in module botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.add_output_dim"]], "allocate_inducing_points() (botorch.models.utils.inducing_point_allocators.inducingpointallocator method)": [[7, "botorch.models.utils.inducing_point_allocators.InducingPointAllocator.allocate_inducing_points"]], "batch_shape (botorch.models.fully_bayesian.saasfullybayesiansingletaskgp property)": [[7, "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP.batch_shape"]], "batch_shape (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp property)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.batch_shape"]], "batch_shape (botorch.models.model.model property)": [[7, "botorch.models.model.Model.batch_shape"]], "batch_shape (botorch.models.model.modellist property)": [[7, "botorch.models.model.ModelList.batch_shape"]], "batch_shape (botorch.models.pairwise_gp.pairwisegp property)": [[7, "botorch.models.pairwise_gp.PairwiseGP.batch_shape"]], "batch_shape (botorch.models.transforms.input.inputperturbation property)": [[7, "botorch.models.transforms.input.InputPerturbation.batch_shape"]], "batched_multi_output_to_single_output() (in module botorch.models.converter)": [[7, "botorch.models.converter.batched_multi_output_to_single_output"]], "batched_to_model_list() (in module botorch.models.converter)": [[7, "botorch.models.converter.batched_to_model_list"]], "botorch.models": [[7, "module-botorch.models"]], "botorch.models.approximate_gp": [[7, "module-botorch.models.approximate_gp"]], "botorch.models.contextual": [[7, "module-botorch.models.contextual"]], "botorch.models.contextual_multioutput": [[7, "module-botorch.models.contextual_multioutput"]], "botorch.models.converter": [[7, "module-botorch.models.converter"]], "botorch.models.cost": [[7, "module-botorch.models.cost"]], "botorch.models.deterministic": [[7, "module-botorch.models.deterministic"]], "botorch.models.ensemble": [[7, "module-botorch.models.ensemble"]], "botorch.models.fully_bayesian": [[7, "module-botorch.models.fully_bayesian"]], "botorch.models.fully_bayesian_multitask": [[7, "module-botorch.models.fully_bayesian_multitask"]], "botorch.models.gp_regression": [[7, "module-botorch.models.gp_regression"]], "botorch.models.gp_regression_fidelity": [[7, "module-botorch.models.gp_regression_fidelity"]], "botorch.models.gp_regression_mixed": [[7, "module-botorch.models.gp_regression_mixed"]], "botorch.models.gpytorch": [[7, "module-botorch.models.gpytorch"]], "botorch.models.higher_order_gp": [[7, "module-botorch.models.higher_order_gp"]], "botorch.models.kernels.categorical": [[7, "module-botorch.models.kernels.categorical"]], "botorch.models.kernels.contextual_lcea": [[7, "module-botorch.models.kernels.contextual_lcea"]], "botorch.models.kernels.contextual_sac": [[7, "module-botorch.models.kernels.contextual_sac"]], "botorch.models.kernels.downsampling": [[7, "module-botorch.models.kernels.downsampling"]], "botorch.models.kernels.exponential_decay": [[7, "module-botorch.models.kernels.exponential_decay"]], "botorch.models.kernels.linear_truncated_fidelity": [[7, "module-botorch.models.kernels.linear_truncated_fidelity"]], "botorch.models.likelihoods.pairwise": [[7, "module-botorch.models.likelihoods.pairwise"]], "botorch.models.model": [[7, "module-botorch.models.model"]], "botorch.models.model_list_gp_regression": [[7, "module-botorch.models.model_list_gp_regression"]], "botorch.models.multitask": [[7, "module-botorch.models.multitask"]], "botorch.models.pairwise_gp": [[7, "module-botorch.models.pairwise_gp"]], "botorch.models.transforms.factory": [[7, "module-botorch.models.transforms.factory"]], "botorch.models.transforms.input": [[7, "module-botorch.models.transforms.input"]], "botorch.models.transforms.outcome": [[7, "module-botorch.models.transforms.outcome"]], "botorch.models.transforms.utils": [[7, "module-botorch.models.transforms.utils"]], "botorch.models.utils.assorted": [[7, "module-botorch.models.utils.assorted"]], "botorch.models.utils.inducing_point_allocators": [[7, "module-botorch.models.utils.inducing_point_allocators"]], "botorch.models.utils.parse_training_data": [[7, "module-botorch.models.utils.parse_training_data"]], "bounds (botorch.models.transforms.input.normalize property)": [[7, "botorch.models.transforms.input.Normalize.bounds"]], "check_min_max_scaling() (in module botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.check_min_max_scaling"]], "check_no_nans() (in module botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.check_no_nans"]], "check_standardization() (in module botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.check_standardization"]], "compute_dists() (in module botorch.models.fully_bayesian)": [[7, "botorch.models.fully_bayesian.compute_dists"]], "condition_on_observations() (botorch.models.gp_regression.heteroskedasticsingletaskgp method)": [[7, "botorch.models.gp_regression.HeteroskedasticSingleTaskGP.condition_on_observations"]], "condition_on_observations() (botorch.models.higher_order_gp.higherordergp method)": [[7, "botorch.models.higher_order_gp.HigherOrderGP.condition_on_observations"]], "condition_on_observations() (botorch.models.model.fantasizemixin method)": [[7, "botorch.models.model.FantasizeMixin.condition_on_observations"]], "condition_on_observations() (botorch.models.model.model method)": [[7, "botorch.models.model.Model.condition_on_observations"]], "condition_on_observations() (botorch.models.model_list_gp_regression.modellistgp method)": [[7, "botorch.models.model_list_gp_regression.ModelListGP.condition_on_observations"]], "condition_on_observations() (botorch.models.pairwise_gp.pairwisegp method)": [[7, "botorch.models.pairwise_gp.PairwiseGP.condition_on_observations"]], "construct_inputs() (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp class method)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.construct_inputs"]], "construct_inputs() (botorch.models.gp_regression_fidelity.fixednoisemultifidelitygp class method)": [[7, "botorch.models.gp_regression_fidelity.FixedNoiseMultiFidelityGP.construct_inputs"]], "construct_inputs() (botorch.models.gp_regression_fidelity.singletaskmultifidelitygp class method)": [[7, "botorch.models.gp_regression_fidelity.SingleTaskMultiFidelityGP.construct_inputs"]], "construct_inputs() (botorch.models.gp_regression_mixed.mixedsingletaskgp class method)": [[7, "botorch.models.gp_regression_mixed.MixedSingleTaskGP.construct_inputs"]], "construct_inputs() (botorch.models.model.model class method)": [[7, "botorch.models.model.Model.construct_inputs"]], "construct_inputs() (botorch.models.multitask.multitaskgp class method)": [[7, "botorch.models.multitask.MultiTaskGP.construct_inputs"]], "equals() (botorch.models.transforms.input.chainedinputtransform method)": [[7, "botorch.models.transforms.input.ChainedInputTransform.equals"]], "equals() (botorch.models.transforms.input.filterfeatures method)": [[7, "botorch.models.transforms.input.FilterFeatures.equals"]], "equals() (botorch.models.transforms.input.onehottonumeric method)": [[7, "botorch.models.transforms.input.OneHotToNumeric.equals"]], "equals() (botorch.models.transforms.input.round method)": [[7, "botorch.models.transforms.input.Round.equals"]], "eval() (botorch.models.model.model method)": [[7, "botorch.models.model.Model.eval"]], "expand_and_copy_tensor() (in module botorch.models.transforms.utils)": [[7, "botorch.models.transforms.utils.expand_and_copy_tensor"]], "fantasize (class in botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.fantasize"]], "fantasize() (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp method)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.fantasize"]], "fantasize() (botorch.models.gp_regression.fixednoisegp method)": [[7, "botorch.models.gp_regression.FixedNoiseGP.fantasize"]], "fantasize() (botorch.models.model.fantasizemixin method)": [[7, "botorch.models.model.FantasizeMixin.fantasize"]], "forward() (botorch.models.approximate_gp.approximategpytorchmodel method)": [[7, "botorch.models.approximate_gp.ApproximateGPyTorchModel.forward"]], "forward() (botorch.models.contextual_multioutput.lcemgp method)": [[7, "botorch.models.contextual_multioutput.LCEMGP.forward"]], "forward() (botorch.models.cost.affinefidelitycostmodel method)": [[7, "botorch.models.cost.AffineFidelityCostModel.forward"]], "forward() (botorch.models.deterministic.affinedeterministicmodel method)": [[7, "botorch.models.deterministic.AffineDeterministicModel.forward"]], "forward() (botorch.models.deterministic.fixedsinglesamplemodel method)": [[7, "botorch.models.deterministic.FixedSingleSampleModel.forward"]], "forward() (botorch.models.deterministic.genericdeterministicmodel method)": [[7, "botorch.models.deterministic.GenericDeterministicModel.forward"]], "forward() (botorch.models.deterministic.posteriormeanmodel method)": [[7, "botorch.models.deterministic.PosteriorMeanModel.forward"]], "forward() (botorch.models.fully_bayesian.saasfullybayesiansingletaskgp method)": [[7, "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP.forward"]], "forward() (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp method)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.forward"]], "forward() (botorch.models.gp_regression.fixednoisegp method)": [[7, "botorch.models.gp_regression.FixedNoiseGP.forward"]], "forward() (botorch.models.gp_regression.heteroskedasticsingletaskgp method)": [[7, "botorch.models.gp_regression.HeteroskedasticSingleTaskGP.forward"]], "forward() (botorch.models.gp_regression.singletaskgp method)": [[7, "botorch.models.gp_regression.SingleTaskGP.forward"]], "forward() (botorch.models.higher_order_gp.flattenedstandardize method)": [[7, "botorch.models.higher_order_gp.FlattenedStandardize.forward"]], "forward() (botorch.models.higher_order_gp.higherordergp method)": [[7, "botorch.models.higher_order_gp.HigherOrderGP.forward"]], "forward() (botorch.models.multitask.kroneckermultitaskgp method)": [[7, "botorch.models.multitask.KroneckerMultiTaskGP.forward"]], "forward() (botorch.models.multitask.multitaskgp method)": [[7, "botorch.models.multitask.MultiTaskGP.forward"]], "forward() (botorch.models.pairwise_gp.pairwisegp method)": [[7, "botorch.models.pairwise_gp.PairwiseGP.forward"]], "forward() (botorch.models.pairwise_gp.pairwiselaplacemarginalloglikelihood method)": [[7, "botorch.models.pairwise_gp.PairwiseLaplaceMarginalLogLikelihood.forward"]], "forward() (botorch.models.transforms.outcome.bilog method)": [[7, "botorch.models.transforms.outcome.Bilog.forward"]], "forward() (botorch.models.transforms.outcome.chainedoutcometransform method)": [[7, "botorch.models.transforms.outcome.ChainedOutcomeTransform.forward"]], "forward() (botorch.models.transforms.outcome.log method)": [[7, "botorch.models.transforms.outcome.Log.forward"]], "forward() (botorch.models.transforms.outcome.power method)": [[7, "botorch.models.transforms.outcome.Power.forward"]], "forward() (botorch.models.transforms.outcome.standardize method)": [[7, "botorch.models.transforms.outcome.Standardize.forward"]], "get_all_tasks() (botorch.models.multitask.multitaskgp class method)": [[7, "botorch.models.multitask.MultiTaskGP.get_all_tasks"]], "get_attribute() (in module botorch.models.converter)": [[7, "botorch.models.converter.get_attribute"]], "get_fantasy_model() (botorch.models.higher_order_gp.higherordergp method)": [[7, "botorch.models.higher_order_gp.HigherOrderGP.get_fantasy_model"]], "get_rounding_input_transform() (in module botorch.models.transforms.factory)": [[7, "botorch.models.transforms.factory.get_rounding_input_transform"]], "gpt_posterior_settings() (in module botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.gpt_posterior_settings"]], "init_inducing_points() (botorch.models.approximate_gp.singletaskvariationalgp method)": [[7, "botorch.models.approximate_gp.SingleTaskVariationalGP.init_inducing_points"]], "is_one_to_many (botorch.models.transforms.input.appendfeatures attribute)": [[7, "botorch.models.transforms.input.AppendFeatures.is_one_to_many"]], "is_one_to_many (botorch.models.transforms.input.inputperturbation attribute)": [[7, "botorch.models.transforms.input.InputPerturbation.is_one_to_many"]], "learn_bounds (botorch.models.transforms.input.normalize property)": [[7, "botorch.models.transforms.input.Normalize.learn_bounds"]], "likelihood (botorch.models.approximate_gp.approximategpytorchmodel attribute)": [[7, "botorch.models.approximate_gp.ApproximateGPyTorchModel.likelihood"]], "likelihood (botorch.models.approximate_gp.singletaskvariationalgp attribute)": [[7, "botorch.models.approximate_gp.SingleTaskVariationalGP.likelihood"]], "likelihood (botorch.models.contextual_multioutput.fixednoiselcemgp attribute)": [[7, "botorch.models.contextual_multioutput.FixedNoiseLCEMGP.likelihood"]], "likelihood (botorch.models.contextual_multioutput.lcemgp attribute)": [[7, "botorch.models.contextual_multioutput.LCEMGP.likelihood"]], "likelihood (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp attribute)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.likelihood"]], "likelihood (botorch.models.model_list_gp_regression.modellistgp attribute)": [[7, "botorch.models.model_list_gp_regression.ModelListGP.likelihood"]], "likelihood (botorch.models.multitask.fixednoisemultitaskgp attribute)": [[7, "botorch.models.multitask.FixedNoiseMultiTaskGP.likelihood"]], "likelihood (botorch.models.multitask.kroneckermultitaskgp attribute)": [[7, "botorch.models.multitask.KroneckerMultiTaskGP.likelihood"]], "likelihood (botorch.models.multitask.multitaskgp attribute)": [[7, "botorch.models.multitask.MultiTaskGP.likelihood"]], "load_mcmc_samples() (botorch.models.fully_bayesian.saasfullybayesiansingletaskgp method)": [[7, "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP.load_mcmc_samples"]], "load_mcmc_samples() (botorch.models.fully_bayesian.saaspyromodel method)": [[7, "botorch.models.fully_bayesian.SaasPyroModel.load_mcmc_samples"]], "load_mcmc_samples() (botorch.models.fully_bayesian_multitask.multitasksaaspyromodel method)": [[7, "botorch.models.fully_bayesian_multitask.MultitaskSaasPyroModel.load_mcmc_samples"]], "load_mcmc_samples() (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp method)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.load_mcmc_samples"]], "load_state_dict() (botorch.models.fully_bayesian.saasfullybayesiansingletaskgp method)": [[7, "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP.load_state_dict"]], "load_state_dict() (botorch.models.model.modellist method)": [[7, "botorch.models.model.ModelList.load_state_dict"]], "load_state_dict() (botorch.models.pairwise_gp.pairwisegp method)": [[7, "botorch.models.pairwise_gp.PairwiseGP.load_state_dict"]], "log_p() (botorch.models.likelihoods.pairwise.pairwiselogitlikelihood method)": [[7, "botorch.models.likelihoods.pairwise.PairwiseLogitLikelihood.log_p"]], "lognorm_to_norm() (in module botorch.models.transforms.utils)": [[7, "botorch.models.transforms.utils.lognorm_to_norm"]], "make_posterior_variances() (botorch.models.higher_order_gp.higherordergp method)": [[7, "botorch.models.higher_order_gp.HigherOrderGP.make_posterior_variances"]], "matern52_kernel() (in module botorch.models.fully_bayesian)": [[7, "botorch.models.fully_bayesian.matern52_kernel"]], "means (botorch.models.transforms.input.inputstandardize property)": [[7, "botorch.models.transforms.input.InputStandardize.means"]], "median_lengthscale (botorch.models.fully_bayesian.saasfullybayesiansingletaskgp property)": [[7, "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP.median_lengthscale"]], "median_lengthscale (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp property)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.median_lengthscale"]], "mins (botorch.models.transforms.input.normalize property)": [[7, "botorch.models.transforms.input.Normalize.mins"]], "mod_batch_shape() (in module botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.mod_batch_shape"]], "model_list_to_batched() (in module botorch.models.converter)": [[7, "botorch.models.converter.model_list_to_batched"]], "multioutput_to_batch_mode_transform() (in module botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.multioutput_to_batch_mode_transform"]], "negative_log_gradient_sum() (botorch.models.likelihoods.pairwise.pairwiselogitlikelihood method)": [[7, "botorch.models.likelihoods.pairwise.PairwiseLogitLikelihood.negative_log_gradient_sum"]], "negative_log_gradient_sum() (botorch.models.likelihoods.pairwise.pairwiseprobitlikelihood method)": [[7, "botorch.models.likelihoods.pairwise.PairwiseProbitLikelihood.negative_log_gradient_sum"]], "negative_log_hessian_sum() (botorch.models.likelihoods.pairwise.pairwiselogitlikelihood method)": [[7, "botorch.models.likelihoods.pairwise.PairwiseLogitLikelihood.negative_log_hessian_sum"]], "negative_log_hessian_sum() (botorch.models.likelihoods.pairwise.pairwiseprobitlikelihood method)": [[7, "botorch.models.likelihoods.pairwise.PairwiseProbitLikelihood.negative_log_hessian_sum"]], "norm_to_lognorm() (in module botorch.models.transforms.utils)": [[7, "botorch.models.transforms.utils.norm_to_lognorm"]], "norm_to_lognorm_mean() (in module botorch.models.transforms.utils)": [[7, "botorch.models.transforms.utils.norm_to_lognorm_mean"]], "norm_to_lognorm_variance() (in module botorch.models.transforms.utils)": [[7, "botorch.models.transforms.utils.norm_to_lognorm_variance"]], "num_mcmc_samples (botorch.models.fully_bayesian.saasfullybayesiansingletaskgp property)": [[7, "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP.num_mcmc_samples"]], "num_mcmc_samples (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp property)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.num_mcmc_samples"]], "num_outputs (botorch.models.approximate_gp.approximategpytorchmodel property)": [[7, "botorch.models.approximate_gp.ApproximateGPyTorchModel.num_outputs"]], "num_outputs (botorch.models.model.model property)": [[7, "botorch.models.model.Model.num_outputs"]], "num_outputs (botorch.models.model.modellist property)": [[7, "botorch.models.model.ModelList.num_outputs"]], "num_outputs (botorch.models.pairwise_gp.pairwisegp property)": [[7, "botorch.models.pairwise_gp.PairwiseGP.num_outputs"]], "p() (botorch.models.likelihoods.pairwise.pairwiselogitlikelihood method)": [[7, "botorch.models.likelihoods.pairwise.PairwiseLogitLikelihood.p"]], "p() (botorch.models.likelihoods.pairwise.pairwiseprobitlikelihood method)": [[7, "botorch.models.likelihoods.pairwise.PairwiseProbitLikelihood.p"]], "parse_training_data() (in module botorch.models.utils.parse_training_data)": [[7, "botorch.models.utils.parse_training_data.parse_training_data"]], "posterior() (botorch.models.approximate_gp.approximategpytorchmodel method)": [[7, "botorch.models.approximate_gp.ApproximateGPyTorchModel.posterior"]], "posterior() (botorch.models.fully_bayesian.saasfullybayesiansingletaskgp method)": [[7, "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP.posterior"]], "posterior() (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp method)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.posterior"]], "posterior() (botorch.models.higher_order_gp.higherordergp method)": [[7, "botorch.models.higher_order_gp.HigherOrderGP.posterior"]], "posterior() (botorch.models.model.fantasizemixin method)": [[7, "botorch.models.model.FantasizeMixin.posterior"]], "posterior() (botorch.models.model.model method)": [[7, "botorch.models.model.Model.posterior"]], "posterior() (botorch.models.model.modellist method)": [[7, "botorch.models.model.ModelList.posterior"]], "posterior() (botorch.models.multitask.kroneckermultitaskgp method)": [[7, "botorch.models.multitask.KroneckerMultiTaskGP.posterior"]], "posterior() (botorch.models.pairwise_gp.pairwisegp method)": [[7, "botorch.models.pairwise_gp.PairwiseGP.posterior"]], "postprocess_mcmc_samples() (botorch.models.fully_bayesian.saaspyromodel method)": [[7, "botorch.models.fully_bayesian.SaasPyroModel.postprocess_mcmc_samples"]], "predictive_mean_cache (botorch.models.multitask.kroneckermultitaskgp property)": [[7, "botorch.models.multitask.KroneckerMultiTaskGP.predictive_mean_cache"]], "preprocess_transform() (botorch.models.transforms.input.chainedinputtransform method)": [[7, "botorch.models.transforms.input.ChainedInputTransform.preprocess_transform"]], "ranges (botorch.models.transforms.input.normalize property)": [[7, "botorch.models.transforms.input.Normalize.ranges"]], "reshape_and_detach() (in module botorch.models.fully_bayesian)": [[7, "botorch.models.fully_bayesian.reshape_and_detach"]], "reverse (botorch.models.transforms.input.inputstandardize attribute)": [[7, "botorch.models.transforms.input.InputStandardize.reverse"]], "reverse (botorch.models.transforms.input.log10 attribute)": [[7, "botorch.models.transforms.input.Log10.reverse"]], "reverse (botorch.models.transforms.input.normalize attribute)": [[7, "botorch.models.transforms.input.Normalize.reverse"]], "reverse (botorch.models.transforms.input.warp attribute)": [[7, "botorch.models.transforms.input.Warp.reverse"]], "sample() (botorch.models.fully_bayesian.saaspyromodel method)": [[7, "botorch.models.fully_bayesian.SaasPyroModel.sample"]], "sample() (botorch.models.fully_bayesian_multitask.multitasksaaspyromodel method)": [[7, "botorch.models.fully_bayesian_multitask.MultitaskSaasPyroModel.sample"]], "sample_latent_features() (botorch.models.fully_bayesian_multitask.multitasksaaspyromodel method)": [[7, "botorch.models.fully_bayesian_multitask.MultitaskSaasPyroModel.sample_latent_features"]], "sample_lengthscale() (botorch.models.fully_bayesian.saaspyromodel method)": [[7, "botorch.models.fully_bayesian.SaasPyroModel.sample_lengthscale"]], "sample_mean() (botorch.models.fully_bayesian.saaspyromodel method)": [[7, "botorch.models.fully_bayesian.SaasPyroModel.sample_mean"]], "sample_noise() (botorch.models.fully_bayesian.saaspyromodel method)": [[7, "botorch.models.fully_bayesian.SaasPyroModel.sample_noise"]], "sample_outputscale() (botorch.models.fully_bayesian.saaspyromodel method)": [[7, "botorch.models.fully_bayesian.SaasPyroModel.sample_outputscale"]], "sample_task_lengthscale() (botorch.models.fully_bayesian_multitask.multitasksaaspyromodel method)": [[7, "botorch.models.fully_bayesian_multitask.MultitaskSaasPyroModel.sample_task_lengthscale"]], "set_attribute() (in module botorch.models.converter)": [[7, "botorch.models.converter.set_attribute"]], "set_inputs() (botorch.models.fully_bayesian.saaspyromodel method)": [[7, "botorch.models.fully_bayesian.SaasPyroModel.set_inputs"]], "set_inputs() (botorch.models.fully_bayesian_multitask.multitasksaaspyromodel method)": [[7, "botorch.models.fully_bayesian_multitask.MultitaskSaasPyroModel.set_inputs"]], "set_train_data() (botorch.models.pairwise_gp.pairwisegp method)": [[7, "botorch.models.pairwise_gp.PairwiseGP.set_train_data"]], "stds (botorch.models.transforms.input.inputstandardize property)": [[7, "botorch.models.transforms.input.InputStandardize.stds"]], "subset_output() (botorch.models.deterministic.affinedeterministicmodel method)": [[7, "botorch.models.deterministic.AffineDeterministicModel.subset_output"]], "subset_output() (botorch.models.deterministic.genericdeterministicmodel method)": [[7, "botorch.models.deterministic.GenericDeterministicModel.subset_output"]], "subset_output() (botorch.models.gp_regression.fixednoisegp method)": [[7, "botorch.models.gp_regression.FixedNoiseGP.subset_output"]], "subset_output() (botorch.models.gp_regression.heteroskedasticsingletaskgp method)": [[7, "botorch.models.gp_regression.HeteroskedasticSingleTaskGP.subset_output"]], "subset_output() (botorch.models.model.model method)": [[7, "botorch.models.model.Model.subset_output"]], "subset_output() (botorch.models.model.modellist method)": [[7, "botorch.models.model.ModelList.subset_output"]], "subset_output() (botorch.models.model_list_gp_regression.modellistgp method)": [[7, "botorch.models.model_list_gp_regression.ModelListGP.subset_output"]], "subset_output() (botorch.models.transforms.outcome.bilog method)": [[7, "botorch.models.transforms.outcome.Bilog.subset_output"]], "subset_output() (botorch.models.transforms.outcome.chainedoutcometransform method)": [[7, "botorch.models.transforms.outcome.ChainedOutcomeTransform.subset_output"]], "subset_output() (botorch.models.transforms.outcome.log method)": [[7, "botorch.models.transforms.outcome.Log.subset_output"]], "subset_output() (botorch.models.transforms.outcome.power method)": [[7, "botorch.models.transforms.outcome.Power.subset_output"]], "subset_output() (botorch.models.transforms.outcome.standardize method)": [[7, "botorch.models.transforms.outcome.Standardize.subset_output"]], "subset_transform() (in module botorch.models.transforms.utils)": [[7, "botorch.models.transforms.utils.subset_transform"]], "task_covar_matrix() (botorch.models.contextual_multioutput.lcemgp method)": [[7, "botorch.models.contextual_multioutput.LCEMGP.task_covar_matrix"]], "train() (botorch.models.fully_bayesian.saasfullybayesiansingletaskgp method)": [[7, "botorch.models.fully_bayesian.SaasFullyBayesianSingleTaskGP.train"]], "train() (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp method)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.train"]], "train() (botorch.models.model.model method)": [[7, "botorch.models.model.Model.train"]], "train() (botorch.models.multitask.kroneckermultitaskgp method)": [[7, "botorch.models.multitask.KroneckerMultiTaskGP.train"]], "train_full_covar (botorch.models.multitask.kroneckermultitaskgp property)": [[7, "botorch.models.multitask.KroneckerMultiTaskGP.train_full_covar"]], "training (botorch.models.approximate_gp.singletaskvariationalgp attribute)": [[7, "botorch.models.approximate_gp.SingleTaskVariationalGP.training"]], "training (botorch.models.contextual_multioutput.fixednoiselcemgp attribute)": [[7, "botorch.models.contextual_multioutput.FixedNoiseLCEMGP.training"]], "training (botorch.models.contextual_multioutput.lcemgp attribute)": [[7, "botorch.models.contextual_multioutput.LCEMGP.training"]], "training (botorch.models.fully_bayesian_multitask.saasfullybayesianmultitaskgp attribute)": [[7, "botorch.models.fully_bayesian_multitask.SaasFullyBayesianMultiTaskGP.training"]], "training (botorch.models.higher_order_gp.flattenedstandardize attribute)": [[7, "botorch.models.higher_order_gp.FlattenedStandardize.training"]], "training (botorch.models.multitask.fixednoisemultitaskgp attribute)": [[7, "botorch.models.multitask.FixedNoiseMultiTaskGP.training"]], "training (botorch.models.pairwise_gp.pairwiselaplacemarginalloglikelihood attribute)": [[7, "botorch.models.pairwise_gp.PairwiseLaplaceMarginalLogLikelihood.training"]], "training (botorch.models.transforms.outcome.bilog attribute)": [[7, "botorch.models.transforms.outcome.Bilog.training"]], "training (botorch.models.transforms.outcome.log attribute)": [[7, "botorch.models.transforms.outcome.Log.training"]], "training (botorch.models.transforms.outcome.power attribute)": [[7, "botorch.models.transforms.outcome.Power.training"]], "training (botorch.models.transforms.outcome.standardize attribute)": [[7, "botorch.models.transforms.outcome.Standardize.training"]], "transform() (botorch.models.transforms.input.appendfeatures method)": [[7, "botorch.models.transforms.input.AppendFeatures.transform"]], "transform() (botorch.models.transforms.input.chainedinputtransform method)": [[7, "botorch.models.transforms.input.ChainedInputTransform.transform"]], "transform() (botorch.models.transforms.input.filterfeatures method)": [[7, "botorch.models.transforms.input.FilterFeatures.transform"]], "transform() (botorch.models.transforms.input.inputperturbation method)": [[7, "botorch.models.transforms.input.InputPerturbation.transform"]], "transform() (botorch.models.transforms.input.onehottonumeric method)": [[7, "botorch.models.transforms.input.OneHotToNumeric.transform"]], "transform() (botorch.models.transforms.input.round method)": [[7, "botorch.models.transforms.input.Round.transform"]], "transform_inputs() (botorch.models.model.fantasizemixin method)": [[7, "botorch.models.model.FantasizeMixin.transform_inputs"]], "transform_inputs() (botorch.models.model.model method)": [[7, "botorch.models.model.Model.transform_inputs"]], "transform_inputs() (botorch.models.model.modellist method)": [[7, "botorch.models.model.ModelList.transform_inputs"]], "transform_on_eval (botorch.models.transforms.input.chainedinputtransform attribute)": [[7, "botorch.models.transforms.input.ChainedInputTransform.transform_on_eval"]], "transform_on_eval (botorch.models.transforms.input.filterfeatures attribute)": [[7, "botorch.models.transforms.input.FilterFeatures.transform_on_eval"]], "transform_on_eval (botorch.models.transforms.input.onehottonumeric attribute)": [[7, "botorch.models.transforms.input.OneHotToNumeric.transform_on_eval"]], "transform_on_eval (botorch.models.transforms.input.round attribute)": [[7, "botorch.models.transforms.input.Round.transform_on_eval"]], "transform_on_fantasize (botorch.models.transforms.input.chainedinputtransform attribute)": [[7, "botorch.models.transforms.input.ChainedInputTransform.transform_on_fantasize"]], "transform_on_fantasize (botorch.models.transforms.input.filterfeatures attribute)": [[7, "botorch.models.transforms.input.FilterFeatures.transform_on_fantasize"]], "transform_on_fantasize (botorch.models.transforms.input.onehottonumeric attribute)": [[7, "botorch.models.transforms.input.OneHotToNumeric.transform_on_fantasize"]], "transform_on_fantasize (botorch.models.transforms.input.round attribute)": [[7, "botorch.models.transforms.input.Round.transform_on_fantasize"]], "transform_on_train (botorch.models.transforms.input.chainedinputtransform attribute)": [[7, "botorch.models.transforms.input.ChainedInputTransform.transform_on_train"]], "transform_on_train (botorch.models.transforms.input.filterfeatures attribute)": [[7, "botorch.models.transforms.input.FilterFeatures.transform_on_train"]], "transform_on_train (botorch.models.transforms.input.onehottonumeric attribute)": [[7, "botorch.models.transforms.input.OneHotToNumeric.transform_on_train"]], "transform_on_train (botorch.models.transforms.input.round attribute)": [[7, "botorch.models.transforms.input.Round.transform_on_train"]], "untransform() (botorch.models.higher_order_gp.flattenedstandardize method)": [[7, "botorch.models.higher_order_gp.FlattenedStandardize.untransform"]], "untransform() (botorch.models.transforms.input.chainedinputtransform method)": [[7, "botorch.models.transforms.input.ChainedInputTransform.untransform"]], "untransform() (botorch.models.transforms.input.onehottonumeric method)": [[7, "botorch.models.transforms.input.OneHotToNumeric.untransform"]], "untransform() (botorch.models.transforms.outcome.bilog method)": [[7, "botorch.models.transforms.outcome.Bilog.untransform"]], "untransform() (botorch.models.transforms.outcome.chainedoutcometransform method)": [[7, "botorch.models.transforms.outcome.ChainedOutcomeTransform.untransform"]], "untransform() (botorch.models.transforms.outcome.log method)": [[7, "botorch.models.transforms.outcome.Log.untransform"]], "untransform() (botorch.models.transforms.outcome.power method)": [[7, "botorch.models.transforms.outcome.Power.untransform"]], "untransform() (botorch.models.transforms.outcome.standardize method)": [[7, "botorch.models.transforms.outcome.Standardize.untransform"]], "untransform_posterior() (botorch.models.higher_order_gp.flattenedstandardize method)": [[7, "botorch.models.higher_order_gp.FlattenedStandardize.untransform_posterior"]], "untransform_posterior() (botorch.models.transforms.outcome.bilog method)": [[7, "botorch.models.transforms.outcome.Bilog.untransform_posterior"]], "untransform_posterior() (botorch.models.transforms.outcome.chainedoutcometransform method)": [[7, "botorch.models.transforms.outcome.ChainedOutcomeTransform.untransform_posterior"]], "untransform_posterior() (botorch.models.transforms.outcome.log method)": [[7, "botorch.models.transforms.outcome.Log.untransform_posterior"]], "untransform_posterior() (botorch.models.transforms.outcome.power method)": [[7, "botorch.models.transforms.outcome.Power.untransform_posterior"]], "untransform_posterior() (botorch.models.transforms.outcome.standardize method)": [[7, "botorch.models.transforms.outcome.Standardize.untransform_posterior"]], "validate_input_scaling() (in module botorch.models.utils.assorted)": [[7, "botorch.models.utils.assorted.validate_input_scaling"]], "expmastoppingcriterion (class in botorch.optim.stopping)": [[8, "botorch.optim.stopping.ExpMAStoppingCriterion"]], "failure (botorch.optim.core.optimizationstatus attribute)": [[8, "botorch.optim.core.OptimizationStatus.FAILURE"]], "forwardbackwardclosure (class in botorch.optim.closures.core)": [[8, "botorch.optim.closures.core.ForwardBackwardClosure"]], "ndarrayoptimizationclosure (class in botorch.optim.closures.core)": [[8, "botorch.optim.closures.core.NdarrayOptimizationClosure"]], "optimizationresult (class in botorch.optim.core)": [[8, "botorch.optim.core.OptimizationResult"]], "optimizationstatus (class in botorch.optim.core)": [[8, "botorch.optim.core.OptimizationStatus"]], "optimizeacqfinputs (class in botorch.optim.optimize)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs"]], "running (botorch.optim.core.optimizationstatus attribute)": [[8, "botorch.optim.core.OptimizationStatus.RUNNING"]], "stopped (botorch.optim.core.optimizationstatus attribute)": [[8, "botorch.optim.core.OptimizationStatus.STOPPED"]], "success (botorch.optim.core.optimizationstatus attribute)": [[8, "botorch.optim.core.OptimizationStatus.SUCCESS"]], "torchattr (class in botorch.optim.utils.model_utils)": [[8, "botorch.optim.utils.model_utils.TorchAttr"]], "acq_function (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.acq_function"]], "as_ndarray() (in module botorch.optim.utils.numpy_utils)": [[8, "botorch.optim.utils.numpy_utils.as_ndarray"]], "batch_initial_conditions (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.batch_initial_conditions"]], "botorch.optim": [[8, "module-botorch.optim"]], "botorch.optim.closures.core": [[8, "module-botorch.optim.closures.core"]], "botorch.optim.closures.model_closures": [[8, "module-botorch.optim.closures.model_closures"]], "botorch.optim.core": [[8, "module-botorch.optim.core"]], "botorch.optim.fit": [[8, "module-botorch.optim.fit"]], "botorch.optim.initializers": [[8, "module-botorch.optim.initializers"]], "botorch.optim.numpy_converter": [[8, "module-botorch.optim.numpy_converter"]], "botorch.optim.optimize": [[8, "module-botorch.optim.optimize"]], "botorch.optim.parameter_constraints": [[8, "module-botorch.optim.parameter_constraints"]], "botorch.optim.stopping": [[8, "module-botorch.optim.stopping"]], "botorch.optim.utils.acquisition_utils": [[8, "module-botorch.optim.utils.acquisition_utils"]], "botorch.optim.utils.common": [[8, "module-botorch.optim.utils.common"]], "botorch.optim.utils.model_utils": [[8, "module-botorch.optim.utils.model_utils"]], "botorch.optim.utils.numpy_utils": [[8, "module-botorch.optim.utils.numpy_utils"]], "botorch.optim.utils.timeout": [[8, "module-botorch.optim.utils.timeout"]], "bounds (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.bounds"]], "columnwise_clamp() (in module botorch.optim.utils.acquisition_utils)": [[8, "botorch.optim.utils.acquisition_utils.columnwise_clamp"]], "device (botorch.optim.utils.model_utils.torchattr attribute)": [[8, "botorch.optim.utils.model_utils.TorchAttr.device"]], "dtype (botorch.optim.utils.model_utils.torchattr attribute)": [[8, "botorch.optim.utils.model_utils.TorchAttr.dtype"]], "equality_constraints (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.equality_constraints"]], "eval_lin_constraint() (in module botorch.optim.parameter_constraints)": [[8, "botorch.optim.parameter_constraints.eval_lin_constraint"]], "evaluate() (botorch.optim.stopping.expmastoppingcriterion method)": [[8, "botorch.optim.stopping.ExpMAStoppingCriterion.evaluate"]], "fit_gpytorch_mll_scipy() (in module botorch.optim.fit)": [[8, "botorch.optim.fit.fit_gpytorch_mll_scipy"]], "fit_gpytorch_mll_torch() (in module botorch.optim.fit)": [[8, "botorch.optim.fit.fit_gpytorch_mll_torch"]], "fit_gpytorch_scipy() (in module botorch.optim.fit)": [[8, "botorch.optim.fit.fit_gpytorch_scipy"]], "fit_gpytorch_torch() (in module botorch.optim.fit)": [[8, "botorch.optim.fit.fit_gpytorch_torch"]], "fix_features() (in module botorch.optim.utils.acquisition_utils)": [[8, "botorch.optim.utils.acquisition_utils.fix_features"]], "fixed_features (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.fixed_features"]], "full_tree (botorch.optim.optimize.optimizeacqfinputs property)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.full_tree"]], "fval (botorch.optim.core.optimizationresult attribute)": [[8, "botorch.optim.core.OptimizationResult.fval"]], "gen_batch_initial_conditions() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.gen_batch_initial_conditions"]], "gen_candidates (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.gen_candidates"]], "gen_one_shot_kg_initial_conditions() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.gen_one_shot_kg_initial_conditions"]], "gen_value_function_initial_conditions() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.gen_value_function_initial_conditions"]], "get_x_baseline() (in module botorch.optim.utils.acquisition_utils)": [[8, "botorch.optim.utils.acquisition_utils.get_X_baseline"]], "get_bounds_as_ndarray() (in module botorch.optim.utils.numpy_utils)": [[8, "botorch.optim.utils.numpy_utils.get_bounds_as_ndarray"]], "get_data_loader() (in module botorch.optim.utils.model_utils)": [[8, "botorch.optim.utils.model_utils.get_data_loader"]], "get_ic_generator() (botorch.optim.optimize.optimizeacqfinputs method)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.get_ic_generator"]], "get_loss_closure() (in module botorch.optim.closures.model_closures)": [[8, "botorch.optim.closures.model_closures.get_loss_closure"]], "get_loss_closure_with_grads() (in module botorch.optim.closures.model_closures)": [[8, "botorch.optim.closures.model_closures.get_loss_closure_with_grads"]], "get_name_filter() (in module botorch.optim.utils.model_utils)": [[8, "botorch.optim.utils.model_utils.get_name_filter"]], "get_parameters() (in module botorch.optim.utils.model_utils)": [[8, "botorch.optim.utils.model_utils.get_parameters"]], "get_parameters_and_bounds() (in module botorch.optim.utils.model_utils)": [[8, "botorch.optim.utils.model_utils.get_parameters_and_bounds"]], "get_tensors_as_ndarray_1d() (in module botorch.optim.utils.numpy_utils)": [[8, "botorch.optim.utils.numpy_utils.get_tensors_as_ndarray_1d"]], "ic_gen_kwargs (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.ic_gen_kwargs"]], "ic_generator (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.ic_generator"]], "inequality_constraints (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.inequality_constraints"]], "initialize_q_batch() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.initialize_q_batch"]], "initialize_q_batch_nonneg() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.initialize_q_batch_nonneg"]], "lin_constraint_jac() (in module botorch.optim.parameter_constraints)": [[8, "botorch.optim.parameter_constraints.lin_constraint_jac"]], "make_scipy_bounds() (in module botorch.optim.parameter_constraints)": [[8, "botorch.optim.parameter_constraints.make_scipy_bounds"]], "make_scipy_linear_constraints() (in module botorch.optim.parameter_constraints)": [[8, "botorch.optim.parameter_constraints.make_scipy_linear_constraints"]], "make_scipy_nonlinear_inequality_constraints() (in module botorch.optim.parameter_constraints)": [[8, "botorch.optim.parameter_constraints.make_scipy_nonlinear_inequality_constraints"]], "message (botorch.optim.core.optimizationresult attribute)": [[8, "botorch.optim.core.OptimizationResult.message"]], "minimize_with_timeout() (in module botorch.optim.utils.timeout)": [[8, "botorch.optim.utils.timeout.minimize_with_timeout"]], "module_to_array() (in module botorch.optim.numpy_converter)": [[8, "botorch.optim.numpy_converter.module_to_array"]], "nonlinear_inequality_constraints (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.nonlinear_inequality_constraints"]], "num_restarts (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.num_restarts"]], "optimize_acqf() (in module botorch.optim.optimize)": [[8, "botorch.optim.optimize.optimize_acqf"]], "optimize_acqf_cyclic() (in module botorch.optim.optimize)": [[8, "botorch.optim.optimize.optimize_acqf_cyclic"]], "optimize_acqf_discrete() (in module botorch.optim.optimize)": [[8, "botorch.optim.optimize.optimize_acqf_discrete"]], "optimize_acqf_discrete_local_search() (in module botorch.optim.optimize)": [[8, "botorch.optim.optimize.optimize_acqf_discrete_local_search"]], "optimize_acqf_list() (in module botorch.optim.optimize)": [[8, "botorch.optim.optimize.optimize_acqf_list"]], "optimize_acqf_mixed() (in module botorch.optim.optimize)": [[8, "botorch.optim.optimize.optimize_acqf_mixed"]], "options (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.options"]], "post_processing_func (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.post_processing_func"]], "q (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.q"]], "raw_samples (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.raw_samples"]], "retry_on_optimization_warning (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.retry_on_optimization_warning"]], "return_best_only (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.return_best_only"]], "return_full_tree (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.return_full_tree"]], "runtime (botorch.optim.core.optimizationresult attribute)": [[8, "botorch.optim.core.OptimizationResult.runtime"]], "sample_all_priors() (in module botorch.optim.utils.model_utils)": [[8, "botorch.optim.utils.model_utils.sample_all_priors"]], "sample_perturbed_subset_dims() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.sample_perturbed_subset_dims"]], "sample_points_around_best() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.sample_points_around_best"]], "sample_truncated_normal_perturbations() (in module botorch.optim.initializers)": [[8, "botorch.optim.initializers.sample_truncated_normal_perturbations"]], "scipy_minimize() (in module botorch.optim.core)": [[8, "botorch.optim.core.scipy_minimize"]], "sequential (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.sequential"]], "set_params_with_array() (in module botorch.optim.numpy_converter)": [[8, "botorch.optim.numpy_converter.set_params_with_array"]], "set_tensors_from_ndarray_1d() (in module botorch.optim.utils.numpy_utils)": [[8, "botorch.optim.utils.numpy_utils.set_tensors_from_ndarray_1d"]], "shape (botorch.optim.utils.model_utils.torchattr attribute)": [[8, "botorch.optim.utils.model_utils.TorchAttr.shape"]], "state (botorch.optim.closures.core.ndarrayoptimizationclosure property)": [[8, "botorch.optim.closures.core.NdarrayOptimizationClosure.state"]], "status (botorch.optim.core.optimizationresult attribute)": [[8, "botorch.optim.core.OptimizationResult.status"]], "step (botorch.optim.core.optimizationresult attribute)": [[8, "botorch.optim.core.OptimizationResult.step"]], "timeout_sec (botorch.optim.optimize.optimizeacqfinputs attribute)": [[8, "botorch.optim.optimize.OptimizeAcqfInputs.timeout_sec"]], "torch_minimize() (in module botorch.optim.core)": [[8, "botorch.optim.core.torch_minimize"]], "deterministicposterior (class in botorch.posteriors.deterministic)": [[9, "botorch.posteriors.deterministic.DeterministicPosterior"]], "ensembleposterior (class in botorch.posteriors.ensemble)": [[9, "botorch.posteriors.ensemble.EnsemblePosterior"]], "fullybayesianposterior (class in botorch.posteriors.fully_bayesian)": [[9, "botorch.posteriors.fully_bayesian.FullyBayesianPosterior"]], "gpytorchposterior (class in botorch.posteriors.gpytorch)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior"]], "higherordergpposterior (class in botorch.posteriors.higher_order)": [[9, "botorch.posteriors.higher_order.HigherOrderGPPosterior"]], "multitaskgpposterior (class in botorch.posteriors.multitask)": [[9, "botorch.posteriors.multitask.MultitaskGPPosterior"]], "posteriorlist (class in botorch.posteriors.posterior_list)": [[9, "botorch.posteriors.posterior_list.PosteriorList"]], "torchposterior (class in botorch.posteriors.torch)": [[9, "botorch.posteriors.torch.TorchPosterior"]], "transformedposterior (class in botorch.posteriors.transformed)": [[9, "botorch.posteriors.transformed.TransformedPosterior"]], "base_sample_shape (botorch.posteriors.gpytorch.gpytorchposterior property)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.base_sample_shape"]], "base_sample_shape (botorch.posteriors.higher_order.higherordergpposterior property)": [[9, "botorch.posteriors.higher_order.HigherOrderGPPosterior.base_sample_shape"]], "base_sample_shape (botorch.posteriors.multitask.multitaskgpposterior property)": [[9, "botorch.posteriors.multitask.MultitaskGPPosterior.base_sample_shape"]], "base_sample_shape (botorch.posteriors.transformed.transformedposterior property)": [[9, "botorch.posteriors.transformed.TransformedPosterior.base_sample_shape"]], "batch_range (botorch.posteriors.fully_bayesian.fullybayesianposterior property)": [[9, "botorch.posteriors.fully_bayesian.FullyBayesianPosterior.batch_range"]], "batch_range (botorch.posteriors.gpytorch.gpytorchposterior property)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.batch_range"]], "batch_range (botorch.posteriors.higher_order.higherordergpposterior property)": [[9, "botorch.posteriors.higher_order.HigherOrderGPPosterior.batch_range"]], "batch_range (botorch.posteriors.multitask.multitaskgpposterior property)": [[9, "botorch.posteriors.multitask.MultitaskGPPosterior.batch_range"]], "batch_range (botorch.posteriors.transformed.transformedposterior property)": [[9, "botorch.posteriors.transformed.TransformedPosterior.batch_range"]], "batched_bisect() (in module botorch.posteriors.fully_bayesian)": [[9, "botorch.posteriors.fully_bayesian.batched_bisect"]], "botorch.posteriors": [[9, "module-botorch.posteriors"]], "botorch.posteriors.base_samples": [[9, "module-botorch.posteriors.base_samples"]], "botorch.posteriors.deterministic": [[9, "module-botorch.posteriors.deterministic"]], "botorch.posteriors.ensemble": [[9, "module-botorch.posteriors.ensemble"]], "botorch.posteriors.fully_bayesian": [[9, "module-botorch.posteriors.fully_bayesian"]], "botorch.posteriors.gpytorch": [[9, "module-botorch.posteriors.gpytorch"]], "botorch.posteriors.higher_order": [[9, "module-botorch.posteriors.higher_order"]], "botorch.posteriors.multitask": [[9, "module-botorch.posteriors.multitask"]], "botorch.posteriors.posterior": [[9, "module-botorch.posteriors.posterior"]], "botorch.posteriors.posterior_list": [[9, "module-botorch.posteriors.posterior_list"]], "botorch.posteriors.torch": [[9, "module-botorch.posteriors.torch"]], "botorch.posteriors.transformed": [[9, "module-botorch.posteriors.transformed"]], "density() (botorch.posteriors.gpytorch.gpytorchposterior method)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.density"]], "density() (botorch.posteriors.torch.torchposterior method)": [[9, "botorch.posteriors.torch.TorchPosterior.density"]], "device (botorch.posteriors.deterministic.deterministicposterior property)": [[9, "botorch.posteriors.deterministic.DeterministicPosterior.device"]], "device (botorch.posteriors.ensemble.ensembleposterior property)": [[9, "botorch.posteriors.ensemble.EnsemblePosterior.device"]], "device (botorch.posteriors.posterior_list.posteriorlist property)": [[9, "botorch.posteriors.posterior_list.PosteriorList.device"]], "device (botorch.posteriors.torch.torchposterior property)": [[9, "botorch.posteriors.torch.TorchPosterior.device"]], "device (botorch.posteriors.transformed.transformedposterior property)": [[9, "botorch.posteriors.transformed.TransformedPosterior.device"]], "distribution (botorch.posteriors.fully_bayesian.fullybayesianposterior attribute)": [[9, "botorch.posteriors.fully_bayesian.FullyBayesianPosterior.distribution"]], "distribution (botorch.posteriors.gpytorch.gpytorchposterior attribute)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.distribution"]], "distribution (botorch.posteriors.higher_order.higherordergpposterior attribute)": [[9, "botorch.posteriors.higher_order.HigherOrderGPPosterior.distribution"]], "distribution (botorch.posteriors.multitask.multitaskgpposterior attribute)": [[9, "botorch.posteriors.multitask.MultitaskGPPosterior.distribution"]], "dtype (botorch.posteriors.deterministic.deterministicposterior property)": [[9, "botorch.posteriors.deterministic.DeterministicPosterior.dtype"]], "dtype (botorch.posteriors.ensemble.ensembleposterior property)": [[9, "botorch.posteriors.ensemble.EnsemblePosterior.dtype"]], "dtype (botorch.posteriors.posterior_list.posteriorlist property)": [[9, "botorch.posteriors.posterior_list.PosteriorList.dtype"]], "dtype (botorch.posteriors.torch.torchposterior property)": [[9, "botorch.posteriors.torch.TorchPosterior.dtype"]], "dtype (botorch.posteriors.transformed.transformedposterior property)": [[9, "botorch.posteriors.transformed.TransformedPosterior.dtype"]], "ensemble_size (botorch.posteriors.ensemble.ensembleposterior property)": [[9, "botorch.posteriors.ensemble.EnsemblePosterior.ensemble_size"]], "mean (botorch.posteriors.deterministic.deterministicposterior property)": [[9, "botorch.posteriors.deterministic.DeterministicPosterior.mean"]], "mean (botorch.posteriors.ensemble.ensembleposterior property)": [[9, "botorch.posteriors.ensemble.EnsemblePosterior.mean"]], "mean (botorch.posteriors.gpytorch.gpytorchposterior property)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.mean"]], "mean (botorch.posteriors.posterior_list.posteriorlist property)": [[9, "botorch.posteriors.posterior_list.PosteriorList.mean"]], "mean (botorch.posteriors.transformed.transformedposterior property)": [[9, "botorch.posteriors.transformed.TransformedPosterior.mean"]], "mixture_mean (botorch.posteriors.fully_bayesian.fullybayesianposterior property)": [[9, "botorch.posteriors.fully_bayesian.FullyBayesianPosterior.mixture_mean"]], "mixture_variance (botorch.posteriors.fully_bayesian.fullybayesianposterior property)": [[9, "botorch.posteriors.fully_bayesian.FullyBayesianPosterior.mixture_variance"]], "mvn (botorch.posteriors.gpytorch.gpytorchposterior property)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.mvn"]], "quantile() (botorch.posteriors.fully_bayesian.fullybayesianposterior method)": [[9, "botorch.posteriors.fully_bayesian.FullyBayesianPosterior.quantile"]], "quantile() (botorch.posteriors.gpytorch.gpytorchposterior method)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.quantile"]], "quantile() (botorch.posteriors.torch.torchposterior method)": [[9, "botorch.posteriors.torch.TorchPosterior.quantile"]], "rsample() (botorch.posteriors.deterministic.deterministicposterior method)": [[9, "botorch.posteriors.deterministic.DeterministicPosterior.rsample"]], "rsample() (botorch.posteriors.ensemble.ensembleposterior method)": [[9, "botorch.posteriors.ensemble.EnsemblePosterior.rsample"]], "rsample() (botorch.posteriors.gpytorch.gpytorchposterior method)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.rsample"]], "rsample() (botorch.posteriors.higher_order.higherordergpposterior method)": [[9, "botorch.posteriors.higher_order.HigherOrderGPPosterior.rsample"]], "rsample() (botorch.posteriors.multitask.multitaskgpposterior method)": [[9, "botorch.posteriors.multitask.MultitaskGPPosterior.rsample"]], "rsample() (botorch.posteriors.posterior_list.posteriorlist method)": [[9, "botorch.posteriors.posterior_list.PosteriorList.rsample"]], "rsample() (botorch.posteriors.torch.torchposterior method)": [[9, "botorch.posteriors.torch.TorchPosterior.rsample"]], "rsample() (botorch.posteriors.transformed.transformedposterior method)": [[9, "botorch.posteriors.transformed.TransformedPosterior.rsample"]], "rsample_from_base_samples() (botorch.posteriors.ensemble.ensembleposterior method)": [[9, "botorch.posteriors.ensemble.EnsemblePosterior.rsample_from_base_samples"]], "rsample_from_base_samples() (botorch.posteriors.gpytorch.gpytorchposterior method)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.rsample_from_base_samples"]], "rsample_from_base_samples() (botorch.posteriors.higher_order.higherordergpposterior method)": [[9, "botorch.posteriors.higher_order.HigherOrderGPPosterior.rsample_from_base_samples"]], "rsample_from_base_samples() (botorch.posteriors.multitask.multitaskgpposterior method)": [[9, "botorch.posteriors.multitask.MultitaskGPPosterior.rsample_from_base_samples"]], "rsample_from_base_samples() (botorch.posteriors.transformed.transformedposterior method)": [[9, "botorch.posteriors.transformed.TransformedPosterior.rsample_from_base_samples"]], "sample() (botorch.posteriors.gpytorch.gpytorchposterior method)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.sample"]], "scalarize_posterior() (in module botorch.posteriors.gpytorch)": [[9, "botorch.posteriors.gpytorch.scalarize_posterior"]], "scalarize_posterior_gpytorch() (in module botorch.posteriors.gpytorch)": [[9, "botorch.posteriors.gpytorch.scalarize_posterior_gpytorch"]], "variance (botorch.posteriors.deterministic.deterministicposterior property)": [[9, "botorch.posteriors.deterministic.DeterministicPosterior.variance"]], "variance (botorch.posteriors.ensemble.ensembleposterior property)": [[9, "botorch.posteriors.ensemble.EnsemblePosterior.variance"]], "variance (botorch.posteriors.gpytorch.gpytorchposterior property)": [[9, "botorch.posteriors.gpytorch.GPyTorchPosterior.variance"]], "variance (botorch.posteriors.posterior_list.posteriorlist property)": [[9, "botorch.posteriors.posterior_list.PosteriorList.variance"]], "variance (botorch.posteriors.transformed.transformedposterior property)": [[9, "botorch.posteriors.transformed.TransformedPosterior.variance"]], "weights (botorch.posteriors.ensemble.ensembleposterior property)": [[9, "botorch.posteriors.ensemble.EnsemblePosterior.weights"]], "chainedtransform (class in botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.ChainedTransform"]], "deterministicsampler (class in botorch.sampling.deterministic)": [[10, "botorch.sampling.deterministic.DeterministicSampler"]], "featuremap (class in botorch.sampling.pathwise.features.maps)": [[10, "botorch.sampling.pathwise.features.maps.FeatureMap"]], "featureselector (class in botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.FeatureSelector"]], "forkedrngsampler (class in botorch.sampling.stochastic_samplers)": [[10, "botorch.sampling.stochastic_samplers.ForkedRNGSampler"]], "generalizedlinearpath (class in botorch.sampling.pathwise.paths)": [[10, "botorch.sampling.pathwise.paths.GeneralizedLinearPath"]], "iidnormalsampler (class in botorch.sampling.normal)": [[10, "botorch.sampling.normal.IIDNormalSampler"]], "indexsampler (class in botorch.sampling.index_sampler)": [[10, "botorch.sampling.index_sampler.IndexSampler"]], "inverselengthscaletransform (class in botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.InverseLengthscaleTransform"]], "kernelevaluationmap (class in botorch.sampling.pathwise.features.maps)": [[10, "botorch.sampling.pathwise.features.maps.KernelEvaluationMap"]], "kernelfeaturemap (class in botorch.sampling.pathwise.features.maps)": [[10, "botorch.sampling.pathwise.features.maps.KernelFeatureMap"]], "matheronpath (class in botorch.sampling.pathwise.posterior_samplers)": [[10, "botorch.sampling.pathwise.posterior_samplers.MatheronPath"]], "multivariatenormalqmcengine (class in botorch.sampling.qmc)": [[10, "botorch.sampling.qmc.MultivariateNormalQMCEngine"]], "normalmcsampler (class in botorch.sampling.normal)": [[10, "botorch.sampling.normal.NormalMCSampler"]], "normalqmcengine (class in botorch.sampling.qmc)": [[10, "botorch.sampling.qmc.NormalQMCEngine"]], "outcomeuntransformer (class in botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.OutcomeUntransformer"]], "outputscaletransform (class in botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.OutputscaleTransform"]], "pairwiseiidnormalsampler (class in botorch.sampling.pairwise_samplers)": [[10, "botorch.sampling.pairwise_samplers.PairwiseIIDNormalSampler"]], "pairwisemcsampler (class in botorch.sampling.pairwise_samplers)": [[10, "botorch.sampling.pairwise_samplers.PairwiseMCSampler"]], "pairwisesobolqmcnormalsampler (class in botorch.sampling.pairwise_samplers)": [[10, "botorch.sampling.pairwise_samplers.PairwiseSobolQMCNormalSampler"]], "pathdict (class in botorch.sampling.pathwise.paths)": [[10, "botorch.sampling.pathwise.paths.PathDict"]], "pathlist (class in botorch.sampling.pathwise.paths)": [[10, "botorch.sampling.pathwise.paths.PathList"]], "samplepath (class in botorch.sampling.pathwise.paths)": [[10, "botorch.sampling.pathwise.paths.SamplePath"]], "sinecosinetransform (class in botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.SineCosineTransform"]], "sobolqmcnormalsampler (class in botorch.sampling.normal)": [[10, "botorch.sampling.normal.SobolQMCNormalSampler"]], "stochasticsampler (class in botorch.sampling.stochastic_samplers)": [[10, "botorch.sampling.stochastic_samplers.StochasticSampler"]], "tensortransform (class in botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.TensorTransform"]], "transformedmodulemixin (class in botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.TransformedModuleMixin"]], "batch_shape (botorch.sampling.pathwise.features.maps.featuremap attribute)": [[10, "botorch.sampling.pathwise.features.maps.FeatureMap.batch_shape"]], "batch_shape (botorch.sampling.pathwise.features.maps.kernelevaluationmap property)": [[10, "botorch.sampling.pathwise.features.maps.KernelEvaluationMap.batch_shape"]], "batch_shape (botorch.sampling.pathwise.features.maps.kernelfeaturemap property)": [[10, "botorch.sampling.pathwise.features.maps.KernelFeatureMap.batch_shape"]], "botorch.sampling": [[10, "module-botorch.sampling"]], "botorch.sampling.base": [[10, "module-botorch.sampling.base"]], "botorch.sampling.deterministic": [[10, "module-botorch.sampling.deterministic"]], "botorch.sampling.get_sampler": [[10, "module-botorch.sampling.get_sampler"]], "botorch.sampling.index_sampler": [[10, "module-botorch.sampling.index_sampler"]], "botorch.sampling.list_sampler": [[10, "module-botorch.sampling.list_sampler"]], "botorch.sampling.normal": [[10, "module-botorch.sampling.normal"]], "botorch.sampling.pairwise_samplers": [[10, "module-botorch.sampling.pairwise_samplers"]], "botorch.sampling.pathwise.features.generators": [[10, "module-botorch.sampling.pathwise.features.generators"]], "botorch.sampling.pathwise.features.maps": [[10, "module-botorch.sampling.pathwise.features.maps"]], "botorch.sampling.pathwise.paths": [[10, "module-botorch.sampling.pathwise.paths"]], "botorch.sampling.pathwise.posterior_samplers": [[10, "module-botorch.sampling.pathwise.posterior_samplers"]], "botorch.sampling.pathwise.prior_samplers": [[10, "module-botorch.sampling.pathwise.prior_samplers"]], "botorch.sampling.pathwise.update_strategies": [[10, "module-botorch.sampling.pathwise.update_strategies"]], "botorch.sampling.pathwise.utils": [[10, "module-botorch.sampling.pathwise.utils"]], "botorch.sampling.qmc": [[10, "module-botorch.sampling.qmc"]], "botorch.sampling.stochastic_samplers": [[10, "module-botorch.sampling.stochastic_samplers"]], "draw() (botorch.sampling.qmc.multivariatenormalqmcengine method)": [[10, "botorch.sampling.qmc.MultivariateNormalQMCEngine.draw"]], "draw() (botorch.sampling.qmc.normalqmcengine method)": [[10, "botorch.sampling.qmc.NormalQMCEngine.draw"]], "draw_kernel_feature_paths() (in module botorch.sampling.pathwise.prior_samplers)": [[10, "botorch.sampling.pathwise.prior_samplers.draw_kernel_feature_paths"]], "draw_matheron_paths() (in module botorch.sampling.pathwise.posterior_samplers)": [[10, "botorch.sampling.pathwise.posterior_samplers.draw_matheron_paths"]], "forward() (botorch.sampling.index_sampler.indexsampler method)": [[10, "botorch.sampling.index_sampler.IndexSampler.forward"]], "forward() (botorch.sampling.normal.normalmcsampler method)": [[10, "botorch.sampling.normal.NormalMCSampler.forward"]], "forward() (botorch.sampling.pairwise_samplers.pairwisemcsampler method)": [[10, "botorch.sampling.pairwise_samplers.PairwiseMCSampler.forward"]], "forward() (botorch.sampling.pathwise.features.maps.kernelevaluationmap method)": [[10, "botorch.sampling.pathwise.features.maps.KernelEvaluationMap.forward"]], "forward() (botorch.sampling.pathwise.features.maps.kernelfeaturemap method)": [[10, "botorch.sampling.pathwise.features.maps.KernelFeatureMap.forward"]], "forward() (botorch.sampling.pathwise.paths.generalizedlinearpath method)": [[10, "botorch.sampling.pathwise.paths.GeneralizedLinearPath.forward"]], "forward() (botorch.sampling.pathwise.paths.pathdict method)": [[10, "botorch.sampling.pathwise.paths.PathDict.forward"]], "forward() (botorch.sampling.pathwise.paths.pathlist method)": [[10, "botorch.sampling.pathwise.paths.PathList.forward"]], "forward() (botorch.sampling.pathwise.utils.chainedtransform method)": [[10, "botorch.sampling.pathwise.utils.ChainedTransform.forward"]], "forward() (botorch.sampling.pathwise.utils.featureselector method)": [[10, "botorch.sampling.pathwise.utils.FeatureSelector.forward"]], "forward() (botorch.sampling.pathwise.utils.inverselengthscaletransform method)": [[10, "botorch.sampling.pathwise.utils.InverseLengthscaleTransform.forward"]], "forward() (botorch.sampling.pathwise.utils.outcomeuntransformer method)": [[10, "botorch.sampling.pathwise.utils.OutcomeUntransformer.forward"]], "forward() (botorch.sampling.pathwise.utils.outputscaletransform method)": [[10, "botorch.sampling.pathwise.utils.OutputscaleTransform.forward"]], "forward() (botorch.sampling.pathwise.utils.sinecosinetransform method)": [[10, "botorch.sampling.pathwise.utils.SineCosineTransform.forward"]], "forward() (botorch.sampling.pathwise.utils.tensortransform method)": [[10, "botorch.sampling.pathwise.utils.TensorTransform.forward"]], "forward() (botorch.sampling.stochastic_samplers.forkedrngsampler method)": [[10, "botorch.sampling.stochastic_samplers.ForkedRNGSampler.forward"]], "forward() (botorch.sampling.stochastic_samplers.stochasticsampler method)": [[10, "botorch.sampling.stochastic_samplers.StochasticSampler.forward"]], "gaussian_update() (in module botorch.sampling.pathwise.update_strategies)": [[10, "botorch.sampling.pathwise.update_strategies.gaussian_update"]], "gen_kernel_features() (in module botorch.sampling.pathwise.features.generators)": [[10, "botorch.sampling.pathwise.features.generators.gen_kernel_features"]], "get_input_transform() (in module botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.get_input_transform"]], "get_output_transform() (in module botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.get_output_transform"]], "get_sampler() (in module botorch.sampling.get_sampler)": [[10, "botorch.sampling.get_sampler.get_sampler"]], "get_train_inputs() (in module botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.get_train_inputs"]], "get_train_targets() (in module botorch.sampling.pathwise.utils)": [[10, "botorch.sampling.pathwise.utils.get_train_targets"]], "input_transform (botorch.sampling.pathwise.features.maps.featuremap attribute)": [[10, "botorch.sampling.pathwise.features.maps.FeatureMap.input_transform"]], "input_transform (botorch.sampling.pathwise.features.maps.kernelevaluationmap attribute)": [[10, "botorch.sampling.pathwise.features.maps.KernelEvaluationMap.input_transform"]], "input_transform (botorch.sampling.pathwise.features.maps.kernelfeaturemap attribute)": [[10, "botorch.sampling.pathwise.features.maps.KernelFeatureMap.input_transform"]], "input_transform (botorch.sampling.pathwise.paths.generalizedlinearpath attribute)": [[10, "botorch.sampling.pathwise.paths.GeneralizedLinearPath.input_transform"]], "input_transform (botorch.sampling.pathwise.paths.pathdict attribute)": [[10, "botorch.sampling.pathwise.paths.PathDict.input_transform"]], "input_transform (botorch.sampling.pathwise.paths.pathlist attribute)": [[10, "botorch.sampling.pathwise.paths.PathList.input_transform"]], "input_transform (botorch.sampling.pathwise.paths.samplepath attribute)": [[10, "botorch.sampling.pathwise.paths.SamplePath.input_transform"]], "input_transform (botorch.sampling.pathwise.posterior_samplers.matheronpath attribute)": [[10, "botorch.sampling.pathwise.posterior_samplers.MatheronPath.input_transform"]], "input_transform (botorch.sampling.pathwise.utils.transformedmodulemixin attribute)": [[10, "botorch.sampling.pathwise.utils.TransformedModuleMixin.input_transform"]], "items() (botorch.sampling.pathwise.paths.pathdict method)": [[10, "botorch.sampling.pathwise.paths.PathDict.items"]], "keys() (botorch.sampling.pathwise.paths.pathdict method)": [[10, "botorch.sampling.pathwise.paths.PathDict.keys"]], "num_outputs (botorch.sampling.pathwise.features.maps.featuremap attribute)": [[10, "botorch.sampling.pathwise.features.maps.FeatureMap.num_outputs"]], "num_outputs (botorch.sampling.pathwise.features.maps.kernelevaluationmap property)": [[10, "botorch.sampling.pathwise.features.maps.KernelEvaluationMap.num_outputs"]], "num_outputs (botorch.sampling.pathwise.features.maps.kernelfeaturemap property)": [[10, "botorch.sampling.pathwise.features.maps.KernelFeatureMap.num_outputs"]], "output_transform (botorch.sampling.pathwise.features.maps.featuremap attribute)": [[10, "botorch.sampling.pathwise.features.maps.FeatureMap.output_transform"]], "output_transform (botorch.sampling.pathwise.features.maps.kernelevaluationmap attribute)": [[10, "botorch.sampling.pathwise.features.maps.KernelEvaluationMap.output_transform"]], "output_transform (botorch.sampling.pathwise.features.maps.kernelfeaturemap attribute)": [[10, "botorch.sampling.pathwise.features.maps.KernelFeatureMap.output_transform"]], "output_transform (botorch.sampling.pathwise.paths.generalizedlinearpath attribute)": [[10, "botorch.sampling.pathwise.paths.GeneralizedLinearPath.output_transform"]], "output_transform (botorch.sampling.pathwise.paths.pathdict attribute)": [[10, "botorch.sampling.pathwise.paths.PathDict.output_transform"]], "output_transform (botorch.sampling.pathwise.paths.pathlist attribute)": [[10, "botorch.sampling.pathwise.paths.PathList.output_transform"]], "output_transform (botorch.sampling.pathwise.paths.samplepath attribute)": [[10, "botorch.sampling.pathwise.paths.SamplePath.output_transform"]], "output_transform (botorch.sampling.pathwise.posterior_samplers.matheronpath attribute)": [[10, "botorch.sampling.pathwise.posterior_samplers.MatheronPath.output_transform"]], "output_transform (botorch.sampling.pathwise.utils.transformedmodulemixin attribute)": [[10, "botorch.sampling.pathwise.utils.TransformedModuleMixin.output_transform"]], "training (botorch.sampling.deterministic.deterministicsampler attribute)": [[10, "botorch.sampling.deterministic.DeterministicSampler.training"]], "training (botorch.sampling.index_sampler.indexsampler attribute)": [[10, "botorch.sampling.index_sampler.IndexSampler.training"]], "training (botorch.sampling.normal.iidnormalsampler attribute)": [[10, "botorch.sampling.normal.IIDNormalSampler.training"]], "training (botorch.sampling.normal.normalmcsampler attribute)": [[10, "botorch.sampling.normal.NormalMCSampler.training"]], "training (botorch.sampling.normal.sobolqmcnormalsampler attribute)": [[10, "botorch.sampling.normal.SobolQMCNormalSampler.training"]], "training (botorch.sampling.pairwise_samplers.pairwiseiidnormalsampler attribute)": [[10, "botorch.sampling.pairwise_samplers.PairwiseIIDNormalSampler.training"]], "training (botorch.sampling.pairwise_samplers.pairwisemcsampler attribute)": [[10, "botorch.sampling.pairwise_samplers.PairwiseMCSampler.training"]], "training (botorch.sampling.pairwise_samplers.pairwisesobolqmcnormalsampler attribute)": [[10, "botorch.sampling.pairwise_samplers.PairwiseSobolQMCNormalSampler.training"]], "training (botorch.sampling.pathwise.features.maps.kernelevaluationmap attribute)": [[10, "botorch.sampling.pathwise.features.maps.KernelEvaluationMap.training"]], "training (botorch.sampling.pathwise.features.maps.kernelfeaturemap attribute)": [[10, "botorch.sampling.pathwise.features.maps.KernelFeatureMap.training"]], "training (botorch.sampling.pathwise.paths.generalizedlinearpath attribute)": [[10, "botorch.sampling.pathwise.paths.GeneralizedLinearPath.training"]], "training (botorch.sampling.pathwise.paths.pathdict attribute)": [[10, "botorch.sampling.pathwise.paths.PathDict.training"]], "training (botorch.sampling.pathwise.paths.pathlist attribute)": [[10, "botorch.sampling.pathwise.paths.PathList.training"]], "training (botorch.sampling.pathwise.posterior_samplers.matheronpath attribute)": [[10, "botorch.sampling.pathwise.posterior_samplers.MatheronPath.training"]], "training (botorch.sampling.pathwise.utils.chainedtransform attribute)": [[10, "botorch.sampling.pathwise.utils.ChainedTransform.training"]], "training (botorch.sampling.pathwise.utils.featureselector attribute)": [[10, "botorch.sampling.pathwise.utils.FeatureSelector.training"]], "training (botorch.sampling.pathwise.utils.inverselengthscaletransform attribute)": [[10, "botorch.sampling.pathwise.utils.InverseLengthscaleTransform.training"]], "training (botorch.sampling.pathwise.utils.outcomeuntransformer attribute)": [[10, "botorch.sampling.pathwise.utils.OutcomeUntransformer.training"]], "training (botorch.sampling.pathwise.utils.outputscaletransform attribute)": [[10, "botorch.sampling.pathwise.utils.OutputscaleTransform.training"]], "training (botorch.sampling.pathwise.utils.sinecosinetransform attribute)": [[10, "botorch.sampling.pathwise.utils.SineCosineTransform.training"]], "training (botorch.sampling.pathwise.utils.tensortransform attribute)": [[10, "botorch.sampling.pathwise.utils.TensorTransform.training"]], "training (botorch.sampling.stochastic_samplers.forkedrngsampler attribute)": [[10, "botorch.sampling.stochastic_samplers.ForkedRNGSampler.training"]], "training (botorch.sampling.stochastic_samplers.stochasticsampler attribute)": [[10, "botorch.sampling.stochastic_samplers.StochasticSampler.training"]], "values() (botorch.sampling.pathwise.paths.pathdict method)": [[10, "botorch.sampling.pathwise.paths.PathDict.values"]], "botorch.settings": [[11, "module-botorch.settings"]], "debug (class in botorch.settings)": [[11, "botorch.settings.debug"]], "level (botorch.settings.log_level attribute)": [[11, "botorch.settings.log_level.level"]], "log_level (class in botorch.settings)": [[11, "botorch.settings.log_level"]], "propagate_grads (class in botorch.settings)": [[11, "botorch.settings.propagate_grads"]], "validate_input_scaling (class in botorch.settings)": [[11, "botorch.settings.validate_input_scaling"]], "ackley (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Ackley"]], "augmentedbranin (class in botorch.test_functions.multi_fidelity)": [[12, "botorch.test_functions.multi_fidelity.AugmentedBranin"]], "augmentedhartmann (class in botorch.test_functions.multi_fidelity)": [[12, "botorch.test_functions.multi_fidelity.AugmentedHartmann"]], "augmentedrosenbrock (class in botorch.test_functions.multi_fidelity)": [[12, "botorch.test_functions.multi_fidelity.AugmentedRosenbrock"]], "bnh (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.BNH"]], "basetestproblem (class in botorch.test_functions.base)": [[12, "botorch.test_functions.base.BaseTestProblem"]], "beale (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Beale"]], "branin (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Branin"]], "branincurrin (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.BraninCurrin"]], "bukin (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Bukin"]], "c2dtlz2 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.C2DTLZ2"]], "constr (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.CONSTR"]], "carsideimpact (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.CarSideImpact"]], "constrainedbasetestproblem (class in botorch.test_functions.base)": [[12, "botorch.test_functions.base.ConstrainedBaseTestProblem"]], "constrainedbranincurrin (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.ConstrainedBraninCurrin"]], "cosine8 (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Cosine8"]], "dh (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DH"]], "dh1 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DH1"]], "dh2 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DH2"]], "dh3 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DH3"]], "dh4 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DH4"]], "dtlz (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DTLZ"]], "dtlz1 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DTLZ1"]], "dtlz2 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DTLZ2"]], "dtlz3 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DTLZ3"]], "dtlz4 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DTLZ4"]], "dtlz5 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DTLZ5"]], "dtlz7 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DTLZ7"]], "discbrake (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.DiscBrake"]], "dixonprice (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.DixonPrice"]], "dropwave (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.DropWave"]], "e_d (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.E_d"]], "e_g (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.E_g"]], "eggholder (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.EggHolder"]], "gmm (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.GMM"]], "griewank (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Griewank"]], "gsobol (class in botorch.test_functions.sensitivity_analysis)": [[12, "botorch.test_functions.sensitivity_analysis.Gsobol"]], "hartmann (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Hartmann"]], "holdertable (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.HolderTable"]], "ishigami (class in botorch.test_functions.sensitivity_analysis)": [[12, "botorch.test_functions.sensitivity_analysis.Ishigami"]], "k (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.K"]], "k_1 (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.K_1"]], "k_2 (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.K_2"]], "k_i (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.K_I"]], "k_x (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.K_X"]], "k_p (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.K_p"]], "la2() (botorch.test_functions.multi_objective.mw7 method)": [[12, "botorch.test_functions.multi_objective.MW7.LA2"]], "levy (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Levy"]], "momfbranincurrin (class in botorch.test_functions.multi_objective_multi_fidelity)": [[12, "botorch.test_functions.multi_objective_multi_fidelity.MOMFBraninCurrin"]], "momfpark (class in botorch.test_functions.multi_objective_multi_fidelity)": [[12, "botorch.test_functions.multi_objective_multi_fidelity.MOMFPark"]], "mw7 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.MW7"]], "michalewicz (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Michalewicz"]], "morris (class in botorch.test_functions.sensitivity_analysis)": [[12, "botorch.test_functions.sensitivity_analysis.Morris"]], "multiobjectivetestproblem (class in botorch.test_functions.base)": [[12, "botorch.test_functions.base.MultiObjectiveTestProblem"]], "osy (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.OSY"]], "penicillin (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.Penicillin"]], "powell (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Powell"]], "r (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.R"]], "rastrigin (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Rastrigin"]], "rosenbrock (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Rosenbrock"]], "srn (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.SRN"]], "shekel (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.Shekel"]], "sixhumpcamel (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.SixHumpCamel"]], "styblinskitang (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.StyblinskiTang"]], "synthetictestfunction (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.SyntheticTestFunction"]], "t_o (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.T_o"]], "t_v (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.T_v"]], "threehumpcamel (class in botorch.test_functions.synthetic)": [[12, "botorch.test_functions.synthetic.ThreeHumpCamel"]], "toyrobust (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.ToyRobust"]], "v_max (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.V_max"]], "vehiclesafety (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.VehicleSafety"]], "weldedbeam (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.WeldedBeam"]], "y_ps (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.Y_ps"]], "y_xs (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.Y_xs"]], "zdt (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.ZDT"]], "zdt1 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.ZDT1"]], "zdt2 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.ZDT2"]], "zdt3 (class in botorch.test_functions.multi_objective)": [[12, "botorch.test_functions.multi_objective.ZDT3"]], "alpha (botorch.test_functions.multi_objective.dh1 attribute)": [[12, "botorch.test_functions.multi_objective.DH1.alpha"]], "alpha_1 (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.alpha_1"]], "alpha_2 (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.alpha_2"]], "alpha_3 (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.alpha_3"]], "beta (botorch.test_functions.multi_objective.dh1 attribute)": [[12, "botorch.test_functions.multi_objective.DH1.beta"]], "beta (botorch.test_functions.multi_objective.dh2 attribute)": [[12, "botorch.test_functions.multi_objective.DH2.beta"]], "botorch.test_functions": [[12, "module-botorch.test_functions"]], "botorch.test_functions.base": [[12, "module-botorch.test_functions.base"]], "botorch.test_functions.multi_fidelity": [[12, "module-botorch.test_functions.multi_fidelity"]], "botorch.test_functions.multi_objective": [[12, "module-botorch.test_functions.multi_objective"]], "botorch.test_functions.multi_objective_multi_fidelity": [[12, "module-botorch.test_functions.multi_objective_multi_fidelity"]], "botorch.test_functions.sensitivity_analysis": [[12, "module-botorch.test_functions.sensitivity_analysis"]], "botorch.test_functions.synthetic": [[12, "module-botorch.test_functions.synthetic"]], "compute_dgsm() (botorch.test_functions.sensitivity_analysis.ishigami method)": [[12, "botorch.test_functions.sensitivity_analysis.Ishigami.compute_dgsm"]], "dim (botorch.test_functions.base.basetestproblem attribute)": [[12, "botorch.test_functions.base.BaseTestProblem.dim"]], "dim (botorch.test_functions.multi_fidelity.augmentedbranin attribute)": [[12, "botorch.test_functions.multi_fidelity.AugmentedBranin.dim"]], "dim (botorch.test_functions.multi_fidelity.augmentedhartmann attribute)": [[12, "botorch.test_functions.multi_fidelity.AugmentedHartmann.dim"]], "dim (botorch.test_functions.multi_fidelity.augmentedrosenbrock attribute)": [[12, "botorch.test_functions.multi_fidelity.AugmentedRosenbrock.dim"]], "dim (botorch.test_functions.multi_objective.bnh attribute)": [[12, "botorch.test_functions.multi_objective.BNH.dim"]], "dim (botorch.test_functions.multi_objective.branincurrin attribute)": [[12, "botorch.test_functions.multi_objective.BraninCurrin.dim"]], "dim (botorch.test_functions.multi_objective.c2dtlz2 attribute)": [[12, "botorch.test_functions.multi_objective.C2DTLZ2.dim"]], "dim (botorch.test_functions.multi_objective.constr attribute)": [[12, "botorch.test_functions.multi_objective.CONSTR.dim"]], "dim (botorch.test_functions.multi_objective.carsideimpact attribute)": [[12, "botorch.test_functions.multi_objective.CarSideImpact.dim"]], "dim (botorch.test_functions.multi_objective.constrainedbranincurrin attribute)": [[12, "botorch.test_functions.multi_objective.ConstrainedBraninCurrin.dim"]], "dim (botorch.test_functions.multi_objective.dh1 attribute)": [[12, "botorch.test_functions.multi_objective.DH1.dim"]], "dim (botorch.test_functions.multi_objective.dh2 attribute)": [[12, "botorch.test_functions.multi_objective.DH2.dim"]], "dim (botorch.test_functions.multi_objective.dh3 attribute)": [[12, "botorch.test_functions.multi_objective.DH3.dim"]], "dim (botorch.test_functions.multi_objective.dh4 attribute)": [[12, "botorch.test_functions.multi_objective.DH4.dim"]], "dim (botorch.test_functions.multi_objective.dtlz attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ.dim"]], "dim (botorch.test_functions.multi_objective.dtlz1 attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ1.dim"]], "dim (botorch.test_functions.multi_objective.dtlz2 attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ2.dim"]], "dim (botorch.test_functions.multi_objective.dtlz3 attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ3.dim"]], "dim (botorch.test_functions.multi_objective.dtlz4 attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ4.dim"]], "dim (botorch.test_functions.multi_objective.dtlz5 attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ5.dim"]], "dim (botorch.test_functions.multi_objective.dtlz7 attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ7.dim"]], "dim (botorch.test_functions.multi_objective.discbrake attribute)": [[12, "botorch.test_functions.multi_objective.DiscBrake.dim"]], "dim (botorch.test_functions.multi_objective.gmm attribute)": [[12, "botorch.test_functions.multi_objective.GMM.dim"]], "dim (botorch.test_functions.multi_objective.mw7 attribute)": [[12, "botorch.test_functions.multi_objective.MW7.dim"]], "dim (botorch.test_functions.multi_objective.osy attribute)": [[12, "botorch.test_functions.multi_objective.OSY.dim"]], "dim (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.dim"]], "dim (botorch.test_functions.multi_objective.srn attribute)": [[12, "botorch.test_functions.multi_objective.SRN.dim"]], "dim (botorch.test_functions.multi_objective.toyrobust attribute)": [[12, "botorch.test_functions.multi_objective.ToyRobust.dim"]], "dim (botorch.test_functions.multi_objective.vehiclesafety attribute)": [[12, "botorch.test_functions.multi_objective.VehicleSafety.dim"]], "dim (botorch.test_functions.multi_objective.weldedbeam attribute)": [[12, "botorch.test_functions.multi_objective.WeldedBeam.dim"]], "dim (botorch.test_functions.multi_objective.zdt attribute)": [[12, "botorch.test_functions.multi_objective.ZDT.dim"]], "dim (botorch.test_functions.multi_objective.zdt1 attribute)": [[12, "botorch.test_functions.multi_objective.ZDT1.dim"]], "dim (botorch.test_functions.multi_objective.zdt2 attribute)": [[12, "botorch.test_functions.multi_objective.ZDT2.dim"]], "dim (botorch.test_functions.multi_objective.zdt3 attribute)": [[12, "botorch.test_functions.multi_objective.ZDT3.dim"]], "dim (botorch.test_functions.multi_objective_multi_fidelity.momfbranincurrin attribute)": [[12, "botorch.test_functions.multi_objective_multi_fidelity.MOMFBraninCurrin.dim"]], "dim (botorch.test_functions.multi_objective_multi_fidelity.momfpark attribute)": [[12, "botorch.test_functions.multi_objective_multi_fidelity.MOMFPark.dim"]], "dim (botorch.test_functions.sensitivity_analysis.gsobol attribute)": [[12, "botorch.test_functions.sensitivity_analysis.Gsobol.dim"]], "dim (botorch.test_functions.sensitivity_analysis.ishigami attribute)": [[12, "botorch.test_functions.sensitivity_analysis.Ishigami.dim"]], "dim (botorch.test_functions.sensitivity_analysis.morris attribute)": [[12, "botorch.test_functions.sensitivity_analysis.Morris.dim"]], "dim (botorch.test_functions.synthetic.beale attribute)": [[12, "botorch.test_functions.synthetic.Beale.dim"]], "dim (botorch.test_functions.synthetic.branin attribute)": [[12, "botorch.test_functions.synthetic.Branin.dim"]], "dim (botorch.test_functions.synthetic.bukin attribute)": [[12, "botorch.test_functions.synthetic.Bukin.dim"]], "dim (botorch.test_functions.synthetic.cosine8 attribute)": [[12, "botorch.test_functions.synthetic.Cosine8.dim"]], "dim (botorch.test_functions.synthetic.dixonprice attribute)": [[12, "botorch.test_functions.synthetic.DixonPrice.dim"]], "dim (botorch.test_functions.synthetic.dropwave attribute)": [[12, "botorch.test_functions.synthetic.DropWave.dim"]], "dim (botorch.test_functions.synthetic.eggholder attribute)": [[12, "botorch.test_functions.synthetic.EggHolder.dim"]], "dim (botorch.test_functions.synthetic.griewank attribute)": [[12, "botorch.test_functions.synthetic.Griewank.dim"]], "dim (botorch.test_functions.synthetic.hartmann attribute)": [[12, "botorch.test_functions.synthetic.Hartmann.dim"]], "dim (botorch.test_functions.synthetic.holdertable attribute)": [[12, "botorch.test_functions.synthetic.HolderTable.dim"]], "dim (botorch.test_functions.synthetic.levy attribute)": [[12, "botorch.test_functions.synthetic.Levy.dim"]], "dim (botorch.test_functions.synthetic.michalewicz attribute)": [[12, "botorch.test_functions.synthetic.Michalewicz.dim"]], "dim (botorch.test_functions.synthetic.powell attribute)": [[12, "botorch.test_functions.synthetic.Powell.dim"]], "dim (botorch.test_functions.synthetic.rastrigin attribute)": [[12, "botorch.test_functions.synthetic.Rastrigin.dim"]], "dim (botorch.test_functions.synthetic.rosenbrock attribute)": [[12, "botorch.test_functions.synthetic.Rosenbrock.dim"]], "dim (botorch.test_functions.synthetic.shekel attribute)": [[12, "botorch.test_functions.synthetic.Shekel.dim"]], "dim (botorch.test_functions.synthetic.sixhumpcamel attribute)": [[12, "botorch.test_functions.synthetic.SixHumpCamel.dim"]], "dim (botorch.test_functions.synthetic.styblinskitang attribute)": [[12, "botorch.test_functions.synthetic.StyblinskiTang.dim"]], "dim (botorch.test_functions.synthetic.threehumpcamel attribute)": [[12, "botorch.test_functions.synthetic.ThreeHumpCamel.dim"]], "evaluate_slack() (botorch.test_functions.base.constrainedbasetestproblem method)": [[12, "botorch.test_functions.base.ConstrainedBaseTestProblem.evaluate_slack"]], "evaluate_slack_true() (botorch.test_functions.base.constrainedbasetestproblem method)": [[12, "botorch.test_functions.base.ConstrainedBaseTestProblem.evaluate_slack_true"]], "evaluate_slack_true() (botorch.test_functions.multi_objective.bnh method)": [[12, "botorch.test_functions.multi_objective.BNH.evaluate_slack_true"]], "evaluate_slack_true() (botorch.test_functions.multi_objective.c2dtlz2 method)": [[12, "botorch.test_functions.multi_objective.C2DTLZ2.evaluate_slack_true"]], "evaluate_slack_true() (botorch.test_functions.multi_objective.constr method)": [[12, "botorch.test_functions.multi_objective.CONSTR.evaluate_slack_true"]], "evaluate_slack_true() (botorch.test_functions.multi_objective.constrainedbranincurrin method)": [[12, "botorch.test_functions.multi_objective.ConstrainedBraninCurrin.evaluate_slack_true"]], "evaluate_slack_true() (botorch.test_functions.multi_objective.discbrake method)": [[12, "botorch.test_functions.multi_objective.DiscBrake.evaluate_slack_true"]], "evaluate_slack_true() (botorch.test_functions.multi_objective.mw7 method)": [[12, "botorch.test_functions.multi_objective.MW7.evaluate_slack_true"]], "evaluate_slack_true() (botorch.test_functions.multi_objective.osy method)": [[12, "botorch.test_functions.multi_objective.OSY.evaluate_slack_true"]], "evaluate_slack_true() (botorch.test_functions.multi_objective.srn method)": [[12, "botorch.test_functions.multi_objective.SRN.evaluate_slack_true"]], "evaluate_slack_true() (botorch.test_functions.multi_objective.weldedbeam method)": [[12, "botorch.test_functions.multi_objective.WeldedBeam.evaluate_slack_true"]], "evaluate_true() (botorch.test_functions.base.basetestproblem method)": [[12, "botorch.test_functions.base.BaseTestProblem.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_fidelity.augmentedbranin method)": [[12, "botorch.test_functions.multi_fidelity.AugmentedBranin.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_fidelity.augmentedhartmann method)": [[12, "botorch.test_functions.multi_fidelity.AugmentedHartmann.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_fidelity.augmentedrosenbrock method)": [[12, "botorch.test_functions.multi_fidelity.AugmentedRosenbrock.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.bnh method)": [[12, "botorch.test_functions.multi_objective.BNH.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.branincurrin method)": [[12, "botorch.test_functions.multi_objective.BraninCurrin.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.constr method)": [[12, "botorch.test_functions.multi_objective.CONSTR.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.carsideimpact method)": [[12, "botorch.test_functions.multi_objective.CarSideImpact.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.dh1 method)": [[12, "botorch.test_functions.multi_objective.DH1.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.dh3 method)": [[12, "botorch.test_functions.multi_objective.DH3.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.dtlz1 method)": [[12, "botorch.test_functions.multi_objective.DTLZ1.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.dtlz2 method)": [[12, "botorch.test_functions.multi_objective.DTLZ2.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.dtlz3 method)": [[12, "botorch.test_functions.multi_objective.DTLZ3.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.dtlz5 method)": [[12, "botorch.test_functions.multi_objective.DTLZ5.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.dtlz7 method)": [[12, "botorch.test_functions.multi_objective.DTLZ7.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.discbrake method)": [[12, "botorch.test_functions.multi_objective.DiscBrake.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.gmm method)": [[12, "botorch.test_functions.multi_objective.GMM.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.mw7 method)": [[12, "botorch.test_functions.multi_objective.MW7.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.osy method)": [[12, "botorch.test_functions.multi_objective.OSY.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.penicillin method)": [[12, "botorch.test_functions.multi_objective.Penicillin.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.srn method)": [[12, "botorch.test_functions.multi_objective.SRN.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.toyrobust method)": [[12, "botorch.test_functions.multi_objective.ToyRobust.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.vehiclesafety method)": [[12, "botorch.test_functions.multi_objective.VehicleSafety.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.weldedbeam method)": [[12, "botorch.test_functions.multi_objective.WeldedBeam.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.zdt1 method)": [[12, "botorch.test_functions.multi_objective.ZDT1.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.zdt2 method)": [[12, "botorch.test_functions.multi_objective.ZDT2.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective.zdt3 method)": [[12, "botorch.test_functions.multi_objective.ZDT3.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective_multi_fidelity.momfbranincurrin method)": [[12, "botorch.test_functions.multi_objective_multi_fidelity.MOMFBraninCurrin.evaluate_true"]], "evaluate_true() (botorch.test_functions.multi_objective_multi_fidelity.momfpark method)": [[12, "botorch.test_functions.multi_objective_multi_fidelity.MOMFPark.evaluate_true"]], "evaluate_true() (botorch.test_functions.sensitivity_analysis.gsobol method)": [[12, "botorch.test_functions.sensitivity_analysis.Gsobol.evaluate_true"]], "evaluate_true() (botorch.test_functions.sensitivity_analysis.ishigami method)": [[12, "botorch.test_functions.sensitivity_analysis.Ishigami.evaluate_true"]], "evaluate_true() (botorch.test_functions.sensitivity_analysis.morris method)": [[12, "botorch.test_functions.sensitivity_analysis.Morris.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.ackley method)": [[12, "botorch.test_functions.synthetic.Ackley.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.beale method)": [[12, "botorch.test_functions.synthetic.Beale.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.branin method)": [[12, "botorch.test_functions.synthetic.Branin.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.bukin method)": [[12, "botorch.test_functions.synthetic.Bukin.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.cosine8 method)": [[12, "botorch.test_functions.synthetic.Cosine8.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.dixonprice method)": [[12, "botorch.test_functions.synthetic.DixonPrice.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.dropwave method)": [[12, "botorch.test_functions.synthetic.DropWave.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.eggholder method)": [[12, "botorch.test_functions.synthetic.EggHolder.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.griewank method)": [[12, "botorch.test_functions.synthetic.Griewank.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.hartmann method)": [[12, "botorch.test_functions.synthetic.Hartmann.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.holdertable method)": [[12, "botorch.test_functions.synthetic.HolderTable.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.levy method)": [[12, "botorch.test_functions.synthetic.Levy.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.michalewicz method)": [[12, "botorch.test_functions.synthetic.Michalewicz.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.powell method)": [[12, "botorch.test_functions.synthetic.Powell.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.rastrigin method)": [[12, "botorch.test_functions.synthetic.Rastrigin.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.rosenbrock method)": [[12, "botorch.test_functions.synthetic.Rosenbrock.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.shekel method)": [[12, "botorch.test_functions.synthetic.Shekel.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.sixhumpcamel method)": [[12, "botorch.test_functions.synthetic.SixHumpCamel.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.styblinskitang method)": [[12, "botorch.test_functions.synthetic.StyblinskiTang.evaluate_true"]], "evaluate_true() (botorch.test_functions.synthetic.threehumpcamel method)": [[12, "botorch.test_functions.synthetic.ThreeHumpCamel.evaluate_true"]], "f_1() (botorch.test_functions.multi_objective.toyrobust method)": [[12, "botorch.test_functions.multi_objective.ToyRobust.f_1"]], "f_2() (botorch.test_functions.multi_objective.toyrobust method)": [[12, "botorch.test_functions.multi_objective.ToyRobust.f_2"]], "forward() (botorch.test_functions.base.basetestproblem method)": [[12, "botorch.test_functions.base.BaseTestProblem.forward"]], "gen_pareto_front() (botorch.test_functions.base.multiobjectivetestproblem method)": [[12, "botorch.test_functions.base.MultiObjectiveTestProblem.gen_pareto_front"]], "gen_pareto_front() (botorch.test_functions.multi_objective.dtlz1 method)": [[12, "botorch.test_functions.multi_objective.DTLZ1.gen_pareto_front"]], "gen_pareto_front() (botorch.test_functions.multi_objective.dtlz2 method)": [[12, "botorch.test_functions.multi_objective.DTLZ2.gen_pareto_front"]], "gen_pareto_front() (botorch.test_functions.multi_objective.zdt1 method)": [[12, "botorch.test_functions.multi_objective.ZDT1.gen_pareto_front"]], "gen_pareto_front() (botorch.test_functions.multi_objective.zdt2 method)": [[12, "botorch.test_functions.multi_objective.ZDT2.gen_pareto_front"]], "gen_pareto_front() (botorch.test_functions.multi_objective.zdt3 method)": [[12, "botorch.test_functions.multi_objective.ZDT3.gen_pareto_front"]], "is_feasible() (botorch.test_functions.base.constrainedbasetestproblem method)": [[12, "botorch.test_functions.base.ConstrainedBaseTestProblem.is_feasible"]], "k_d (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.k_d"]], "k_g (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.k_g"]], "lambd (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.lambd"]], "levy (botorch.test_functions.multi_objective.toyrobust attribute)": [[12, "botorch.test_functions.multi_objective.ToyRobust.levy"]], "m_x (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.m_X"]], "max_hv (botorch.test_functions.base.multiobjectivetestproblem property)": [[12, "botorch.test_functions.base.MultiObjectiveTestProblem.max_hv"]], "mu_x (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.mu_X"]], "mu_p (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.mu_p"]], "num_constraints (botorch.test_functions.base.constrainedbasetestproblem attribute)": [[12, "botorch.test_functions.base.ConstrainedBaseTestProblem.num_constraints"]], "num_constraints (botorch.test_functions.multi_objective.bnh attribute)": [[12, "botorch.test_functions.multi_objective.BNH.num_constraints"]], "num_constraints (botorch.test_functions.multi_objective.c2dtlz2 attribute)": [[12, "botorch.test_functions.multi_objective.C2DTLZ2.num_constraints"]], "num_constraints (botorch.test_functions.multi_objective.constr attribute)": [[12, "botorch.test_functions.multi_objective.CONSTR.num_constraints"]], "num_constraints (botorch.test_functions.multi_objective.constrainedbranincurrin attribute)": [[12, "botorch.test_functions.multi_objective.ConstrainedBraninCurrin.num_constraints"]], "num_constraints (botorch.test_functions.multi_objective.discbrake attribute)": [[12, "botorch.test_functions.multi_objective.DiscBrake.num_constraints"]], "num_constraints (botorch.test_functions.multi_objective.mw7 attribute)": [[12, "botorch.test_functions.multi_objective.MW7.num_constraints"]], "num_constraints (botorch.test_functions.multi_objective.osy attribute)": [[12, "botorch.test_functions.multi_objective.OSY.num_constraints"]], "num_constraints (botorch.test_functions.multi_objective.srn attribute)": [[12, "botorch.test_functions.multi_objective.SRN.num_constraints"]], "num_constraints (botorch.test_functions.multi_objective.weldedbeam attribute)": [[12, "botorch.test_functions.multi_objective.WeldedBeam.num_constraints"]], "num_objectives (botorch.test_functions.base.multiobjectivetestproblem attribute)": [[12, "botorch.test_functions.base.MultiObjectiveTestProblem.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.bnh attribute)": [[12, "botorch.test_functions.multi_objective.BNH.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.branincurrin attribute)": [[12, "botorch.test_functions.multi_objective.BraninCurrin.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.c2dtlz2 attribute)": [[12, "botorch.test_functions.multi_objective.C2DTLZ2.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.constr attribute)": [[12, "botorch.test_functions.multi_objective.CONSTR.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.carsideimpact attribute)": [[12, "botorch.test_functions.multi_objective.CarSideImpact.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.constrainedbranincurrin attribute)": [[12, "botorch.test_functions.multi_objective.ConstrainedBraninCurrin.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.dh attribute)": [[12, "botorch.test_functions.multi_objective.DH.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.dtlz attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.dtlz1 attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ1.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.dtlz2 attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ2.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.dtlz3 attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ3.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.dtlz4 attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ4.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.dtlz5 attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ5.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.dtlz7 attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ7.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.discbrake attribute)": [[12, "botorch.test_functions.multi_objective.DiscBrake.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.gmm attribute)": [[12, "botorch.test_functions.multi_objective.GMM.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.mw7 attribute)": [[12, "botorch.test_functions.multi_objective.MW7.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.osy attribute)": [[12, "botorch.test_functions.multi_objective.OSY.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.srn attribute)": [[12, "botorch.test_functions.multi_objective.SRN.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.toyrobust attribute)": [[12, "botorch.test_functions.multi_objective.ToyRobust.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.vehiclesafety attribute)": [[12, "botorch.test_functions.multi_objective.VehicleSafety.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.weldedbeam attribute)": [[12, "botorch.test_functions.multi_objective.WeldedBeam.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.zdt attribute)": [[12, "botorch.test_functions.multi_objective.ZDT.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.zdt1 attribute)": [[12, "botorch.test_functions.multi_objective.ZDT1.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.zdt2 attribute)": [[12, "botorch.test_functions.multi_objective.ZDT2.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective.zdt3 attribute)": [[12, "botorch.test_functions.multi_objective.ZDT3.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective_multi_fidelity.momfbranincurrin attribute)": [[12, "botorch.test_functions.multi_objective_multi_fidelity.MOMFBraninCurrin.num_objectives"]], "num_objectives (botorch.test_functions.multi_objective_multi_fidelity.momfpark attribute)": [[12, "botorch.test_functions.multi_objective_multi_fidelity.MOMFPark.num_objectives"]], "num_objectives (botorch.test_functions.synthetic.synthetictestfunction attribute)": [[12, "botorch.test_functions.synthetic.SyntheticTestFunction.num_objectives"]], "optimal_sobol_indicies() (botorch.test_functions.sensitivity_analysis.gsobol method)": [[12, "botorch.test_functions.sensitivity_analysis.Gsobol.optimal_sobol_indicies"]], "optimal_value (botorch.test_functions.synthetic.hartmann property)": [[12, "botorch.test_functions.synthetic.Hartmann.optimal_value"]], "optimal_value (botorch.test_functions.synthetic.synthetictestfunction property)": [[12, "botorch.test_functions.synthetic.SyntheticTestFunction.optimal_value"]], "optimizers (botorch.test_functions.synthetic.hartmann property)": [[12, "botorch.test_functions.synthetic.Hartmann.optimizers"]], "optimizers (botorch.test_functions.synthetic.michalewicz property)": [[12, "botorch.test_functions.synthetic.Michalewicz.optimizers"]], "penicillin_vectorized() (botorch.test_functions.multi_objective.penicillin class method)": [[12, "botorch.test_functions.multi_objective.Penicillin.penicillin_vectorized"]], "training (botorch.test_functions.multi_fidelity.augmentedbranin attribute)": [[12, "botorch.test_functions.multi_fidelity.AugmentedBranin.training"]], "training (botorch.test_functions.multi_fidelity.augmentedhartmann attribute)": [[12, "botorch.test_functions.multi_fidelity.AugmentedHartmann.training"]], "training (botorch.test_functions.multi_fidelity.augmentedrosenbrock attribute)": [[12, "botorch.test_functions.multi_fidelity.AugmentedRosenbrock.training"]], "training (botorch.test_functions.multi_objective.bnh attribute)": [[12, "botorch.test_functions.multi_objective.BNH.training"]], "training (botorch.test_functions.multi_objective.branincurrin attribute)": [[12, "botorch.test_functions.multi_objective.BraninCurrin.training"]], "training (botorch.test_functions.multi_objective.c2dtlz2 attribute)": [[12, "botorch.test_functions.multi_objective.C2DTLZ2.training"]], "training (botorch.test_functions.multi_objective.constr attribute)": [[12, "botorch.test_functions.multi_objective.CONSTR.training"]], "training (botorch.test_functions.multi_objective.constrainedbranincurrin attribute)": [[12, "botorch.test_functions.multi_objective.ConstrainedBraninCurrin.training"]], "training (botorch.test_functions.multi_objective.dh1 attribute)": [[12, "botorch.test_functions.multi_objective.DH1.training"]], "training (botorch.test_functions.multi_objective.dh2 attribute)": [[12, "botorch.test_functions.multi_objective.DH2.training"]], "training (botorch.test_functions.multi_objective.dh3 attribute)": [[12, "botorch.test_functions.multi_objective.DH3.training"]], "training (botorch.test_functions.multi_objective.dh4 attribute)": [[12, "botorch.test_functions.multi_objective.DH4.training"]], "training (botorch.test_functions.multi_objective.dtlz attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ.training"]], "training (botorch.test_functions.multi_objective.dtlz1 attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ1.training"]], "training (botorch.test_functions.multi_objective.dtlz2 attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ2.training"]], "training (botorch.test_functions.multi_objective.dtlz3 attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ3.training"]], "training (botorch.test_functions.multi_objective.dtlz4 attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ4.training"]], "training (botorch.test_functions.multi_objective.dtlz5 attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ5.training"]], "training (botorch.test_functions.multi_objective.dtlz7 attribute)": [[12, "botorch.test_functions.multi_objective.DTLZ7.training"]], "training (botorch.test_functions.multi_objective.discbrake attribute)": [[12, "botorch.test_functions.multi_objective.DiscBrake.training"]], "training (botorch.test_functions.multi_objective.gmm attribute)": [[12, "botorch.test_functions.multi_objective.GMM.training"]], "training (botorch.test_functions.multi_objective.mw7 attribute)": [[12, "botorch.test_functions.multi_objective.MW7.training"]], "training (botorch.test_functions.multi_objective.osy attribute)": [[12, "botorch.test_functions.multi_objective.OSY.training"]], "training (botorch.test_functions.multi_objective.penicillin attribute)": [[12, "botorch.test_functions.multi_objective.Penicillin.training"]], "training (botorch.test_functions.multi_objective.srn attribute)": [[12, "botorch.test_functions.multi_objective.SRN.training"]], "training (botorch.test_functions.multi_objective.toyrobust attribute)": [[12, "botorch.test_functions.multi_objective.ToyRobust.training"]], "training (botorch.test_functions.multi_objective.vehiclesafety attribute)": [[12, "botorch.test_functions.multi_objective.VehicleSafety.training"]], "training (botorch.test_functions.multi_objective.weldedbeam attribute)": [[12, "botorch.test_functions.multi_objective.WeldedBeam.training"]], "training (botorch.test_functions.multi_objective.zdt attribute)": [[12, "botorch.test_functions.multi_objective.ZDT.training"]], "training (botorch.test_functions.multi_objective.zdt1 attribute)": [[12, "botorch.test_functions.multi_objective.ZDT1.training"]], "training (botorch.test_functions.multi_objective.zdt2 attribute)": [[12, "botorch.test_functions.multi_objective.ZDT2.training"]], "training (botorch.test_functions.multi_objective.zdt3 attribute)": [[12, "botorch.test_functions.multi_objective.ZDT3.training"]], "training (botorch.test_functions.multi_objective_multi_fidelity.momfbranincurrin attribute)": [[12, "botorch.test_functions.multi_objective_multi_fidelity.MOMFBraninCurrin.training"]], "training (botorch.test_functions.multi_objective_multi_fidelity.momfpark attribute)": [[12, "botorch.test_functions.multi_objective_multi_fidelity.MOMFPark.training"]], "training (botorch.test_functions.sensitivity_analysis.gsobol attribute)": [[12, "botorch.test_functions.sensitivity_analysis.Gsobol.training"]], "training (botorch.test_functions.sensitivity_analysis.ishigami attribute)": [[12, "botorch.test_functions.sensitivity_analysis.Ishigami.training"]], "training (botorch.test_functions.sensitivity_analysis.morris attribute)": [[12, "botorch.test_functions.sensitivity_analysis.Morris.training"]], "training (botorch.test_functions.synthetic.beale attribute)": [[12, "botorch.test_functions.synthetic.Beale.training"]], "training (botorch.test_functions.synthetic.branin attribute)": [[12, "botorch.test_functions.synthetic.Branin.training"]], "training (botorch.test_functions.synthetic.cosine8 attribute)": [[12, "botorch.test_functions.synthetic.Cosine8.training"]], "training (botorch.test_functions.synthetic.dixonprice attribute)": [[12, "botorch.test_functions.synthetic.DixonPrice.training"]], "training (botorch.test_functions.synthetic.dropwave attribute)": [[12, "botorch.test_functions.synthetic.DropWave.training"]], "training (botorch.test_functions.synthetic.griewank attribute)": [[12, "botorch.test_functions.synthetic.Griewank.training"]], "training (botorch.test_functions.synthetic.hartmann attribute)": [[12, "botorch.test_functions.synthetic.Hartmann.training"]], "training (botorch.test_functions.synthetic.holdertable attribute)": [[12, "botorch.test_functions.synthetic.HolderTable.training"]], "training (botorch.test_functions.synthetic.levy attribute)": [[12, "botorch.test_functions.synthetic.Levy.training"]], "training (botorch.test_functions.synthetic.michalewicz attribute)": [[12, "botorch.test_functions.synthetic.Michalewicz.training"]], "training (botorch.test_functions.synthetic.powell attribute)": [[12, "botorch.test_functions.synthetic.Powell.training"]], "training (botorch.test_functions.synthetic.rastrigin attribute)": [[12, "botorch.test_functions.synthetic.Rastrigin.training"]], "training (botorch.test_functions.synthetic.rosenbrock attribute)": [[12, "botorch.test_functions.synthetic.Rosenbrock.training"]], "training (botorch.test_functions.synthetic.shekel attribute)": [[12, "botorch.test_functions.synthetic.Shekel.training"]], "training (botorch.test_functions.synthetic.sixhumpcamel attribute)": [[12, "botorch.test_functions.synthetic.SixHumpCamel.training"]], "training (botorch.test_functions.synthetic.styblinskitang attribute)": [[12, "botorch.test_functions.synthetic.StyblinskiTang.training"]], "training (botorch.test_functions.synthetic.threehumpcamel attribute)": [[12, "botorch.test_functions.synthetic.ThreeHumpCamel.training"]], "basetestproblembasetestcase (class in botorch.utils.testing)": [[13, "botorch.utils.testing.BaseTestProblemBaseTestCase"]], "botorchdataset (class in botorch.utils.datasets)": [[13, "botorch.utils.datasets.BotorchDataset"]], "botorchtestcase (class in botorch.utils.testing)": [[13, "botorch.utils.testing.BotorchTestCase"]], "boxdecompositionlist (class in botorch.utils.multi_objective.box_decompositions.box_decomposition_list)": [[13, "botorch.utils.multi_objective.box_decompositions.box_decomposition_list.BoxDecompositionList"]], "bufferdict (class in botorch.utils.torch)": [[13, "botorch.utils.torch.BufferDict"]], "constrainedmultiobjectivetestproblembasetestcase (class in botorch.utils.testing)": [[13, "botorch.utils.testing.ConstrainedMultiObjectiveTestProblemBaseTestCase"]], "default (class in botorch.utils.types)": [[13, "botorch.utils.types.DEFAULT"]], "delaunaypolytopesampler (class in botorch.utils.sampling)": [[13, "botorch.utils.sampling.DelaunayPolytopeSampler"]], "densecontainer (class in botorch.utils.containers)": [[13, "botorch.utils.containers.DenseContainer"]], "dispatcher (class in botorch.utils.dispatcher)": [[13, "botorch.utils.dispatcher.Dispatcher"]], "dominatedpartitioning (class in botorch.utils.multi_objective.box_decompositions.dominated)": [[13, "botorch.utils.multi_objective.box_decompositions.dominated.DominatedPartitioning"]], "fastnondominatedpartitioning (class in botorch.utils.multi_objective.box_decompositions.non_dominated)": [[13, "botorch.utils.multi_objective.box_decompositions.non_dominated.FastNondominatedPartitioning"]], "fixednoisedataset (class in botorch.utils.datasets)": [[13, "botorch.utils.datasets.FixedNoiseDataset"]], "gpdraw (class in botorch.utils.gp_sampling)": [[13, "botorch.utils.gp_sampling.GPDraw"]], "hitandrunpolytopesampler (class in botorch.utils.sampling)": [[13, "botorch.utils.sampling.HitAndRunPolytopeSampler"]], "hypervolume (class in botorch.utils.multi_objective.hypervolume)": [[13, "botorch.utils.multi_objective.hypervolume.Hypervolume"]], "identitystefunction (class in botorch.utils.rounding)": [[13, "botorch.utils.rounding.IdentitySTEFunction"]], "linearellipticalslicesampler (class in botorch.utils.probability.lin_ess)": [[13, "botorch.utils.probability.lin_ess.LinearEllipticalSliceSampler"]], "mvnxpb (class in botorch.utils.probability.mvnxpb)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB"]], "mockacquisitionfunction (class in botorch.utils.testing)": [[13, "botorch.utils.testing.MockAcquisitionFunction"]], "mockmodel (class in botorch.utils.testing)": [[13, "botorch.utils.testing.MockModel"]], "mockposterior (class in botorch.utils.testing)": [[13, "botorch.utils.testing.MockPosterior"]], "multilist (class in botorch.utils.multi_objective.hypervolume)": [[13, "botorch.utils.multi_objective.hypervolume.MultiList"]], "multiobjectivetestproblembasetestcase (class in botorch.utils.testing)": [[13, "botorch.utils.testing.MultiObjectiveTestProblemBaseTestCase"]], "node (class in botorch.utils.multi_objective.hypervolume)": [[13, "botorch.utils.multi_objective.hypervolume.Node"]], "nondominatedpartitioning (class in botorch.utils.multi_objective.box_decompositions.non_dominated)": [[13, "botorch.utils.multi_objective.box_decompositions.non_dominated.NondominatedPartitioning"]], "onehotargmaxste (class in botorch.utils.rounding)": [[13, "botorch.utils.rounding.OneHotArgmaxSTE"]], "pivotedcholesky (class in botorch.utils.probability.linalg)": [[13, "botorch.utils.probability.linalg.PivotedCholesky"]], "randomfourierfeatures (class in botorch.utils.gp_sampling)": [[13, "botorch.utils.gp_sampling.RandomFourierFeatures"]], "rankingdataset (class in botorch.utils.datasets)": [[13, "botorch.utils.datasets.RankingDataset"]], "roundste (class in botorch.utils.rounding)": [[13, "botorch.utils.rounding.RoundSTE"]], "slicecontainer (class in botorch.utils.containers)": [[13, "botorch.utils.containers.SliceContainer"]], "superviseddataset (class in botorch.utils.datasets)": [[13, "botorch.utils.datasets.SupervisedDataset"]], "superviseddatasetmeta (class in botorch.utils.datasets)": [[13, "botorch.utils.datasets.SupervisedDatasetMeta"]], "synthetictestfunctionbasetestcase (class in botorch.utils.testing)": [[13, "botorch.utils.testing.SyntheticTestFunctionBaseTestCase"]], "tensorcheckpoint (class in botorch.utils.context_managers)": [[13, "botorch.utils.context_managers.TensorCheckpoint"]], "truncatedmultivariatenormal (class in botorch.utils.probability.truncated_multivariate_normal)": [[13, "botorch.utils.probability.truncated_multivariate_normal.TruncatedMultivariateNormal"]], "unifiedskewnormal (class in botorch.utils.probability.unified_skew_normal)": [[13, "botorch.utils.probability.unified_skew_normal.UnifiedSkewNormal"]], "x (botorch.utils.datasets.fixednoisedataset attribute)": [[13, "botorch.utils.datasets.FixedNoiseDataset.X"]], "x (botorch.utils.datasets.rankingdataset attribute)": [[13, "botorch.utils.datasets.RankingDataset.X"]], "x (botorch.utils.datasets.superviseddataset attribute)": [[13, "botorch.utils.datasets.SupervisedDataset.X"]], "xs (botorch.utils.gp_sampling.gpdraw property)": [[13, "botorch.utils.gp_sampling.GPDraw.Xs"]], "y (botorch.utils.datasets.fixednoisedataset attribute)": [[13, "botorch.utils.datasets.FixedNoiseDataset.Y"]], "y (botorch.utils.datasets.rankingdataset attribute)": [[13, "botorch.utils.datasets.RankingDataset.Y"]], "y (botorch.utils.datasets.superviseddataset attribute)": [[13, "botorch.utils.datasets.SupervisedDataset.Y"]], "ys (botorch.utils.gp_sampling.gpdraw property)": [[13, "botorch.utils.gp_sampling.GPDraw.Ys"]], "yvar (botorch.utils.datasets.fixednoisedataset attribute)": [[13, "botorch.utils.datasets.FixedNoiseDataset.Yvar"]], "add() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.add"]], "append() (botorch.utils.multi_objective.hypervolume.multilist method)": [[13, "botorch.utils.multi_objective.hypervolume.MultiList.append"]], "apply_constraints() (in module botorch.utils.objective)": [[13, "botorch.utils.objective.apply_constraints"]], "apply_constraints_nonnegative_soft() (in module botorch.utils.objective)": [[13, "botorch.utils.objective.apply_constraints_nonnegative_soft"]], "approximate_round() (in module botorch.utils.rounding)": [[13, "botorch.utils.rounding.approximate_round"]], "arg_constraints (botorch.utils.probability.unified_skew_normal.unifiedskewnormal attribute)": [[13, "botorch.utils.probability.unified_skew_normal.UnifiedSkewNormal.arg_constraints"]], "asdict() (botorch.utils.probability.mvnxpb.mvnxpb method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.asdict"]], "assertallclose() (botorch.utils.testing.botorchtestcase method)": [[13, "botorch.utils.testing.BotorchTestCase.assertAllClose"]], "augment() (botorch.utils.probability.mvnxpb.mvnxpb method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.augment"]], "augment_cholesky() (in module botorch.utils.probability.linalg)": [[13, "botorch.utils.probability.linalg.augment_cholesky"]], "backward() (botorch.utils.rounding.identitystefunction static method)": [[13, "botorch.utils.rounding.IdentitySTEFunction.backward"]], "base_sample_shape (botorch.utils.testing.mockposterior property)": [[13, "botorch.utils.testing.MockPosterior.base_sample_shape"]], "batch_range (botorch.utils.testing.mockposterior property)": [[13, "botorch.utils.testing.MockPosterior.batch_range"]], "batch_shape (botorch.utils.testing.mockmodel property)": [[13, "botorch.utils.testing.MockModel.batch_shape"]], "batch_shape (botorch.utils.testing.mockposterior property)": [[13, "botorch.utils.testing.MockPosterior.batch_shape"]], "batched_multinomial() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.batched_multinomial"]], "block_matrix_concat() (in module botorch.utils.probability.linalg)": [[13, "botorch.utils.probability.linalg.block_matrix_concat"]], "botorch.utils": [[13, "module-botorch.utils"]], "botorch.utils.constants": [[13, "module-botorch.utils.constants"]], "botorch.utils.constraints": [[13, "module-botorch.utils.constraints"]], "botorch.utils.containers": [[13, "module-botorch.utils.containers"]], "botorch.utils.context_managers": [[13, "module-botorch.utils.context_managers"]], "botorch.utils.datasets": [[13, "module-botorch.utils.datasets"]], "botorch.utils.dispatcher": [[13, "module-botorch.utils.dispatcher"]], "botorch.utils.feasible_volume": [[13, "module-botorch.utils.feasible_volume"]], "botorch.utils.gp_sampling": [[13, "module-botorch.utils.gp_sampling"]], "botorch.utils.low_rank": [[13, "module-botorch.utils.low_rank"]], "botorch.utils.multi_objective.box_decompositions.box_decomposition": [[13, "module-botorch.utils.multi_objective.box_decompositions.box_decomposition"]], "botorch.utils.multi_objective.box_decompositions.box_decomposition_list": [[13, "module-botorch.utils.multi_objective.box_decompositions.box_decomposition_list"]], "botorch.utils.multi_objective.box_decompositions.dominated": [[13, "module-botorch.utils.multi_objective.box_decompositions.dominated"]], "botorch.utils.multi_objective.box_decompositions.non_dominated": [[13, "module-botorch.utils.multi_objective.box_decompositions.non_dominated"]], "botorch.utils.multi_objective.box_decompositions.utils": [[13, "module-botorch.utils.multi_objective.box_decompositions.utils"]], "botorch.utils.multi_objective.hypervolume": [[13, "module-botorch.utils.multi_objective.hypervolume"]], "botorch.utils.multi_objective.pareto": [[13, "module-botorch.utils.multi_objective.pareto"]], "botorch.utils.multi_objective.scalarization": [[13, "module-botorch.utils.multi_objective.scalarization"]], "botorch.utils.objective": [[13, "module-botorch.utils.objective"]], "botorch.utils.probability.bvn": [[13, "module-botorch.utils.probability.bvn"]], "botorch.utils.probability.lin_ess": [[13, "module-botorch.utils.probability.lin_ess"]], "botorch.utils.probability.linalg": [[13, "module-botorch.utils.probability.linalg"]], "botorch.utils.probability.mvnxpb": [[13, "module-botorch.utils.probability.mvnxpb"]], "botorch.utils.probability.truncated_multivariate_normal": [[13, "module-botorch.utils.probability.truncated_multivariate_normal"]], "botorch.utils.probability.unified_skew_normal": [[13, "module-botorch.utils.probability.unified_skew_normal"]], "botorch.utils.probability.utils": [[13, "module-botorch.utils.probability.utils"]], "botorch.utils.rounding": [[13, "module-botorch.utils.rounding"]], "botorch.utils.safe_math": [[13, "module-botorch.utils.safe_math"]], "botorch.utils.sampling": [[13, "module-botorch.utils.sampling"]], "botorch.utils.testing": [[13, "module-botorch.utils.testing"]], "botorch.utils.torch": [[13, "module-botorch.utils.torch"]], "botorch.utils.transforms": [[13, "module-botorch.utils.transforms"]], "botorch.utils.types": [[13, "module-botorch.utils.types"]], "bounds (botorch.utils.probability.mvnxpb.mvnxpbstate attribute)": [[13, "botorch.utils.probability.mvnxpb.mvnxpbState.bounds"]], "build() (botorch.utils.probability.mvnxpb.mvnxpb class method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.build"]], "build_positional_indices() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.build_positional_indices"]], "bvn() (in module botorch.utils.probability.bvn)": [[13, "botorch.utils.probability.bvn.bvn"]], "bvnmom() (in module botorch.utils.probability.bvn)": [[13, "botorch.utils.probability.bvn.bvnmom"]], "bvnu() (in module botorch.utils.probability.bvn)": [[13, "botorch.utils.probability.bvn.bvnu"]], "case_dispatcher() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.case_dispatcher"]], "clear() (botorch.utils.torch.bufferdict method)": [[13, "botorch.utils.torch.BufferDict.clear"]], "clone() (botorch.utils.probability.linalg.pivotedcholesky method)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.clone"]], "clone() (botorch.utils.probability.mvnxpb.mvnxpb method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.clone"]], "compute() (botorch.utils.multi_objective.hypervolume.hypervolume method)": [[13, "botorch.utils.multi_objective.hypervolume.Hypervolume.compute"]], "compute_dominated_hypercell_bounds_2d() (in module botorch.utils.multi_objective.box_decompositions.utils)": [[13, "botorch.utils.multi_objective.box_decompositions.utils.compute_dominated_hypercell_bounds_2d"]], "compute_hypervolume() (botorch.utils.multi_objective.box_decompositions.box_decomposition_list.boxdecompositionlist method)": [[13, "botorch.utils.multi_objective.box_decompositions.box_decomposition_list.BoxDecompositionList.compute_hypervolume"]], "compute_local_upper_bounds() (in module botorch.utils.multi_objective.box_decompositions.utils)": [[13, "botorch.utils.multi_objective.box_decompositions.utils.compute_local_upper_bounds"]], "compute_non_dominated_hypercell_bounds_2d() (in module botorch.utils.multi_objective.box_decompositions.utils)": [[13, "botorch.utils.multi_objective.box_decompositions.utils.compute_non_dominated_hypercell_bounds_2d"]], "concat() (botorch.utils.probability.linalg.pivotedcholesky method)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.concat"]], "concat() (botorch.utils.probability.mvnxpb.mvnxpb method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.concat"]], "concatenate_pending_points() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.concatenate_pending_points"]], "convert_to_target_pre_hook() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.convert_to_target_pre_hook"]], "covariance_matrix (botorch.utils.probability.unified_skew_normal.unifiedskewnormal property)": [[13, "botorch.utils.probability.unified_skew_normal.UnifiedSkewNormal.covariance_matrix"]], "delattr_ctx() (in module botorch.utils.context_managers)": [[13, "botorch.utils.context_managers.delattr_ctx"]], "detach() (botorch.utils.probability.linalg.pivotedcholesky method)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.detach"]], "detach() (botorch.utils.probability.mvnxpb.mvnxpb method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.detach"]], "device (botorch.utils.containers.densecontainer property)": [[13, "botorch.utils.containers.DenseContainer.device"]], "device (botorch.utils.containers.slicecontainer property)": [[13, "botorch.utils.containers.SliceContainer.device"]], "device (botorch.utils.context_managers.tensorcheckpoint attribute)": [[13, "botorch.utils.context_managers.TensorCheckpoint.device"]], "device (botorch.utils.testing.botorchtestcase attribute)": [[13, "botorch.utils.testing.BotorchTestCase.device"]], "device (botorch.utils.testing.mockposterior property)": [[13, "botorch.utils.testing.MockPosterior.device"]], "diag (botorch.utils.probability.linalg.pivotedcholesky attribute)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.diag"]], "dict_from_iter() (botorch.utils.datasets.fixednoisedataset class method)": [[13, "botorch.utils.datasets.FixedNoiseDataset.dict_from_iter"]], "dict_from_iter() (botorch.utils.datasets.superviseddataset class method)": [[13, "botorch.utils.datasets.SupervisedDataset.dict_from_iter"]], "dispatch() (botorch.utils.dispatcher.dispatcher method)": [[13, "botorch.utils.dispatcher.Dispatcher.dispatch"]], "div() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.div"]], "doc (botorch.utils.dispatcher.dispatcher attribute)": [[13, "botorch.utils.dispatcher.Dispatcher.doc"]], "draw() (botorch.utils.probability.lin_ess.linearellipticalslicesampler method)": [[13, "botorch.utils.probability.lin_ess.LinearEllipticalSliceSampler.draw"]], "draw() (botorch.utils.sampling.delaunaypolytopesampler method)": [[13, "botorch.utils.sampling.DelaunayPolytopeSampler.draw"]], "draw() (botorch.utils.sampling.hitandrunpolytopesampler method)": [[13, "botorch.utils.sampling.HitAndRunPolytopeSampler.draw"]], "draw_sobol_normal_samples() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.draw_sobol_normal_samples"]], "draw_sobol_samples() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.draw_sobol_samples"]], "dtype (botorch.utils.containers.densecontainer property)": [[13, "botorch.utils.containers.DenseContainer.dtype"]], "dtype (botorch.utils.containers.slicecontainer property)": [[13, "botorch.utils.containers.SliceContainer.dtype"]], "dtype (botorch.utils.context_managers.tensorcheckpoint attribute)": [[13, "botorch.utils.context_managers.TensorCheckpoint.dtype"]], "dtype (botorch.utils.testing.mockposterior property)": [[13, "botorch.utils.testing.MockPosterior.dtype"]], "encode_args() (botorch.utils.dispatcher.dispatcher method)": [[13, "botorch.utils.dispatcher.Dispatcher.encode_args"]], "encoder (botorch.utils.dispatcher.dispatcher property)": [[13, "botorch.utils.dispatcher.Dispatcher.encoder"]], "estimate_feasible_volume() (in module botorch.utils.feasible_volume)": [[13, "botorch.utils.feasible_volume.estimate_feasible_volume"]], "event_shape (botorch.utils.containers.densecontainer attribute)": [[13, "botorch.utils.containers.DenseContainer.event_shape"]], "event_shape (botorch.utils.containers.slicecontainer attribute)": [[13, "botorch.utils.containers.SliceContainer.event_shape"]], "exp() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.exp"]], "expand() (botorch.utils.probability.linalg.pivotedcholesky method)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.expand"]], "expand() (botorch.utils.probability.mvnxpb.mvnxpb method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.expand"]], "expand() (botorch.utils.probability.truncated_multivariate_normal.truncatedmultivariatenormal method)": [[13, "botorch.utils.probability.truncated_multivariate_normal.TruncatedMultivariateNormal.expand"]], "expand() (botorch.utils.probability.unified_skew_normal.unifiedskewnormal method)": [[13, "botorch.utils.probability.unified_skew_normal.UnifiedSkewNormal.expand"]], "extend() (botorch.utils.multi_objective.hypervolume.multilist method)": [[13, "botorch.utils.multi_objective.hypervolume.MultiList.extend"]], "extra_repr() (botorch.utils.torch.bufferdict method)": [[13, "botorch.utils.torch.BufferDict.extra_repr"]], "extract_batch_covar() (in module botorch.utils.low_rank)": [[13, "botorch.utils.low_rank.extract_batch_covar"]], "find_interior_point() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.find_interior_point"]], "forward() (botorch.utils.gp_sampling.gpdraw method)": [[13, "botorch.utils.gp_sampling.GPDraw.forward"]], "forward() (botorch.utils.gp_sampling.randomfourierfeatures method)": [[13, "botorch.utils.gp_sampling.RandomFourierFeatures.forward"]], "forward() (botorch.utils.rounding.onehotargmaxste static method)": [[13, "botorch.utils.rounding.OneHotArgmaxSTE.forward"]], "forward() (botorch.utils.rounding.roundste static method)": [[13, "botorch.utils.rounding.RoundSTE.forward"]], "funcs (botorch.utils.dispatcher.dispatcher attribute)": [[13, "botorch.utils.dispatcher.Dispatcher.funcs"]], "functions (botorch.utils.testing.basetestproblembasetestcase attribute)": [[13, "botorch.utils.testing.BaseTestProblemBaseTestCase.functions"]], "functions (botorch.utils.testing.constrainedmultiobjectivetestproblembasetestcase attribute)": [[13, "botorch.utils.testing.ConstrainedMultiObjectiveTestProblemBaseTestCase.functions"]], "functions (botorch.utils.testing.multiobjectivetestproblembasetestcase attribute)": [[13, "botorch.utils.testing.MultiObjectiveTestProblemBaseTestCase.functions"]], "functions (botorch.utils.testing.synthetictestfunctionbasetestcase attribute)": [[13, "botorch.utils.testing.SyntheticTestFunctionBaseTestCase.functions"]], "gen_positional_indices() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.gen_positional_indices"]], "get_chebyshev_scalarization() (in module botorch.utils.multi_objective.scalarization)": [[13, "botorch.utils.multi_objective.scalarization.get_chebyshev_scalarization"]], "get_constants() (in module botorch.utils.constants)": [[13, "botorch.utils.constants.get_constants"]], "get_constants() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.get_constants"]], "get_constants_like() (in module botorch.utils.constants)": [[13, "botorch.utils.constants.get_constants_like"]], "get_constants_like() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.get_constants_like"]], "get_deterministic_model() (in module botorch.utils.gp_sampling)": [[13, "botorch.utils.gp_sampling.get_deterministic_model"]], "get_deterministic_model_list() (in module botorch.utils.gp_sampling)": [[13, "botorch.utils.gp_sampling.get_deterministic_model_list"]], "get_deterministic_model_multi_samples() (in module botorch.utils.gp_sampling)": [[13, "botorch.utils.gp_sampling.get_deterministic_model_multi_samples"]], "get_eval_gp_sample_callable() (in module botorch.utils.gp_sampling)": [[13, "botorch.utils.gp_sampling.get_eval_gp_sample_callable"]], "get_feasible_samples() (in module botorch.utils.feasible_volume)": [[13, "botorch.utils.feasible_volume.get_feasible_samples"]], "get_gp_samples() (in module botorch.utils.gp_sampling)": [[13, "botorch.utils.gp_sampling.get_gp_samples"]], "get_hypercell_bounds() (botorch.utils.multi_objective.box_decompositions.box_decomposition_list.boxdecompositionlist method)": [[13, "botorch.utils.multi_objective.box_decompositions.box_decomposition_list.BoxDecompositionList.get_hypercell_bounds"]], "get_hypercell_bounds() (botorch.utils.multi_objective.box_decompositions.non_dominated.nondominatedpartitioning method)": [[13, "botorch.utils.multi_objective.box_decompositions.non_dominated.NondominatedPartitioning.get_hypercell_bounds"]], "get_objective_weights_transform() (in module botorch.utils.objective)": [[13, "botorch.utils.objective.get_objective_weights_transform"]], "get_outcome_constraint_transforms() (in module botorch.utils.constraints)": [[13, "botorch.utils.constraints.get_outcome_constraint_transforms"]], "get_outcome_feasibility_probability() (in module botorch.utils.feasible_volume)": [[13, "botorch.utils.feasible_volume.get_outcome_feasibility_probability"]], "get_partition_bounds() (in module botorch.utils.multi_objective.box_decompositions.utils)": [[13, "botorch.utils.multi_objective.box_decompositions.utils.get_partition_bounds"]], "get_polytope_samples() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.get_polytope_samples"]], "get_weights_posterior() (in module botorch.utils.gp_sampling)": [[13, "botorch.utils.gp_sampling.get_weights_posterior"]], "help() (botorch.utils.dispatcher.dispatcher method)": [[13, "botorch.utils.dispatcher.Dispatcher.help"]], "indices (botorch.utils.containers.slicecontainer attribute)": [[13, "botorch.utils.containers.SliceContainer.indices"]], "infer_reference_point() (in module botorch.utils.multi_objective.hypervolume)": [[13, "botorch.utils.multi_objective.hypervolume.infer_reference_point"]], "is_fully_bayesian() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.is_fully_bayesian"]], "is_non_dominated() (in module botorch.utils.multi_objective.pareto)": [[13, "botorch.utils.multi_objective.pareto.is_non_dominated"]], "items() (botorch.utils.torch.bufferdict method)": [[13, "botorch.utils.torch.BufferDict.items"]], "keys() (botorch.utils.torch.bufferdict method)": [[13, "botorch.utils.torch.BufferDict.keys"]], "leggauss() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.leggauss"]], "load_state_dict() (botorch.utils.testing.mockmodel method)": [[13, "botorch.utils.testing.MockModel.load_state_dict"]], "log() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.log"]], "log1mexp() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.log1mexp"]], "log_erfc() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.log_erfc"]], "log_ndtr() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.log_ndtr"]], "log_partition (botorch.utils.probability.truncated_multivariate_normal.truncatedmultivariatenormal property)": [[13, "botorch.utils.probability.truncated_multivariate_normal.TruncatedMultivariateNormal.log_partition"]], "log_phi() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.log_phi"]], "log_prob (botorch.utils.probability.mvnxpb.mvnxpbstate attribute)": [[13, "botorch.utils.probability.mvnxpb.mvnxpbState.log_prob"]], "log_prob() (botorch.utils.probability.truncated_multivariate_normal.truncatedmultivariatenormal method)": [[13, "botorch.utils.probability.truncated_multivariate_normal.TruncatedMultivariateNormal.log_prob"]], "log_prob() (botorch.utils.probability.unified_skew_normal.unifiedskewnormal method)": [[13, "botorch.utils.probability.unified_skew_normal.UnifiedSkewNormal.log_prob"]], "log_prob_extra (botorch.utils.probability.mvnxpb.mvnxpbstate attribute)": [[13, "botorch.utils.probability.mvnxpb.mvnxpbState.log_prob_extra"]], "log_prob_normal_in() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.log_prob_normal_in"]], "logdiffexp() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.logdiffexp"]], "logmeanexp() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.logmeanexp"]], "manual_seed() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.manual_seed"]], "match_batch_shape() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.match_batch_shape"]], "mean (botorch.utils.testing.mockposterior property)": [[13, "botorch.utils.testing.MockPosterior.mean"]], "module_rollback_ctx() (in module botorch.utils.context_managers)": [[13, "botorch.utils.context_managers.module_rollback_ctx"]], "mul() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.mul"]], "mvnxpbstate (class in botorch.utils.probability.mvnxpb)": [[13, "botorch.utils.probability.mvnxpb.mvnxpbState"]], "name (botorch.utils.dispatcher.dispatcher attribute)": [[13, "botorch.utils.dispatcher.Dispatcher.name"]], "ndtr() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.ndtr"]], "normalize() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.normalize"]], "normalize_indices() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.normalize_indices"]], "normalize_linear_constraints() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.normalize_linear_constraints"]], "num_outputs (botorch.utils.testing.mockmodel property)": [[13, "botorch.utils.testing.MockModel.num_outputs"]], "parameter_rollback_ctx() (in module botorch.utils.context_managers)": [[13, "botorch.utils.context_managers.parameter_rollback_ctx"]], "pareto_y (botorch.utils.multi_objective.box_decompositions.box_decomposition_list.boxdecompositionlist property)": [[13, "botorch.utils.multi_objective.box_decompositions.box_decomposition_list.BoxDecompositionList.pareto_Y"]], "perm (botorch.utils.probability.linalg.pivotedcholesky attribute)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.perm"]], "perm (botorch.utils.probability.mvnxpb.mvnxpbstate attribute)": [[13, "botorch.utils.probability.mvnxpb.mvnxpbState.perm"]], "phi() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.phi"]], "piv_chol (botorch.utils.probability.mvnxpb.mvnxpbstate attribute)": [[13, "botorch.utils.probability.mvnxpb.mvnxpbState.piv_chol"]], "pivot_() (botorch.utils.probability.linalg.pivotedcholesky method)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.pivot_"]], "pivot_() (botorch.utils.probability.mvnxpb.mvnxpb method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.pivot_"]], "plug_ins (botorch.utils.probability.mvnxpb.mvnxpbstate attribute)": [[13, "botorch.utils.probability.mvnxpb.mvnxpbState.plug_ins"]], "pop() (botorch.utils.torch.bufferdict method)": [[13, "botorch.utils.torch.BufferDict.pop"]], "posterior() (botorch.utils.testing.mockmodel method)": [[13, "botorch.utils.testing.MockModel.posterior"]], "ref_point (botorch.utils.multi_objective.box_decompositions.box_decomposition_list.boxdecompositionlist property)": [[13, "botorch.utils.multi_objective.box_decompositions.box_decomposition_list.BoxDecompositionList.ref_point"]], "ref_point (botorch.utils.multi_objective.hypervolume.hypervolume property)": [[13, "botorch.utils.multi_objective.hypervolume.Hypervolume.ref_point"]], "reinsert() (botorch.utils.multi_objective.hypervolume.multilist method)": [[13, "botorch.utils.multi_objective.hypervolume.MultiList.reinsert"]], "remove() (botorch.utils.multi_objective.hypervolume.multilist method)": [[13, "botorch.utils.multi_objective.hypervolume.MultiList.remove"]], "requires_grad_ctx() (in module botorch.utils.context_managers)": [[13, "botorch.utils.context_managers.requires_grad_ctx"]], "rsample() (botorch.utils.probability.truncated_multivariate_normal.truncatedmultivariatenormal method)": [[13, "botorch.utils.probability.truncated_multivariate_normal.TruncatedMultivariateNormal.rsample"]], "rsample() (botorch.utils.probability.unified_skew_normal.unifiedskewnormal method)": [[13, "botorch.utils.probability.unified_skew_normal.UnifiedSkewNormal.rsample"]], "rsample() (botorch.utils.testing.mockposterior method)": [[13, "botorch.utils.testing.MockPosterior.rsample"]], "rsample_from_base_samples() (botorch.utils.testing.mockposterior method)": [[13, "botorch.utils.testing.MockPosterior.rsample_from_base_samples"]], "sample_cached_cholesky() (in module botorch.utils.low_rank)": [[13, "botorch.utils.low_rank.sample_cached_cholesky"]], "sample_hypersphere() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.sample_hypersphere"]], "sample_polytope() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.sample_polytope"]], "sample_simplex() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.sample_simplex"]], "sampler (botorch.utils.probability.truncated_multivariate_normal.truncatedmultivariatenormal property)": [[13, "botorch.utils.probability.truncated_multivariate_normal.TruncatedMultivariateNormal.sampler"]], "scale_tril (botorch.utils.probability.unified_skew_normal.unifiedskewnormal property)": [[13, "botorch.utils.probability.unified_skew_normal.UnifiedSkewNormal.scale_tril"]], "select_pivot() (botorch.utils.probability.mvnxpb.mvnxpb method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.select_pivot"]], "setup() (botorch.utils.testing.botorchtestcase method)": [[13, "botorch.utils.testing.BotorchTestCase.setUp"]], "set_x_pending() (botorch.utils.testing.mockacquisitionfunction method)": [[13, "botorch.utils.testing.MockAcquisitionFunction.set_X_pending"]], "shape (botorch.utils.containers.densecontainer property)": [[13, "botorch.utils.containers.DenseContainer.shape"]], "shape (botorch.utils.containers.slicecontainer property)": [[13, "botorch.utils.containers.SliceContainer.shape"]], "soft_eval_constraint() (in module botorch.utils.objective)": [[13, "botorch.utils.objective.soft_eval_constraint"]], "solve() (botorch.utils.probability.mvnxpb.mvnxpb method)": [[13, "botorch.utils.probability.mvnxpb.MVNXPB.solve"]], "solver (botorch.utils.probability.truncated_multivariate_normal.truncatedmultivariatenormal property)": [[13, "botorch.utils.probability.truncated_multivariate_normal.TruncatedMultivariateNormal.solver"]], "sort_by_dimension() (in module botorch.utils.multi_objective.hypervolume)": [[13, "botorch.utils.multi_objective.hypervolume.sort_by_dimension"]], "source() (botorch.utils.dispatcher.dispatcher method)": [[13, "botorch.utils.dispatcher.Dispatcher.source"]], "sparse_to_dense_constraints() (in module botorch.utils.sampling)": [[13, "botorch.utils.sampling.sparse_to_dense_constraints"]], "squeeze_last_dim() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.squeeze_last_dim"]], "standardize() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.standardize"]], "state_dict() (botorch.utils.testing.mockmodel method)": [[13, "botorch.utils.testing.MockModel.state_dict"]], "step (botorch.utils.probability.linalg.pivotedcholesky attribute)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.step"]], "step (botorch.utils.probability.mvnxpb.mvnxpbstate attribute)": [[13, "botorch.utils.probability.mvnxpb.mvnxpbState.step"]], "step() (botorch.utils.probability.lin_ess.linearellipticalslicesampler method)": [[13, "botorch.utils.probability.lin_ess.LinearEllipticalSliceSampler.step"]], "sub() (in module botorch.utils.safe_math)": [[13, "botorch.utils.safe_math.sub"]], "swap_along_dim_() (in module botorch.utils.probability.utils)": [[13, "botorch.utils.probability.utils.swap_along_dim_"]], "t_batch_mode_transform() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.t_batch_mode_transform"]], "test_attributes() (botorch.utils.testing.multiobjectivetestproblembasetestcase method)": [[13, "botorch.utils.testing.MultiObjectiveTestProblemBaseTestCase.test_attributes"]], "test_evaluate_slack_true() (botorch.utils.testing.constrainedmultiobjectivetestproblembasetestcase method)": [[13, "botorch.utils.testing.ConstrainedMultiObjectiveTestProblemBaseTestCase.test_evaluate_slack_true"]], "test_forward() (botorch.utils.testing.basetestproblembasetestcase method)": [[13, "botorch.utils.testing.BaseTestProblemBaseTestCase.test_forward"]], "test_max_hv() (botorch.utils.testing.multiobjectivetestproblembasetestcase method)": [[13, "botorch.utils.testing.MultiObjectiveTestProblemBaseTestCase.test_max_hv"]], "test_num_constraints() (botorch.utils.testing.constrainedmultiobjectivetestproblembasetestcase method)": [[13, "botorch.utils.testing.ConstrainedMultiObjectiveTestProblemBaseTestCase.test_num_constraints"]], "test_optimal_value() (botorch.utils.testing.synthetictestfunctionbasetestcase method)": [[13, "botorch.utils.testing.SyntheticTestFunctionBaseTestCase.test_optimal_value"]], "test_optimizer() (botorch.utils.testing.synthetictestfunctionbasetestcase method)": [[13, "botorch.utils.testing.SyntheticTestFunctionBaseTestCase.test_optimizer"]], "test_ref_point() (botorch.utils.testing.multiobjectivetestproblembasetestcase method)": [[13, "botorch.utils.testing.MultiObjectiveTestProblemBaseTestCase.test_ref_point"]], "training (botorch.utils.gp_sampling.gpdraw attribute)": [[13, "botorch.utils.gp_sampling.GPDraw.training"]], "training (botorch.utils.gp_sampling.randomfourierfeatures attribute)": [[13, "botorch.utils.gp_sampling.RandomFourierFeatures.training"]], "training (botorch.utils.multi_objective.box_decompositions.box_decomposition_list.boxdecompositionlist attribute)": [[13, "botorch.utils.multi_objective.box_decompositions.box_decomposition_list.BoxDecompositionList.training"]], "training (botorch.utils.multi_objective.box_decompositions.dominated.dominatedpartitioning attribute)": [[13, "botorch.utils.multi_objective.box_decompositions.dominated.DominatedPartitioning.training"]], "training (botorch.utils.multi_objective.box_decompositions.non_dominated.fastnondominatedpartitioning attribute)": [[13, "botorch.utils.multi_objective.box_decompositions.non_dominated.FastNondominatedPartitioning.training"]], "training (botorch.utils.multi_objective.box_decompositions.non_dominated.nondominatedpartitioning attribute)": [[13, "botorch.utils.multi_objective.box_decompositions.non_dominated.NondominatedPartitioning.training"]], "training (botorch.utils.torch.bufferdict attribute)": [[13, "botorch.utils.torch.BufferDict.training"]], "tril (botorch.utils.probability.linalg.pivotedcholesky attribute)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.tril"]], "type_bypassing_encoder() (in module botorch.utils.dispatcher)": [[13, "botorch.utils.dispatcher.type_bypassing_encoder"]], "unnormalize() (in module botorch.utils.transforms)": [[13, "botorch.utils.transforms.unnormalize"]], "update() (botorch.utils.multi_objective.box_decompositions.box_decomposition_list.boxdecompositionlist method)": [[13, "botorch.utils.multi_objective.box_decompositions.box_decomposition_list.BoxDecompositionList.update"]], "update() (botorch.utils.torch.bufferdict method)": [[13, "botorch.utils.torch.BufferDict.update"]], "update_() (botorch.utils.probability.linalg.pivotedcholesky method)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.update_"]], "update_local_upper_bounds_incremental() (in module botorch.utils.multi_objective.box_decompositions.utils)": [[13, "botorch.utils.multi_objective.box_decompositions.utils.update_local_upper_bounds_incremental"]], "validate_init (botorch.utils.probability.linalg.pivotedcholesky attribute)": [[13, "botorch.utils.probability.linalg.PivotedCholesky.validate_init"]], "values (botorch.utils.containers.densecontainer attribute)": [[13, "botorch.utils.containers.DenseContainer.values"]], "values (botorch.utils.containers.slicecontainer attribute)": [[13, "botorch.utils.containers.SliceContainer.values"]], "values (botorch.utils.context_managers.tensorcheckpoint attribute)": [[13, "botorch.utils.context_managers.TensorCheckpoint.values"]], "values() (botorch.utils.torch.bufferdict method)": [[13, "botorch.utils.torch.BufferDict.values"]], "variance (botorch.utils.testing.mockposterior property)": [[13, "botorch.utils.testing.MockPosterior.variance"]], "zero_grad_ctx() (in module botorch.utils.context_managers)": [[13, "botorch.utils.context_managers.zero_grad_ctx"]]}})